//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'semantics_parser.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 18th, 2009, at 15h21'38"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semantics_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semantics_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "galgasTemplateGrammar.h"
#include "galgas_LL1_grammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (571)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (571)) ;
  if (((var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (572))).operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (574)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (576)) ;
  }
  GGS_string var_cas_defLexique = GGS_string ("") ;
  GGS_ModelMap  var_cas_modelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_ActionMap  var_cas_actionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentEntitiesMap ;
  GGS_stringset  var_cas_classNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  nt_import_headers_semantics_and_grammars_ (inLexique, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_optionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_componentEntitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_23618 = inLexique.parsingContext () ;
    GGS_typeTableRoutinesAimplementer  var_cas_UNUSED_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_UNUSED_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableEnAvant  var_cas_UNUSED_tableEnAvant = var_cas_tableEnAvant ;
    GGS_M_semanticsEntitiesForUse  var_cas_UNUSED_componentSemanticsEntitiesMap = var_cas_componentEntitiesMap ;
    GGS_EXsemanticContext var_cas_UNUSED_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappers ::constructor_emptyMap (inLexique COMMA_HERE), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE)) ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_UNUSED_componentSemanticsEntitiesMap, var_cas_UNUSED_tableNomRoutinesDeclarees, var_cas_UNUSED_tableEnAvant, var_cas_UNUSED_tableRoutinesAimplementer, var_cas_UNUSED_semanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_23618) ;
    GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
    GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
    { bool syntaxRepeat_0 = true ;
      while (syntaxRepeat_0) {
        switch (select_repeat_semantics_parser_0 (inLexique)) {
          case 2 : {
            nt_semantics_declaration_ (inLexique, var_cas_componentEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_optionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
            } break ;
          default :
            syntaxRepeat_0 = false ;
            break ;
        }
      }
    }
  //--- End of parse/rewind instruction
  if (((var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (657)) COMMA_SOURCE_FILE_AT_LINE (657))).operator_not ()).isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentEntitiesMap COMMA_SOURCE_FILE_AT_LINE (659)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  {
    GGS_typeTableNomRoutinesDeclarees::cEnumerator enumerator_24204 (var_cas_tableNomRoutinesDeclarees, true) ;
    const GGS_typeTableNomRoutinesDeclarees::cElement * operand_24204 = NULL ;
    while (((operand_24204 = enumerator_24204.nextObject ()))) {
      macroValidPointer (operand_24204) ;
      if (((var_cas_tableRoutinesAimplementer.reader_hasKey (inLexique, operand_24204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) COMMA_SOURCE_FILE_AT_LINE (676))).operator_not ()).isBuiltAndTrue ()) {
        operand_24204->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the routine '")).operator_concat (operand_24204->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)))).operator_concat (GGS_string ("' is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }
    }
  }
  {
    GGS_typeTableEnAvant::cEnumerator enumerator_24541 (var_cas_tableEnAvant, true) ;
    const GGS_typeTableEnAvant::cElement * operand_24541 = NULL ;
    while (((operand_24541 = enumerator_24541.nextObject ()))) {
      macroValidPointer (operand_24541) ;
      if (((var_cas_componentEntitiesMap.reader_hasKey (inLexique, operand_24541->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (683)) COMMA_SOURCE_FILE_AT_LINE (683))).operator_not ()).isBuiltAndTrue ()) {
        operand_24541->mKey.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_24541->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684)))).operator_concat (GGS_string ("' forward type is not implemented in the component")) COMMA_SOURCE_FILE_AT_LINE (686)) ;
      }
    }
  }
  if (var_cas_componentName.isBuilt () &&
      var_cas_inclusionsForHeaderFile.isBuilt () &&
      var_cas_defLexique.isBuilt () &&
      var_cas_listeEntitesAengendrer.isBuilt () &&
      var_cas_inclusionsForImplementationFile.isBuilt ()) {
    ::routine_generateSemanticsComponent (inLexique,  var_cas_componentName,  var_cas_inclusionsForHeaderFile,  var_cas_defLexique,  var_cas_listeEntitesAengendrer,  var_cas_inclusionsForImplementationFile COMMA_SOURCE_FILE_AT_LINE (689)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_componentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (721)) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_ModelMap  var_cas_modelMap ;
  GGS_ActionMap  var_cas_actionMap ;
  nt_import_headers_semantics_and_grammars_importSemantics (inLexique, var_cas_ioSemanticsComponentsMap, var_cas_includedSemanticsComponents, var_cas_includedOptionComponents, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_ioSemanticContext, var_cas_ioImportedSemanticsComponentNameSet) ;
  GGS_typeTableRoutinesAimplementer  var_cas_tableRoutinesAimplementer = GGS_typeTableRoutinesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableNomRoutinesDeclarees  var_cas_tableNomRoutinesDeclarees = GGS_typeTableNomRoutinesDeclarees ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_importSemantics (inLexique, var_cas_modelMap, var_cas_actionMap, var_cas_componentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  if (((var_cas_ioSemanticsComponentsMap.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (754)) COMMA_SOURCE_FILE_AT_LINE (754))).operator_not ()).isBuiltAndTrue ()) {
    GGS_M_optionComponents  var_cas_optionsComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
    var_cas_ioSemanticsComponentsMap.modifier_insertKey (inLexique, var_cas_componentName, var_cas_modelMap, var_cas_actionMap, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_optionsComponentsMap, var_cas_componentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (756)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_galgas_component_semantics_parser_558_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_semantics_parser_0 (inLexique)) {
        case 2 : {
          nt_semantics_declaration_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of routine "parse_semantics_component_for_importing"     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parse_semantics_component_for_importing (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inFileName,
                                GGS_M_semanticsComponents  & var_cas_ioSemanticsMapForUse,
                                GGS_EXsemanticContext & var_cas_ioSemanticContext,
                                GGS_stringset  & var_cas_ioImportedSemanticsComponentNameSet COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parse_semantics_component_for_importing at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string _depExtension = GGS_string ("") ;
  const GGS_string _depPath = GGS_string ("") ;
  if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
    galgas_LL1_grammar::_performSourceFileParsing_importSemantics (inLexique,
                                  _depExtension.string (),
                                  _depPath.string (),
                                  NULL,
                                  var_cas_inFileName,
                                  var_cas_ioSemanticsMapForUse,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioImportedSemanticsComponentNameSet
                                  COMMA_SOURCE_FILE_AT_LINE (828)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parse_semantics_component_for_importing\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'import_headers_semantics_and_grammars'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_ (galgas_scanner & inLexique,
                                GGS_stringset  &var_cas_outImportedSemanticsComponentNameSet,
                                GGS_stringset  &var_cas_outIncludedMetamodelComponents,
                                GGS_stringset  &var_cas_outImportedOptionComponents,
                                GGS_stringset  &var_cas_outImportedGrammarComponents,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_stringset  &var_cas_outInclusionsForImplementationFile,
                                GGS_stringset  &var_cas_outInclusionsForHeaderFile,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outInclusionsForHeaderFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outInclusionsForImplementationFile = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedSemanticsComponentNameSet = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outImportedGrammarComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_ioOptionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("char"), GGS_location (inLexique) COMMA_HERE), GGS_CharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (872)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("string"), GGS_location (inLexique) COMMA_HERE), GGS_StringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (874)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint"), GGS_location (inLexique) COMMA_HERE), GGS_UIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (876)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint"), GGS_location (inLexique) COMMA_HERE), GGS_SIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (878)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("uint64"), GGS_location (inLexique) COMMA_HERE), GGS_UInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (880)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sint64"), GGS_location (inLexique) COMMA_HERE), GGS_SInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (882)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("bool"), GGS_location (inLexique) COMMA_HERE), GGS_BoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (884)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("double"), GGS_location (inLexique) COMMA_HERE), GGS_DoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (886)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lchar"), GGS_location (inLexique) COMMA_HERE), GGS_LCharModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (888)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lstring"), GGS_location (inLexique) COMMA_HERE), GGS_LStringModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (890)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint"), GGS_location (inLexique) COMMA_HERE), GGS_LUIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (892)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint"), GGS_location (inLexique) COMMA_HERE), GGS_LSIntModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (894)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("luint64"), GGS_location (inLexique) COMMA_HERE), GGS_LUInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (896)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lsint64"), GGS_location (inLexique) COMMA_HERE), GGS_LSInt64Model ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (898)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("lbool"), GGS_location (inLexique) COMMA_HERE), GGS_LBoolModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (900)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("ldouble"), GGS_location (inLexique) COMMA_HERE), GGS_LDoubleModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (902)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("location"), GGS_location (inLexique) COMMA_HERE), GGS_LocationModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (904)) ;
  var_cas_outModelMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("stringset"), GGS_location (inLexique) COMMA_HERE), GGS_StringsetModel ::constructor_new (inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (906)) ;
  ::routine_enterBuiltinTypes (inLexique,  var_cas_ioComponentSemanticsEntitiesMap COMMA_SOURCE_FILE_AT_LINE (908)) ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (921))) ;
              var_cas_outImportedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))) ;
              GGS_M_cli_options  var_cas_boolOptionsMap ;
              GGS_M_cli_options  var_cas_uintOptionsMap ;
              GGS_M_cli_options  var_cas_stringOptionsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_fileName ;
              inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
              const GGS_M_optionComponents  temp_33079 = var_cas_importedOptionComponentsMap ;
              if (temp_33079.isBuilt ()) {
                temp_33079 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (934)) ;
              }
              var_cas_ioOptionsComponentsMapForUse.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (935)) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              GGS_lstring  var_cas_grammarComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_grammarComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForImplementationFile.addAssign_operation ((var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (940))).operator_concat (GGS_string (".h"))) ;
              var_cas_outImportedGrammarComponents.addAssign_operation (var_cas_grammarComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_ (inLexique, var_cas_sourceFile, var_cas_grammarComponentsMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioSemanticContext) ;
              GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
              GGS_lstring  var_cas_lexiqueClassName ;
              GGS_M_optionComponents  automatic_var_0 ;
              const GGS_M_grammarComponents  temp_34049 = var_cas_grammarComponentsMap ;
              if (temp_34049.isBuilt ()) {
                temp_34049 (HERE)->method_searchKey (inLexique, var_cas_grammarComponentName, var_cas_nonterminalSymbolParametersMap, var_cas_lexiqueClassName, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (955)) ;
              }
              GGS_M_nonterminalSymbolAlts  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAlts ::constructor_emptyMap (inLexique COMMA_HERE) ;
              {
                GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_34230 (var_cas_nonterminalSymbolParametersMap, true) ;
                const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_34230 = NULL ;
                while (((operand_34230 = enumerator_34230.nextObject ()))) {
                  macroValidPointer (operand_34230) ;
                  GGS_L_EXsignature  var_cas_formalParametersList = GGS_L_EXsignature ::constructor_emptyList () ;
                  {
                    GGS_L_signature::cEnumerator enumerator_34359 (operand_34230->mInfo.mFormalParametersList, true) ;
                    const GGS_L_signature::cElement * operand_34359 = NULL ;
                    while (((operand_34359 = enumerator_34359.nextObject ()))) {
                      macroValidPointer (operand_34359) ;
                      GGS_AC_semanticsEntity  var_cas_e ;
                      const GGS_M_semanticsEntitiesForUse  temp_34510 = var_cas_ioComponentSemanticsEntitiesMap ;
                      if (temp_34510.isBuilt ()) {
                        temp_34510 (HERE)->method_searchKey (inLexique, operand_34359->mGalgasTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (961)) ;
                      }
                      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, operand_34359->mGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (962)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (962)) ;
                      var_cas_formalParametersList.addAssign_operation (var_cas_type, operand_34359->mFormalArgumentPassingMode) ;
                    }
                  }
                  var_cas_grammarAltMap.modifier_insertKey (inLexique, operand_34230->mKey, var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (965)) ;
                }
              }
              GGS_AC_semanticsEntity  var_cas_e = GGS_C_grammarForSemantics ::constructor_new (inLexique, var_cas_grammarAltMap, var_cas_lexiqueClassName COMMA_HERE) ;
              var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_grammarComponentName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (968)) ;
              GGS_lstring  var_cas_path = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_extension = GGS_lstring ::constructor_new (inLexique, GGS_string ("h"), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_fileNameWithPath ;
              if (var_cas_path.isBuilt () &&
                  var_cas_grammarComponentName.isBuilt () &&
                  var_cas_extension.isBuilt ()) {
                ::routine_buildFileNameWithPath (inLexique,  var_cas_fileNameWithPath,  var_cas_path,  var_cas_grammarComponentName,  var_cas_extension COMMA_SOURCE_FILE_AT_LINE (972)) ;
              }
              var_cas_outInclusionsForImplementationFile.addAssign_operation (var_cas_fileNameWithPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (973))) ;
              {
                GGS_M_grammarComponents::cEnumerator enumerator_35298 (var_cas_grammarComponentsMap, true) ;
                const GGS_M_grammarComponents::cElement * operand_35298 = NULL ;
                while (((operand_35298 = enumerator_35298.nextObject ()))) {
                  macroValidPointer (operand_35298) ;
                  if (((var_cas_ioGrammarComponentsMap.reader_hasKey (inLexique, operand_35298->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (978)) COMMA_SOURCE_FILE_AT_LINE (978))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, operand_35298->mKey, operand_35298->mInfo.mNonterminalSymbolParametersMap, operand_35298->mInfo.mLexiqueName, operand_35298->mInfo.mOptionsMap COMMA_SOURCE_FILE_AT_LINE (979)) ;
                  }
                }
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outInclusionsForHeaderFile.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (991))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (((var_cas_outImportedSemanticsComponentNameSet.reader_hasKey (inLexique, var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (995)) COMMA_SOURCE_FILE_AT_LINE (995))).operator_not ()).isBuiltAndTrue ()) {
                var_cas_outImportedSemanticsComponentNameSet.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (996))) ;
                ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_outImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (998)) ;
                GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
                GGS_M_optionComponents  var_cas_importedOptionsComponentsMap ;
                GGS_ModelMap  automatic_var_1 ;
                GGS_ActionMap  automatic_var_2 ;
                GGS_stringset  automatic_var_3 ;
                GGS_stringset  automatic_var_4 ;
                GGS_stringset  automatic_var_5 ;
                const GGS_M_semanticsComponents  temp_36628 = var_cas_ioSemanticsComponentsMap ;
                if (temp_36628.isBuilt ()) {
                  temp_36628 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_1, automatic_var_2, automatic_var_3, automatic_var_4, automatic_var_5, var_cas_importedOptionsComponentsMap, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1006)) ;
                }
                {
                  GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_36731 (var_cas_importedEntities, true) ;
                  const GGS_M_semanticsEntitiesForUse::cElement * operand_36731 = NULL ;
                  while (((operand_36731 = enumerator_36731.nextObject ()))) {
                    macroValidPointer (operand_36731) ;
                    if (((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_36731->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1008)) COMMA_SOURCE_FILE_AT_LINE (1008))).operator_not ()).isBuiltAndTrue ()) {
                      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_36731->mKey, operand_36731->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1009)) ;
                    }
                  }
                }
                {
                  GGS_M_optionComponents::cEnumerator enumerator_37171 (var_cas_importedOptionsComponentsMap, true) ;
                  const GGS_M_optionComponents::cElement * operand_37171 = NULL ;
                  while (((operand_37171 = enumerator_37171.nextObject ()))) {
                    macroValidPointer (operand_37171) ;
                    if (((var_cas_ioOptionsComponentsMapForUse.reader_hasKey (inLexique, operand_37171->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1015)) COMMA_SOURCE_FILE_AT_LINE (1015))).operator_not ()).isBuiltAndTrue ()) {
                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_37171->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)))).operator_concat (GGS_string ("' option component must have been imported")) COMMA_SOURCE_FILE_AT_LINE (1017)) ;
                    }
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1021)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_stringset  &var_cas_outIncludedSemanticsComponents,
                                GGS_stringset  &var_cas_outIncludedOptionComponents,
                                GGS_ModelMap  &var_cas_outModelMap,
                                GGS_ActionMap  &var_cas_outActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                GGS_stringset  &var_cas_ioImportedSemanticsComponentNameSet) {
  var_cas_outActionMap = GGS_ActionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outModelMap = GGS_ModelMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outIncludedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  var_cas_outIncludedOptionComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedSemanticsComponents = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_alreadyImportedMetamodelComponents = GGS_stringset ::constructor_emptySet () ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              GGS_lstring  var_cas_optionComponentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedOptionComponents.addAssign_operation (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1059))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              GGS_lstring  var_cas_componentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_componentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_outIncludedSemanticsComponents.addAssign_operation (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1073))) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              GGS_lstring  var_cas_sourceFile ;
              inLexique.assignFromAttribute_tokenString (var_cas_sourceFile) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              ::routine_parse_semantics_component_for_importing (inLexique,  var_cas_sourceFile,  var_cas_ioSemanticsComponentsMap,  var_cas_ioSemanticContext,  var_cas_ioImportedSemanticsComponentNameSet COMMA_SOURCE_FILE_AT_LINE (1077)) ;
              GGS_M_semanticsEntitiesForUse  var_cas_importedEntities ;
              GGS_ModelMap  automatic_var_6 ;
              GGS_ActionMap  automatic_var_7 ;
              GGS_stringset  automatic_var_8 ;
              GGS_stringset  automatic_var_9 ;
              GGS_stringset  automatic_var_10 ;
              GGS_M_optionComponents  automatic_var_11 ;
              const GGS_M_semanticsComponents  temp_39554 = var_cas_ioSemanticsComponentsMap ;
              if (temp_39554.isBuilt ()) {
                temp_39554 (HERE)->method_searchKey (inLexique, var_cas_componentName, automatic_var_6, automatic_var_7, automatic_var_8, automatic_var_9, automatic_var_10, automatic_var_11, var_cas_importedEntities COMMA_SOURCE_FILE_AT_LINE (1084)) ;
              }
              {
                GGS_M_semanticsEntitiesForUse::cEnumerator enumerator_39628 (var_cas_importedEntities, true) ;
                const GGS_M_semanticsEntitiesForUse::cElement * operand_39628 = NULL ;
                while (((operand_39628 = enumerator_39628.nextObject ()))) {
                  macroValidPointer (operand_39628) ;
                  if (((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, operand_39628->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1086)) COMMA_SOURCE_FILE_AT_LINE (1086))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, operand_39628->mKey, operand_39628->mInfo.aDefEntite COMMA_SOURCE_FILE_AT_LINE (1087)) ;
                  }
                }
              }
              ::routine_importSemanticsComponent (inLexique,  var_cas_ioSemanticsComponentsMap,  var_cas_outModelMap,  var_cas_outActionMap,  var_cas_alreadyImportedSemanticsComponents,  var_cas_alreadyImportedMetamodelComponents,  var_cas_componentName COMMA_SOURCE_FILE_AT_LINE (1091)) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_import_headers_semantics_and_grammars_semantics_parser_841_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_semantics_parser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
          switch (select_semantics_parser_2 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_option_component_for_importing_parse (inLexique) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              nt_parse_grammar_component_for_importing_parse (inLexique) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_semantics) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_12 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_12) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)) COMMA_SOURCE_FILE_AT_LINE (1137))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_41795 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_41795.isBuilt ()) {
      temp_41795 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1139)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1140)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1141)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1147)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1149)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea = GGS_typeRoutineAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1177)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  if (((var_cas_ioExternActionMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1206)) COMMA_SOURCE_FILE_AT_LINE (1206))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1207)) ;
  }
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1209)) COMMA_SOURCE_FILE_AT_LINE (1209))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_44424 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_44424.isBuilt ()) {
      temp_44424 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1211)) ;
    }
    GGS_typeEntiteRoutine  var_cas_precedenteDeclaration = GGS_typeEntiteRoutine::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1212)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1213)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1219)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutine ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1221)) ;
  }
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1232)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1110_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  switch (select_semantics_parser_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_13 ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_13) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1284)) COMMA_HERE) ;
  GGS_bool var_cas_modeIn = GGS_bool (false) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1286)) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1289)) COMMA_SOURCE_FILE_AT_LINE (1289))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_47578 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_47578.isBuilt ()) {
      temp_47578 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1291)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1292)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1293)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1298)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1305)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1307)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_ioInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_localVariableMap, var_cas_ioInstructionList, var_cas_ioSemanticContext) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_typeEntityToGenerate  var_cas_ea = GGS_typeFonctionAengendrer ::constructor_new (inLexique, var_cas_routineName, var_cas_listeTypeEtNomsArguments, var_cas_returnedType, var_cas_returnedVar, var_cas_ioInstructionList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1337)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_routineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_localVariableMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedVar = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)) COMMA_HERE) ;
  var_cas_localVariableMap.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_returnedVar COMMA_SOURCE_FILE_AT_LINE (1380)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_signature, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1382)) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_routineName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)) COMMA_SOURCE_FILE_AT_LINE (1384))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_51021 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_51021.isBuilt ()) {
      temp_51021 (HERE)->method_searchKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1386)) ;
    }
    GGS_typeEntiteFonction  var_cas_precedenteDeclaration = GGS_typeEntiteFonction::castFrom (inLexique, var_cas_entite.getPtr (), false, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1387)) ;
    ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_precedenteDeclaration.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)),  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1388)) ;
    ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_precedenteDeclaration.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1394)),  var_cas_returnedType,  GGS_location (inLexique),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1393)) ;
  }else{
    var_cas_tableNomRoutinesDeclarees.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1400)) ;
    GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonction ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
    var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_routineName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1402)) ;
  }
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      var_cas_tableRoutinesAimplementer.modifier_insertKey (inLexique, var_cas_routineName COMMA_SOURCE_FILE_AT_LINE (1413)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1244_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_4 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      nt_semantic_instructions_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClassName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  var_cas_outSuperClassMessage = GGS_string ("") ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_tableDesClassesAncetres = GGS_typeSuperClassesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableDesMethodes = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableMessagesAbstraits = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
  var_cas_outHasGeneratedInSeparateFileSetting = GGS_bool (false) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1423_19_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parent_class'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_lstring  &var_cas_outSuperClassName,
                                GGS_string &var_cas_outSuperClassMessage,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outSuperClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_54997 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_54997.isBuilt ()) {
    temp_54997 (HERE)->method_searchKey (inLexique, var_cas_outSuperClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1485)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1487)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1487)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1488)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1490)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1491)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1493)) ;
  var_cas_outSuperClassMessage = var_cas_classType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (1494)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1495)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_outSuperClassName COMMA_SOURCE_FILE_AT_LINE (1497)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_stringset  &var_cas_outSuperClasses,
                                GGS_typeListModel  &var_cas_outAttributeList,
                                GGS_classMessageMap  &var_cas_outMessageMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeSuperClassesMap  &var_cas_tableDesClassesAncetres,
                                GGS_typeClassInheritedMessagesMap  &var_cas_tableMessagesAbstraits,
                                GGS_bool &var_cas_outHasGeneratedInSeparateFileSetting) {
  GGS_lstring  var_cas_superClassName ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_superClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_56597 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_56597.isBuilt ()) {
    temp_56597 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1517)) ;
  }
  GGS_AC_galgasType  var_cas_typeUtilisateur = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1519)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1519)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeUtilisateur.getPtr (), true, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1520)) ;
  var_cas_tableDesMethodes = var_cas_classType.reader_mMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)) ;
  var_cas_listeTousAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1522)) ;
  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1524)) ;
  var_cas_tableAttributs = var_cas_classType.reader_mNonExternAttributesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1525)) ;
  var_cas_outHasGeneratedInSeparateFileSetting = var_cas_classType.reader_mHasGeneratedInSeparateFileSetting (inLexique COMMA_SOURCE_FILE_AT_LINE (1526)) ;
  var_cas_tableDesClassesAncetres.modifier_insertKey (inLexique, var_cas_superClassName COMMA_SOURCE_FILE_AT_LINE (1529)) ;
  GGS_TypeModel  var_cas_type ;
  const GGS_ModelMap  temp_57480 = var_cas_ioModelMap ;
  if (temp_57480.isBuilt ()) {
    temp_57480 (HERE)->method_searchKey (inLexique, var_cas_superClassName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1532)) ;
  }
  { const GGS_TypeModel _var_57937 = var_cas_type ; // CAST instruction
    if (_var_57937.getPtr () != NULL) {
      macroValidPointer (_var_57937.getPtr ()) ;
      if (dynamic_cast <cPtr_ClassModel *> (_var_57937.getPtr ()) != NULL) {
        const GGS_ClassModel var_cas_model (_var_57937.getPtr ()) ;
        var_cas_outSuperClasses = var_cas_model.reader_mSuperClasses (inLexique COMMA_SOURCE_FILE_AT_LINE (1535)) ;
        var_cas_outAttributeList = var_cas_model.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1536)) ;
        var_cas_outMessageMap = var_cas_model.reader_mMessageMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1537)) ;
      }else{
        var_cas_superClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1539)))).operator_concat (GGS_string ("' type is not a class")) COMMA_SOURCE_FILE_AT_LINE (1541)) ;
        var_cas_outSuperClasses.drop () ;
        var_cas_outAttributeList.drop () ;
        var_cas_outMessageMap.drop () ;
      }
    }
  }
  var_cas_outSuperClasses.addAssign_operation (var_cas_superClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1542))) ;
  var_cas_outMessageMap = GGS_classMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  var_cas_outSuperClasses = GGS_stringset ::constructor_emptySet () ;
  var_cas_outAttributeList = GGS_typeListModel ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parent_class_semantics_parser_1469_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extends) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1556_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  nt_semantics_declaration_beginning_by_abstract_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (true)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_1602_50_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  nt_class_declaration_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer, var_cas_ioSemanticContext, GGS_bool (false)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_1644_28_parse (galgas_scanner & inLexique) {
  nt_class_declaration_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lazy_reader'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1704_18_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_L_lazyAttributeList  &var_cas_ioLazyAttributeList) {
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_64404 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_64404 = NULL ;
    while (((operand_64404 = enumerator_64404.nextObject ()))) {
      macroValidPointer (operand_64404) ;
      GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_64404->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)), operand_64404->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1723)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_64404->mKey, operand_64404->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1724)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_computedAttributeTypeAndNameList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_lstring  var_cas_attributeTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_lstring  var_cas_attributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_64917 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_64917.isBuilt ()) {
          temp_64917 (HERE)->method_searchKey (inLexique, var_cas_attributeTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1733)) ;
        }
        GGS_AC_galgasType  var_cas_t = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_attributeTypeName COMMA_SOURCE_FILE_AT_LINE (1734)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1734)) ;
        GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, var_cas_attributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)), var_cas_attributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1735)) COMMA_HERE) ;
        var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_attributeName, var_cas_t, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (1736)) ;
        var_cas_computedAttributeTypeAndNameList.addAssign_operation (var_cas_t, var_cas_attributeName) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_L_lazyAttributeList  var_cas_lazyAttributeListForSelfAndSuper = var_cas_ioLazyAttributeList ;
  var_cas_lazyAttributeListForSelfAndSuper.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, GGS_typeInstructionList ::constructor_emptyList ()) ;
  GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1759)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_lazyAttributeListForSelfAndSuper COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (1773)) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1777)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioLazyAttributeList.addAssign_operation (GGS_location (inLexique), var_cas_computedAttributeTypeAndNameList, var_cas_instructionsList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_lazy_reader_semantics_parser_1704_18_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_5 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_lazy) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'class_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1817)) COMMA_SOURCE_FILE_AT_LINE (1817))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1818)) COMMA_SOURCE_FILE_AT_LINE (1818)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (1820)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_string var_cas_superClassMessage ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting ;
      GGS_lstring  automatic_var_14 ;
      nt_parent_class_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, automatic_var_14, var_cas_superClassMessage, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1847))).operator_isNotEqual (GGS_string ("generatedInSeparateFile"))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (1849)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          if (((var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (1851))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (1853)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1880))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (1882)) ;
                  }else if (((var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1882))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (1884)) ;
                  }else{
                    var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1885)) ;
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)) COMMA_SOURCE_FILE_AT_LINE (1894))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (1895)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (1897)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_inOptionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      if ((((var_cas_superClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1963))).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1963))).operator_isEqual (GGS_uint (0U)))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this class should defined a class message, as it inherits from a class that does") COMMA_SOURCE_FILE_AT_LINE (1965)) ;
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_73157 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_73157 = NULL ;
        while (((operand_73157 = enumerator_73157.nextObject ()))) {
          macroValidPointer (operand_73157) ;
          if (((var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_73157->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1968)) COMMA_SOURCE_FILE_AT_LINE (1968))).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_73157->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1969)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (1970)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1986)) ;
      GGS_typeListeAttributsSemantiques  var_cas_setterAttributeModifierToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_74075 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_74075 = NULL ;
        while (((operand_74075 = enumerator_74075.nextObject ()))) {
          macroValidPointer (operand_74075) ;
          GGS_bool var_cas_hasSetter ;
          GGS_AC_galgasType  automatic_var_15 ;
          GGS_bool automatic_var_16 ;
          const GGS_typeSemanticAttributesMap  temp_74134 = var_cas_tableAttributs ;
          if (temp_74134.isBuilt ()) {
            temp_74134 (HERE)->method_searchKey (inLexique, operand_74075->mAttributeName, automatic_var_15, var_cas_hasSetter, automatic_var_16 COMMA_SOURCE_FILE_AT_LINE (1991)) ;
          }
          if ((var_cas_hasSetter).isBuiltAndTrue ()) {
            var_cas_setterAttributeModifierToImplementList.addAssign_operation (operand_74075->mAttributType, operand_74075->mAttributeName) ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_getterAttributeReaderToImplementList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_74485 (var_cas_listeAttributsSemantiquesCourants, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_74485 = NULL ;
        while (((operand_74485 = enumerator_74485.nextObject ()))) {
          macroValidPointer (operand_74485) ;
          GGS_bool var_cas_hasGetter ;
          GGS_AC_galgasType  automatic_var_17 ;
          GGS_bool automatic_var_18 ;
          const GGS_typeSemanticAttributesMap  temp_74544 = var_cas_tableAttributs ;
          if (temp_74544.isBuilt ()) {
            temp_74544 (HERE)->method_searchKey (inLexique, operand_74485->mAttributeName, automatic_var_17, automatic_var_18, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (2003)) ;
          }
          if ((var_cas_hasGetter).isBuiltAndTrue ()) {
            var_cas_getterAttributeReaderToImplementList.addAssign_operation (operand_74485->mAttributType, operand_74485->mAttributeName) ;
          }
        }
      }
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_classToImplement ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_inIsAbstract, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_listeAttributsSemantiquesCourants, var_cas_tableDesClassesAncetres, var_cas_tableMessagesClasseConcrete, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement, var_cas_setterAttributeModifierToImplementList, var_cas_getterAttributeReaderToImplementList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext,
                                const GGS_bool var_cas_inIsAbstract) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  GGS_lstring  var_cas_abstractClassName ;
  inLexique.assignFromAttribute_tokenString (var_cas_abstractClassName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2045)) COMMA_SOURCE_FILE_AT_LINE (2045))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_abstractClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2046)) COMMA_SOURCE_FILE_AT_LINE (2046)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedClassType ::constructor_new (inLexique, var_cas_abstractClassName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2048)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_typeTableMethodes  var_cas_ancestorClassMethodsMap ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques ;
      GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres ;
      GGS_typeClassInheritedMessagesMap  var_cas_inheritedMessageMap ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs ;
      GGS_stringset  var_cas_superClasses ;
      GGS_typeListModel  var_cas_attributeList ;
      GGS_classMessageMap  var_cas_messageMap ;
      GGS_bool var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (false) ;
      nt_parent_class_importSemantics (inLexique, var_cas_ioModelMap, var_cas_superClasses, var_cas_attributeList, var_cas_messageMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_ancestorClassMethodsMap, var_cas_tableDesClassesAncetres, var_cas_inheritedMessageMap, var_cas_hasGeneratedInSeparateFileSetting) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          GGS_lstring  var_cas_optionString ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionString) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2079))).operator_isNotEqual (GGS_string ("generatedInSeparateFile"))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the \"generatedInSeparateFile\" pragma is allowed here") COMMA_SOURCE_FILE_AT_LINE (2081)) ;
          }
          var_cas_hasGeneratedInSeparateFileSetting = GGS_bool (true) ;
          if (((var_cas_tableDesClassesAncetres.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (2083))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
            var_cas_optionString.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the \"generatedInSeparateFile\" pragma is allowed only for a base class") COMMA_SOURCE_FILE_AT_LINE (2085)) ;
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeList, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableMethodesAimplementer  var_cas_tableMethodesAimplementer = GGS_typeTableMethodesAimplementer ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassMessagesMap  var_cas_tableMessagesClasseConcrete = GGS_typeClassMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs = GGS_typeClassInheritedMessagesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeTableMethodes  var_cas_tableDesMethodes = var_cas_ancestorClassMethodsMap ;
      GGS_typeEntitiesToGenerateList  var_cas_listeEntitesAengendrer = GGS_typeEntitiesToGenerateList ::constructor_emptyList () ;
      GGS_M_optionComponents  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_L_lazyAttributeList  var_cas_onceReaderListToImplement = GGS_L_lazyAttributeList ::constructor_emptyList () ;
      GGS_string var_cas_classMessage = GGS_string ("") ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_classMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2113))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message is already defined") COMMA_SOURCE_FILE_AT_LINE (2115)) ;
                  }else if (((var_cas_messageText.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2115))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
                    var_cas_messageText.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the class message string should not be empty") COMMA_SOURCE_FILE_AT_LINE (2117)) ;
                  }else{
                    var_cas_classMessage = var_cas_messageText.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2118)) ;
                  }
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_messageName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_lstring  var_cas_messageText ;
                  inLexique.assignFromAttribute_tokenString (var_cas_messageText) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (((var_cas_inheritedMessageMap.reader_hasKey (inLexique, var_cas_messageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2127)) COMMA_SOURCE_FILE_AT_LINE (2127))).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_messageMapForHeirs.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (2128)) ;
                  }
                  var_cas_tableMessagesClasseConcrete.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageText COMMA_SOURCE_FILE_AT_LINE (2130)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_ (inLexique, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableDesMethodes, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 5 : {
              nt_overrided_method_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableMethodesAimplementer, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            case 6 : {
              nt_lazy_reader_ (inLexique, var_cas_abstractClassName, var_cas_ancestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_optionsComponentsMapForUse, var_cas_classMessage, var_cas_ioSemanticContext, var_cas_onceReaderListToImplement) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeClassInheritedMessagesMap::cEnumerator enumerator_81064 (var_cas_inheritedMessageMap, true) ;
        const GGS_typeClassInheritedMessagesMap::cElement * operand_81064 = NULL ;
        while (((operand_81064 = enumerator_81064.nextObject ()))) {
          macroValidPointer (operand_81064) ;
          if (((var_cas_tableMessagesClasseConcrete.reader_hasKey (inLexique, operand_81064->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2196)) COMMA_SOURCE_FILE_AT_LINE (2196))).operator_not ()).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the message '")).operator_concat (operand_81064->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2197)))).operator_concat (GGS_string ("' is not defined")) COMMA_SOURCE_FILE_AT_LINE (2198)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_abstractClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inIsAbstract, var_cas_classMessage, var_cas_hasGeneratedInSeparateFileSetting, var_cas_onceReaderListToImplement COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2214)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_TypeModel  var_cas_t = GGS_ClassModel ::constructor_new (inLexique, GGS_bool (true), var_cas_superClasses, var_cas_attributeList, var_cas_messageMap COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_abstractClassName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (2217)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_class_declaration_semantics_parser_1803_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_6 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      nt_parent_class_parse (inLexique) ;
      switch (select_semantics_parser_7 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_8 = true ;
        while (syntaxRepeat_8) {
          switch (select_repeat_semantics_parser_8 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              switch (select_semantics_parser_9 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              nt_abstract_method_parse (inLexique) ;
              } break ;
            case 4 : {
              nt_non_abstract_method_parse (inLexique) ;
              } break ;
            case 5 : {
              nt_overrided_method_parse (inLexique) ;
              } break ;
            case 6 : {
              nt_lazy_reader_parse (inLexique) ;
              } break ;
            default :
              syntaxRepeat_8 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'abstract_method'             *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2225_22_ (galgas_scanner & inLexique,
                                const GGS_bool var_cas_inIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  if (((var_cas_inIsAbstract).operator_not ()).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a concrete class should not declare an abstract method") COMMA_SOURCE_FILE_AT_LINE (2236)) ;
  }
  GGS_lstring  var_cas_nomMethode ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (2251)) ;
  GGS_typeInstructionList  var_cas_listeInstructions = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_tableMethodesAimplementer.modifier_insertAbstract (inLexique, var_cas_nomMethode, var_cas_listeDeTypes, var_cas_listeTypeEtNomsArguments, var_cas_listeInstructions COMMA_SOURCE_FILE_AT_LINE (2253)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_abstract_method_semantics_parser_2225_22_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'parse_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2259_19_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                const GGS_typeTableMethodes  var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributsHerites,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outMethodName,
                                GGS_typeInstructionList  &var_cas_outInstructionsList,
                                GGS_L_EXsignature  &var_cas_outMethodSignature,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.assignFromAttribute_tokenString (var_cas_outMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_typeSemanticAttributesMap::cEnumerator enumerator_84420 (var_cas_tableAttributsHerites, true) ;
    const GGS_typeSemanticAttributesMap::cElement * operand_84420 = NULL ;
    while (((operand_84420 = enumerator_84420.nextObject ()))) {
      macroValidPointer (operand_84420) ;
      GGS_typeCplusPlusName  var_cas_nomCpp = GGS_typeDirectName ::constructor_new (inLexique, operand_84420->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2284)), operand_84420->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2284)) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_84420->mKey, operand_84420->mInfo.mAttributType, var_cas_nomCpp COMMA_SOURCE_FILE_AT_LINE (2285)) ;
    }
  }
  GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_tableDesMethodes, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppThisName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2300)) ;
  var_cas_typeDefinition = GGS_typeGalgasClassType ::constructor_new (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributsHerites, var_cas_inClassIsAbstract, var_cas_inClassMessage, GGS_bool (false), var_cas_inLazyAttributeListToImplement COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("super"), GGS_location (inLexique) COMMA_HERE), var_cas_typeDefinition, GGS_typeCppInheritedName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (2314)) ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_outMethodSignature, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentSemanticsEntitiesMap = var_cas_ioComponentSemanticsEntitiesMap ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_typeDefinition COMMA_HERE) ;
  var_cas_componentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_inCurrentClassName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2329)) ;
  var_cas_outInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_componentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_outInstructionsList, var_cas_inSemanticContext) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_method_semantics_parser_2259_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'non_abstract_method'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2344_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  var_cas_tableDesMethodes.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (2386)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2387)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_non_abstract_method_semantics_parser_2344_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'overrided_method'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2395_23_ (galgas_scanner & inLexique,
                                const GGS_lstring  var_cas_inCurrentClassName,
                                const GGS_typeTableMethodes  var_cas_inAncestorClassMethodsMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques,
                                GGS_typeTableMethodes  &var_cas_tableDesMethodes,
                                const GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres,
                                const GGS_typeClassInheritedMessagesMap  var_cas_messageMapForHeirs,
                                const GGS_typeSemanticAttributesMap  var_cas_tableAttributs,
                                const GGS_bool var_cas_inClassIsAbstract,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableMethodesAimplementer  &var_cas_tableMethodesAimplementer,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_string var_cas_inClassMessage,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_L_lazyAttributeList  var_cas_inLazyAttributeListToImplement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  GGS_typeInstructionList  var_cas_instructionsList ;
  GGS_L_EXsignature  var_cas_methodSignature ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  nt_parse_method_ (inLexique, var_cas_inCurrentClassName, var_cas_inAncestorClassMethodsMap, var_cas_listeTousAttributsSemantiques, var_cas_tableDesMethodes, var_cas_tableDesClassesAncetres, var_cas_messageMapForHeirs, var_cas_tableAttributs, var_cas_inClassIsAbstract, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableEnAvant, var_cas_methodName, var_cas_instructionsList, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_inOptionsComponentsMapForUse, var_cas_inClassMessage, var_cas_inSemanticContext, var_cas_inLazyAttributeListToImplement) ;
  GGS_L_EXsignature  var_cas_listeDeTypesMethodeOriginale ;
  const GGS_typeTableMethodes  temp_89987 = var_cas_tableDesMethodes ;
  if (temp_89987.isBuilt ()) {
    temp_89987 (HERE)->method_searchKey (inLexique, var_cas_methodName, var_cas_listeDeTypesMethodeOriginale COMMA_SOURCE_FILE_AT_LINE (2440)) ;
  }
  ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesMethodeOriginale,  var_cas_methodSignature,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (2441)) ;
  var_cas_tableMethodesAimplementer.modifier_insertNotAbstract (inLexique, var_cas_methodName, var_cas_methodSignature, var_cas_listeTypeEtNomsArguments, var_cas_instructionsList COMMA_SOURCE_FILE_AT_LINE (2447)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_overrided_method_semantics_parser_2395_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  nt_parse_method_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'formal_arguments_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_L_signature  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2488)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2488)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2490)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2493)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2493)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2495)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2514)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2514)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2516)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2520)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2520)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2522)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2541)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2541)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2543)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2546)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2546)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (false), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2548)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2565)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2565)) COMMA_HERE) ;
          GGS_bool var_cas_modeIn = GGS_bool (false) ;
          var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
          var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2568)) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_L_signature  &var_cas_outSignature) {
  var_cas_outSignature = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_arguments_list_semantics_parser_2458_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_repeat_semantics_parser_10 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_11 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_12 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_13 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'formal_input_arguments_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_EXsignature  &var_cas_listeDeTypes,
                                GGS_typeVariablesMap  &var_cas_tableArgumentsMethode,
                                GGS_typeListeTypesEtNomsArgMethode  &var_cas_listeTypeEtNomsArguments,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_L_signature  &var_cas_outSignatureForGrammar) {
  var_cas_listeDeTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  var_cas_listeTypeEtNomsArguments = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
  var_cas_outSignatureForGrammar = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          GGS_lstring  var_cas_nomArgument ;
          GGS_bool var_cas_modeIn = GGS_bool (true) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2655)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2655)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2657)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2660)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2660)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, var_cas_modeIn, var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2662)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type_semantique ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
          var_cas_listeDeTypes.addAssign_operation (var_cas_type_semantique, var_cas_passingMode) ;
          var_cas_outSignatureForGrammar.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2681)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2681)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertUnusedInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2683)) ;
              } break ;
            case 2 : {
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2687)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2687)) COMMA_HERE) ;
              var_cas_listeTypeEtNomsArguments.addAssign_operation (var_cas_type_semantique, var_cas_passingMode, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
              var_cas_tableArgumentsMethode.modifier_insertInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (2689)) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_L_signature  &var_cas_outSignature) {
  var_cas_outSignature = GGS_L_signature ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
          GGS_lstring  var_cas_galgasTypeName ;
          nt_formal_argument_type_importGrammarForSemantics (inLexique, var_cas_galgasTypeName) ;
          var_cas_outSignature.addAssign_operation (var_cas_passingMode, var_cas_galgasTypeName) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_input_arguments_list_semantics_parser_2625_34_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_repeat_semantics_parser_14 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_15 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          nt_formal_argument_type_parse (inLexique) ;
          switch (select_semantics_parser_16 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'type_parsing'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2728_19_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_outTypeDefinition,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2735)) COMMA_SOURCE_FILE_AT_LINE (2735))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_102032 = var_cas_ioComponentSemanticsEntitiesMap ;
    if (temp_102032.isBuilt ()) {
      temp_102032 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (2737)) ;
    }
    var_cas_outTypeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (2738)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (2738)) ;
  }else if ((var_cas_inTableEnAvant.reader_hasKey (inLexique, var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2739)) COMMA_SOURCE_FILE_AT_LINE (2739))).isBuiltAndTrue ()) {
    const GGS_typeTableEnAvant  temp_102242 = var_cas_inTableEnAvant ;
    if (temp_102242.isBuilt ()) {
      temp_102242 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_outTypeDefinition COMMA_SOURCE_FILE_AT_LINE (2740)) ;
    }
  }else{
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_outTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2742)))).operator_concat (GGS_string ("' type is not defined")) COMMA_SOURCE_FILE_AT_LINE (2743)) ;
    var_cas_outTypeDefinition.drop () ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_type_parsing_semantics_parser_2728_19_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2753_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_inTargetVarName,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_AC_galgasType  var_cas_targetVarType ;
  GGS_typeCplusPlusName  var_cas_targetVarCppName ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, var_cas_targetVarType, var_cas_targetVarCppName COMMA_SOURCE_FILE_AT_LINE (2776)) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetVarType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2778)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_targetVarCppName, GGS_lstringlist ::constructor_emptyList (), var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2753_44_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2792_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (2803)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        GGS_lstring  var_cas_structAttributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
        GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (2811)) ;
        GGS_bool var_cas_found = GGS_bool (false) ;
        {
          GGS_typeListeAttributsSemantiques::cEnumerator enumerator_105351 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (2813)), true) ;
          const GGS_typeListeAttributsSemantiques::cElement * operand_105351 = NULL ;
          while (((operand_105351 = enumerator_105351.nextObject ()))
              && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
            macroValidPointer (operand_105351) ;
            var_cas_found = (operand_105351->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2814))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2814))) ;
            var_cas_targetType = operand_105351->mAttributType ;
          }
        }
        if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
          var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (2818)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (2819)) ;
        }
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (2836)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_assignmentInstruction ::constructor_new (inLexique, var_cas_nomCppVariableSource, var_cas_structAttributeList, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_2792_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_17 = true ;
    while (syntaxRepeat_17) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_17 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_17 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2848_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inTargetVarCppName,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  GGS_string var_cas_sourceExpressionConverter ;
  if (var_cas_inTargetType.isBuilt () && var_cas_sourceType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_107564 = var_cas_inTargetType (HERE) ;
    cPtr_AC_galgasType * ptr_107577 = var_cas_sourceType (HERE) ;
    cPtr_typeGalgasListmapType * operand_107564 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107564) ;
    cPtr_typeGalgasListmapType * operand_107577 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_107577) ;
    if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
      if (((operand_107564->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2874))).operator_isNotEqual (operand_107577->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2874)))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, listmap type @")).operator_concat (operand_107564->mListmapTypeName)).operator_concat (GGS_string (" of target object is not compatible with listmap type @"))).operator_concat (operand_107577->mListmapTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2878)) ;
        var_cas_sourceExpressionConverter.drop () ;
      }else{
        var_cas_sourceExpressionConverter = GGS_string ("") ;
      }
    }else{
      cPtr_typeGalgasListType * operand_107564 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107564) ;
      cPtr_typeGalgasListType * operand_107577 = dynamic_cast <cPtr_typeGalgasListType *> (ptr_107577) ;
      if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
        if (((operand_107564->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2882))).operator_isNotEqual (operand_107577->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2882)))).isBuiltAndTrue ()) {
          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, list type @")).operator_concat (operand_107564->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with list type @"))).operator_concat (operand_107577->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2886)) ;
          var_cas_sourceExpressionConverter.drop () ;
        }else{
          var_cas_sourceExpressionConverter = GGS_string ("") ;
        }
      }else{
        cPtr_typeGalgasSortedListType * operand_107564 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107564) ;
        cPtr_typeGalgasSortedListType * operand_107577 = dynamic_cast <cPtr_typeGalgasSortedListType *> (ptr_107577) ;
        if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
          if (((operand_107564->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2890))).operator_isNotEqual (operand_107577->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2890)))).isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, sortedlist type @")).operator_concat (operand_107564->mListTypeName)).operator_concat (GGS_string (" of target object is not compatible with sortedlist type @"))).operator_concat (operand_107577->mListTypeName)).operator_concat (GGS_string (" of source expression")) COMMA_SOURCE_FILE_AT_LINE (2894)) ;
            var_cas_sourceExpressionConverter.drop () ;
          }else{
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }
        }else{
          cPtr_typeGalgas_string * operand_107564 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107564) ;
          cPtr_typeGalgas_string * operand_107577 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107577) ;
          if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
            var_cas_sourceExpressionConverter = GGS_string ("") ;
          }else{
            cPtr_typeGalgas_string * operand_107564 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_107564) ;
            cPtr_typeGalgas_lstring * operand_107577 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_107577) ;
            if ((operand_107564 != NULL) && (operand_107577 != NULL)) {
              var_cas_sourceExpressionConverter = GGS_string ("ggs_string") ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("for '.=' operator, ")).operator_concat (var_cas_inTargetType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2902)))).operator_concat (GGS_string (" target object type is not compatible with "))).operator_concat (var_cas_sourceType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (2903)))).operator_concat (GGS_string (" source expression type")) COMMA_SOURCE_FILE_AT_LINE (2905)) ;
              var_cas_sourceExpressionConverter.drop () ;
            }
          }
        }
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_C_dotEqualInstruction ::constructor_new (inLexique, var_cas_inTargetVarCppName, var_cas_inStructAttributeList, var_cas_sourceExpression, var_cas_sourceExpressionConverter COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_2848_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'input_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2920_28_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_L_assignedVariables  &var_cas_listeAffectationParametresEffectifs,
                                GGS_typeCplusPlusNameList  &var_cas_outAllVariablesList,
                                const GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_typeListeCibles  var_cas_listeCibles = GGS_typeListeCibles ::constructor_emptyList () ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_nomVariableDest ;
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  GGS_AC_galgasType  var_cas_definitionType ;
                  GGS_lstring  var_cas_typeName ;
                  nt_type_parsing_ (inLexique, GGS_typeTableEnAvant ::constructor_emptyMap (inLexique COMMA_HERE), var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomVariableDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (2944)), var_cas_nomVariableDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2944)) COMMA_HERE) ;
                  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_nomVariableDest, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (2945)) ;
                  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_nomCppVariable, var_cas_definitionType COMMA_HERE)) ;
                  } break ;
                case 2 : {
                  inLexique.assignFromAttribute_tokenString (var_cas_nomVariableDest) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              GGS_AC_galgasType  var_cas_typeVarDest ;
              GGS_typeCplusPlusName  var_cas_nomCppDest ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariableDest, var_cas_typeVarDest, var_cas_nomCppDest COMMA_SOURCE_FILE_AT_LINE (2952)) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeEntiteDest ::constructor_new (inLexique, var_cas_typeVarDest, var_cas_nomCppDest, GGS_location (inLexique) COMMA_HERE)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (2961)) ;
              GGS_uint _variant_111561 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (2962)) ;
              GGS_bool _condition_111561 (_variant_111561.isBuilt (), true) ;
              while (_condition_111561.isBuiltAndTrue ()) {
                _condition_111561 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_111561.isBuiltAndTrue ()) {
                  if (_variant_111561.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (2966)) ;
                    _condition_111561 = GGS_bool (false) ;
                  }else{
                    _variant_111561.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeCibles.addAssign_operation (GGS_typeJoker ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (2965)) ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  GGS_bool var_cas_ellipsis ;
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      var_cas_ellipsis = GGS_bool (true) ;
      } break ;
    case 2 : {
      var_cas_ellipsis = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  if (((var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2977))).operator_strictInf (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2977)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("too much arguments: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2978)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2978)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2979)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2981)) ;
    var_cas_outAllVariablesList.drop () ;
    var_cas_listeAffectationParametresEffectifs.drop () ;
  }else if ((((var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2981))).operator_strictSup (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2981)))).operator_and ((var_cas_ellipsis).operator_not ())).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("argument(s) missing: ")).operator_concat (var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2982)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2982)))).operator_concat (GGS_string (" expected, "))).operator_concat (var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2983)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (2983)))).operator_concat (GGS_string (" found")) COMMA_SOURCE_FILE_AT_LINE (2985)) ;
    var_cas_outAllVariablesList.drop () ;
    var_cas_listeAffectationParametresEffectifs.drop () ;
  }else{
    var_cas_listeAffectationParametresEffectifs = GGS_L_assignedVariables ::constructor_emptyList () ;
    var_cas_outAllVariablesList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_112569 (var_cas_listeAttributsSemantiques, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_112569 = NULL ;
      GGS_typeListeCibles::cEnumerator enumerator_112651 (var_cas_listeCibles, true) ;
      const GGS_typeListeCibles::cElement * operand_112651 = NULL ;
      while (((operand_112569 = enumerator_112569.nextObject ()))
          && ((operand_112651 = enumerator_112651.nextObject ()))) {
        macroValidPointer (operand_112569) ;
        macroValidPointer (operand_112651) ;
        GGS_lstring  var_cas_nomAttributSource = operand_112569->mAttributeName ;
        const GGS_typeCible  temp_112758 = operand_112651->aCible ;
        if (temp_112758.isBuilt ()) {
          temp_112758 (HERE)->method_verifierType (inLexique, operand_112569->mAttributType, var_cas_nomAttributSource, var_cas_listeAffectationParametresEffectifs, var_cas_outAllVariablesList COMMA_SOURCE_FILE_AT_LINE (2991)) ;
        }
      }
    }
  }
  GGS_typeCplusPlusName  var_cas_nullName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
  if (var_cas_outAllVariablesList.isBuilt () &&
      var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2998)).isBuilt () &&
      var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2999)).isBuilt () &&
      var_cas_nullName.isBuilt ()) {
    ::routine_appendJokersIfNeeded (inLexique,  var_cas_outAllVariablesList,  var_cas_listeCibles.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2998)),  var_cas_listeAttributsSemantiques.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (2999)),  var_cas_nullName COMMA_SOURCE_FILE_AT_LINE (2996)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_input_parameters_list_semantics_parser_2920_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_repeat_semantics_parser_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_19 (inLexique)) {
            case 1 : {
              switch (select_semantics_parser_20 (inLexique)) {
                case 1 : {
                  nt_type_parsing_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_21 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E__2E__2E_) COMMA_HERE) ;
      } break ;
    case 2 : {
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3016_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_nomCppVariableSource ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_nomCppVariableSource COMMA_SOURCE_FILE_AT_LINE (3027)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3036)) ;
          GGS_bool var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_114882 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3038)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_114882 = NULL ;
            while (((operand_114882 = enumerator_114882.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_114882) ;
              var_cas_found = (operand_114882->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3039))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3039))) ;
              var_cas_targetType = operand_114882->mAttributType ;
            }
          }
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3043)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3044)) ;
          }
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_ (inLexique, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext, var_cas_nomCppVariableSource, var_cas_targetType, var_cas_structAttributeList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3016_44_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_repeat_semantics_parser_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  nt_instruction_beginning_with_identifier_and_structure_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3068_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_116825 = var_cas_inTargetType ;
  if (temp_116825.isBuilt ()) {
    temp_116825 (HERE)->method_handleAddAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3082)) ;
  }
  GGS_typeTypesList  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  if (((var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3103))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3103)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3104))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3104)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3105)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_117644 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_117644 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_117714 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_117714 = NULL ;
      while (((operand_117644 = enumerator_117644.nextObject ()))
          && ((operand_117714 = enumerator_117714.nextObject ()))) {
        macroValidPointer (operand_117644) ;
        macroValidPointer (operand_117714) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_117644->mAttributType,  operand_117714->mType,  operand_117714->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3108)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeAppendInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3068_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_23 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3128_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_formalParametersList ;
  const GGS_AC_galgasType  temp_119243 = var_cas_inTargetType ;
  if (temp_119243.isBuilt ()) {
    temp_119243 (HERE)->method_handleMinusAssignOperatorCall (inLexique, GGS_location (inLexique), var_cas_formalParametersList COMMA_SOURCE_FILE_AT_LINE (3141)) ;
  }
  GGS_typeTypesList  var_cas_typeList = GGS_typeTypesList ::constructor_emptyList () ;
  GGS_typeExpressionList  var_cas_expressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        GGS_typeExpression  var_cas_expression ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
        var_cas_typeList.addAssign_operation (var_cas_resultType, GGS_location (inLexique)) ;
        var_cas_expressionList.addAssign_operation (var_cas_expression) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
  if (((var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3162))).operator_isNotEqual (var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3162)))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((var_cas_typeList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3163))).operator_concat (GGS_string (" argument(s), while "))).operator_concat (var_cas_formalParametersList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3163)))).operator_concat (GGS_string (" are needed")) COMMA_SOURCE_FILE_AT_LINE (3164)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_120062 (var_cas_formalParametersList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_120062 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_120132 (var_cas_typeList, true) ;
      const GGS_typeTypesList::cElement * operand_120132 = NULL ;
      while (((operand_120062 = enumerator_120062.nextObject ()))
          && ((operand_120132 = enumerator_120132.nextObject ()))) {
        macroValidPointer (operand_120062) ;
        macroValidPointer (operand_120132) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_120062->mAttributType,  operand_120132->mType,  operand_120132->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (3167)) ;
      }
    }
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeRemoveInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3128_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3D_) COMMA_HERE) ;
  { bool syntaxRepeat_24 = true ;
    while (syntaxRepeat_24) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
        nt_expression_parse (inLexique) ;
      switch (select_repeat_semantics_parser_24 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_24 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3187_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_121631 = var_cas_inTargetType ;
  if (temp_121631.isBuilt ()) {
    temp_121631 (HERE)->method_handleIncrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3199)) ;
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeIncrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3187_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__2B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier_and_structure_access'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3213_65_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_typeCplusPlusName  var_cas_inNomCppVariableSource,
                                const GGS_AC_galgasType  var_cas_inTargetType,
                                const GGS_lstringlist  var_cas_inStructAttributeList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
  const GGS_AC_galgasType  temp_122941 = var_cas_inTargetType ;
  if (temp_122941.isBuilt ()) {
    temp_122941 (HERE)->method_handleDecrementOperatorCall (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3225)) ;
  }
  GGS_typeInstruction  var_cas_instruction = GGS_typeDecrementInstruction ::constructor_new (inLexique, var_cas_inNomCppVariableSource, var_cas_inStructAttributeList, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_and_structure_access_semantics_parser_3213_65_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__2D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'actual_parameters_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3235_29_ (galgas_scanner & inLexique,
                                const GGS_L_EXsignature  var_cas_listeTypesParametresFormels,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool automatic_var_19 ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_outExpressionList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, automatic_var_19) ;
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_listeTypesParametresFormels,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_outExpressionList COMMA_SOURCE_FILE_AT_LINE (3255)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_actual_parameters_list_semantics_parser_3235_29_parse (galgas_scanner & inLexique) {
  nt_parse_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'parse_parameters_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3269_28_ (galgas_scanner & inLexique,
                                GGS_L_actualParametersSignature  &var_cas_listeTypesParametresEffectifs,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_bool &var_cas_outHasInputParameter) {
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  var_cas_listeTypesParametresEffectifs = GGS_L_actualParametersSignature ::constructor_emptyList () ;
  GGS_stringset  var_cas_exclusiveVariables = GGS_stringset ::constructor_emptySet () ;
  var_cas_outHasInputParameter = GGS_bool (false) ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_expressionType ;
          GGS_typeExpression  var_cas_expressionValue ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOut (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_expressionType, var_cas_parameterPassingMode) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expressionValue) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterIn (inLexique COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
              var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
              } break ;
            case 2 : {
              GGS_luint  var_cas_jokerCountWithLocation ;
              inLexique.assignFromAttribute_uint32value (var_cas_jokerCountWithLocation) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_jokerCount = var_cas_jokerCountWithLocation.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (3308)) ;
              GGS_uint _variant_126394 = var_cas_jokerCount.add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (3309)) ;
              GGS_bool _condition_126394 (_variant_126394.isBuilt (), true) ;
              while (_condition_126394.isBuiltAndTrue ()) {
                _condition_126394 = (var_cas_jokerCount).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_126394.isBuiltAndTrue ()) {
                  if (_variant_126394.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (3314)) ;
                    _condition_126394 = GGS_bool (false) ;
                  }else{
                    _variant_126394.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_listeTypesParametresEffectifs.addAssign_operation (GGS_typeGalgas_jokerInParameterList ::constructor_new (inLexique COMMA_HERE), var_cas_parameterPassingMode) ;
                    var_cas_outExpressionList.addAssign_operation (GGS_typeJokerInExpression ::constructor_new (inLexique COMMA_HERE)) ;
                    var_cas_jokerCount.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (3313)) ;
                  }
                }
              }
              } break ;
            case 3 : {
              GGS_AC_galgasType  var_cas_typeArgument ;
              GGS_typeCplusPlusName  var_cas_nomCppArgument ;
              GGS_lstring  var_cas_nomArgument ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3320)) ;
              var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
              GGS_typeExpression  var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
              var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
              if ((var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3324)) COMMA_SOURCE_FILE_AT_LINE (3324))).isBuiltAndTrue ()) {
                var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3326)) ;
              }else{
                var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3327))) ;
              }
              var_cas_outHasInputParameter = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_typeArgument ;
          GGS_typeCplusPlusName  var_cas_nomCppArgument ;
          GGS_lstring  var_cas_nomArgument ;
          inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomArgument, var_cas_typeArgument, var_cas_nomCppArgument COMMA_SOURCE_FILE_AT_LINE (3337)) ;
          GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  GGS_lstring  var_cas_structAttributeName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_typeArgument.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3343)) ;
                  GGS_bool var_cas_found = GGS_bool (false) ;
                  {
                    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_127723 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3345)), true) ;
                    const GGS_typeListeAttributsSemantiques::cElement * operand_127723 = NULL ;
                    while (((operand_127723 = enumerator_127723.nextObject ()))
                        && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                      macroValidPointer (operand_127723) ;
                      var_cas_found = (operand_127723->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3346))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3346))) ;
                      var_cas_typeArgument = operand_127723->mAttributType ;
                    }
                  }
                  if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
                    var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3350)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3351)) ;
                  }
                  var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          GGS_EXactualParametersPassingMode var_cas_parameterPassingMode = GGS_EXactualParametersPassingMode::constructor_parameterOutIn (inLexique COMMA_HERE) ;
          var_cas_listeTypesParametresEffectifs.addAssign_operation (var_cas_typeArgument, var_cas_parameterPassingMode) ;
          GGS_typeExpression  var_cas_e = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppArgument, var_cas_structAttributeList COMMA_HERE) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_e) ;
          if ((var_cas_exclusiveVariables.reader_hasKey (inLexique, var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3358)) COMMA_SOURCE_FILE_AT_LINE (3358))).isBuiltAndTrue ()) {
            var_cas_nomArgument.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this object is already named as input or output/input effectif argument of current instruction") COMMA_SOURCE_FILE_AT_LINE (3360)) ;
          }else{
            var_cas_exclusiveVariables.addAssign_operation (var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3361))) ;
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_parameters_list_semantics_parser_3269_28_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_repeat_semantics_parser_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
          switch (select_semantics_parser_26 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_repeat_semantics_parser_27 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'semantic_instructions_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3370_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  var_cas_ioVariablesMap.prologue_verifyVariableUsing (inLexique COMMA_SOURCE_FILE_AT_LINE (3378)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_verifyVariableUsing (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3378)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_semantics_parser_3370_33_parse (galgas_scanner & inLexique) {
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3396_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_typeVarSource ;
  GGS_typeCplusPlusName  var_cas_sourceVarCppName ;
  GGS_lstring  var_cas_nomVarSource ;
  nt_read_access_ (inLexique, var_cas_nomVarSource, var_cas_sourceVarCppName, var_cas_typeVarSource, var_cas_ioVariablesMap) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeVarSource.getPtr (), true, var_cas_nomVarSource COMMA_SOURCE_FILE_AT_LINE (3411)) ;
  GGS_lstring  var_cas_nomTypeSource = var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3412)) ;
  GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits = var_cas_classType.reader_mMessagesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3413)) ;
  nt_extract_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_sourceVarCppName, var_cas_nomTypeSource, var_cas_tableMessagesAbstraits, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3396_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
  nt_read_access_parse (inLexique) ;
  nt_extract_instruction_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3433_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  var_cas_tableMessagesAbstraits,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("simple extract instruction is obsolete: use cast expression instead") COMMA_SOURCE_FILE_AT_LINE (3444)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomClasse ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomClasse) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_132104 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_132104.isBuilt ()) {
    temp_132104 (HERE)->method_searchKey (inLexique, var_cas_nomClasse, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3451)) ;
  }
  GGS_AC_galgasType  var_cas_leType = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3452)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3452)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_leType.getPtr (), true, var_cas_nomClasse COMMA_SOURCE_FILE_AT_LINE (3453)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3454)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetres = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3455)) ;
  if (((var_cas_tableDesClassesAncetres.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3457)) COMMA_SOURCE_FILE_AT_LINE (3457))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_nomClasse.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3458)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3459)) ;
  }
  GGS_L_assignedVariables  var_cas_listeAffectationParametresEffectifs ;
  GGS_typeCplusPlusNameList  var_cas_allVariablesList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeAffectationParametresEffectifs, var_cas_allVariablesList, var_cas_listeAttributsSemantiques, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_133547 = var_cas_errorExpressionType ;
  if (temp_133547.isBuilt ()) {
    temp_133547 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3486)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_messageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  const GGS_typeClassInheritedMessagesMap  temp_133650 = var_cas_tableMessagesAbstraits ;
  if (temp_133650.isBuilt ()) {
    temp_133650 (HERE)->method_searchKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (3490)) ;
  }
  var_cas_ioInstructionList.addAssign_operation (GGS_typeSimpleExtractInstruction ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_nomClasse, var_cas_listeAffectationParametresEffectifs, var_cas_errorExpression, var_cas_messageName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3433_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  nt_input_parameters_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'extract_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3503_26_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  var_cas_inSourceVarCppName,
                                GGS_lstring  var_cas_nomTypeSource,
                                GGS_typeClassInheritedMessagesMap  /* var_cas_tableMessagesAbstraits */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_typeStructuredExtractCasesList  var_cas_casesList = GGS_typeStructuredExtractCasesList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("structured extract instruction is obsolete: use cast instruction instead") COMMA_SOURCE_FILE_AT_LINE (3516)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3518)) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3520)) ;
        GGS_location  var_cas_indicatif1 = GGS_location (inLexique) ;
        GGS_lstring  var_cas_nomType1 ;
        inLexique.assignFromAttribute_tokenString (var_cas_nomType1) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_135328 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_135328.isBuilt ()) {
          temp_135328 (HERE)->method_searchKey (inLexique, var_cas_nomType1, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3527)) ;
        }
        GGS_AC_galgasType  var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3528)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3528)) ;
        GGS_typeGalgasClassType  var_cas_classType1 = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_nomType1 COMMA_SOURCE_FILE_AT_LINE (3530)) ;
        GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 = var_cas_classType1.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3531)) ;
        GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 = var_cas_classType1.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3532)) ;
        if (((var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3534)) COMMA_SOURCE_FILE_AT_LINE (3534))).operator_not ()).isBuiltAndTrue ()) {
          var_cas_nomType1.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_nomTypeSource.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3535)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3536)) ;
        }
        GGS_bool var_cas_noUsedParameter ;
        nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_indicatif1, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), var_cas_noUsedParameter) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_casesList.addAssign_operation (var_cas_nomType1, var_cas_indicatif1, var_cas_instructionsList, var_cas_noUsedParameter) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3520)) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3564)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elseInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_typeStructuredExtractInstructionWithElse ::constructor_new (inLexique, var_cas_inSourceVarCppName, var_cas_casesList, var_cas_elseInstructionList COMMA_HERE)) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3564)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3518)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_extract_instruction_semantics_parser_3503_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        nt_parse_effective_input_parameters_list_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_28 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extract) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3590_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
  GGS_typeGalgasClassType  var_cas_sourceClassType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3611)) ;
  GGS_lstring  var_cas_sourceExpressionTypeName = var_cas_sourceClassType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3612)) ;
  GGS_string var_cas_sourceClassMessage = var_cas_sourceClassType.reader_mClassMessage (inLexique COMMA_SOURCE_FILE_AT_LINE (3613)) ;
  GGS_typeInstructionList  var_cas_elseBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeStructuredCastBranchList  var_cas_branchList = GGS_typeStructuredCastBranchList ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3618)) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3620)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        GGS_bool var_cas_checkForKindOfClass ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            var_cas_checkForKindOfClass = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_lstring  var_cas_castedTypeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_castedTypeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        GGS_AC_semanticsEntity  var_cas_entite ;
        const GGS_M_semanticsEntitiesForUse  temp_139490 = var_cas_ioComponentSemanticsEntitiesMap ;
        if (temp_139490.isBuilt ()) {
          temp_139490 (HERE)->method_searchKey (inLexique, var_cas_castedTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3634)) ;
        }
        GGS_AC_galgasType  var_cas_typeDefinition = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3635)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (3635)) ;
        GGS_typeSuperClassesMap  var_cas_superClassMap = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_typeDefinition.getPtr (), true, var_cas_castedTypeName COMMA_SOURCE_FILE_AT_LINE (3638)).reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3638)) ;
        GGS_string var_cas_sourceExpressionTypeNameString = var_cas_sourceExpressionTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3640)) ;
        if (((var_cas_checkForKindOfClass).operator_not ()).isBuiltAndTrue ()) {
          if ((((var_cas_castedTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3642))).operator_isNotEqual (var_cas_sourceExpressionTypeNameString)).operator_and ((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3642))).operator_not ())).isBuiltAndTrue ()) {
            var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class is not '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("' and does inherit from it")) COMMA_SOURCE_FILE_AT_LINE (3644)) ;
          }
        }else if (((var_cas_superClassMap.reader_hasKey (inLexique, var_cas_sourceExpressionTypeNameString COMMA_SOURCE_FILE_AT_LINE (3645))).operator_not ()).isBuiltAndTrue ()) {
          var_cas_castedTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This class does not inherit from '@")).operator_concat (var_cas_sourceExpressionTypeNameString)).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (3647)) ;
        }
        GGS_typeCplusPlusNameList  var_cas_localConstantCppNameList = GGS_typeCplusPlusNameList ::constructor_emptyList () ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3654)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3656)) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            GGS_lstring  var_cas_localConstantName ;
            inLexique.assignFromAttribute_tokenString (var_cas_localConstantName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_localConstantCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_localConstantName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3661)), var_cas_localConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3661)) COMMA_HERE) ;
            var_cas_localConstantCppNameList.addAssign_operation (var_cas_localConstantCppName) ;
            var_cas_ioVariablesMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_localConstantName, var_cas_typeDefinition, var_cas_localConstantCppName COMMA_SOURCE_FILE_AT_LINE (3663)) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
        var_cas_branchList.addAssign_operation (var_cas_castedTypeName, var_cas_checkForKindOfClass, var_cas_localConstantCppNameList, var_cas_instructionsList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3620)) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  GGS_AC_elseOrDefaultForCastInstruction  var_cas_elseOrDefault ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (3681)) ;
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      if (((var_cas_sourceClassMessage.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (3684))).operator_isEqual (GGS_uint (0U))).isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for using the 'default' construct, the static class of source expression (@")).operator_concat (var_cas_sourceExpressionTypeName)).operator_concat (GGS_string (") should define a class message")) COMMA_SOURCE_FILE_AT_LINE (3687)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      GGS_typeExpression  var_cas_errorLocationExpression ;
      GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
      const GGS_AC_galgasType  temp_142839 = var_cas_errorLocationExpressionType ;
      if (temp_142839.isBuilt ()) {
        temp_142839 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (3700)) ;
      }
      var_cas_elseOrDefault = GGS_C_defaultForCastInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      GGS_typeInstructionList  var_cas_elseBranchInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionsList, var_cas_inSemanticContext) ;
      var_cas_elseOrDefault = GGS_C_elseForCastInstruction ::constructor_new (inLexique, var_cas_elseBranchInstructionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (3681)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (3618)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeStructuredCastInstruction ::constructor_new (inLexique, GGS_location (inLexique), var_cas_sourceExpression, var_cas_sourceExpressionTypeName, var_cas_branchList, var_cas_elseOrDefault COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3590_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_29 = true ;
    while (syntaxRepeat_29) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
        switch (select_semantics_parser_30 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E__3D_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3D__3D_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
        switch (select_semantics_parser_31 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
        nt_semantic_instructions_list_parse (inLexique) ;
      switch (select_repeat_semantics_parser_29 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_29 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_32 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_default) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3738_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_AC_galgasType  var_cas_definitionType ;
  GGS_lstring  var_cas_typeName ;
  nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
  GGS_lstring  var_cas_targetVarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_targetVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_nomCppVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_targetVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (3758)), var_cas_targetVarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3758)) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_insertLocalVariable (inLexique, var_cas_targetVarName, var_cas_definitionType, var_cas_nomCppVariable COMMA_SOURCE_FILE_AT_LINE (3759)) ;
  nt_optional_assignment_ (inLexique, var_cas_typeName, var_cas_targetVarName, var_cas_nomCppVariable, var_cas_definitionType, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3738_27_parse (galgas_scanner & inLexique) {
  nt_type_parsing_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_optional_assignment_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3781_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        GGS_lstring  var_cas_galgasVariableName ;
        inLexique.assignFromAttribute_tokenString (var_cas_galgasVariableName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_20 ;
        var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_galgasVariableName, automatic_var_20, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3794)) ;
        GGS_typeInstruction  var_cas_instruction = GGS_typeLogInstruction ::constructor_new (inLexique, var_cas_galgasVariableName, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3781_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_log) COMMA_HERE) ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_33 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3809_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        GGS_lstring  var_cas_nom ;
        inLexique.assignFromAttribute_tokenString (var_cas_nom) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
        GGS_typeCplusPlusName  var_cas_nomCppVar ;
        GGS_AC_galgasType  automatic_var_21 ;
        var_cas_ioVariablesMap.modifier_searchForDestructiveReadAccess (inLexique, var_cas_nom, automatic_var_21, var_cas_nomCppVar COMMA_SOURCE_FILE_AT_LINE (3822)) ;
        GGS_typeInstruction  var_cas_instruction = GGS_typeDropInstruction ::constructor_new (inLexique, var_cas_nomCppVar COMMA_HERE) ;
        var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3809_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_drop) COMMA_HERE) ;
  { bool syntaxRepeat_34 = true ;
    while (syntaxRepeat_34) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_34 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_34 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'instruction_beginning_with_identifier'  *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3839_44_ (galgas_scanner & inLexique,
                                GGS_lstring  var_cas_nomVarDest,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_148409 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_148409.isBuilt ()) {
    temp_148409 (HERE)->method_searchKey (inLexique, var_cas_nomVarDest, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (3850)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_148881 = var_cas_entite ; // CAST instruction
    if (_var_148881.getPtr () != NULL) {
      macroValidPointer (_var_148881.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteRoutine *> (_var_148881.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutine var_cas_r (_var_148881.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (3854)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteRoutineExterne *> (_var_148881.getPtr ()) != NULL) {
        const GGS_typeEntiteRoutineExterne var_cas_ae (_var_148881.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (3857)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_nomVarDest.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_nomVarDest.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3861)))).operator_concat (GGS_string ("' should name a routine or an extern routine")) COMMA_SOURCE_FILE_AT_LINE (3864)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  nt_actual_parameters_list_ (inLexique, var_cas_signatureRoutine, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeRoutineCallInstruction ::constructor_new (inLexique, var_cas_nomVarDest, var_cas_expressionsList, var_cas_signatureRoutine, var_cas_isExternActionCall COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_instruction_beginning_with_identifier_semantics_parser_3839_44_parse (galgas_scanner & inLexique) {
  nt_actual_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3899_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expression ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      GGS_string var_cas_categoryMethodClassBaseName ;
      const GGS_AC_galgasType  temp_151213 = var_cas_expressionType ;
      if (temp_151213.isBuilt ()) {
        temp_151213 (HERE)->method_handleMethodInstructionCall (inLexique, var_cas_methodName, var_cas_inSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (3928)), var_cas_methodSignature, var_cas_categoryMethodClassBaseName COMMA_SOURCE_FILE_AT_LINE (3926)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeMethodCallInstruction ::constructor_new (inLexique, var_cas_expressionType, var_cas_expression, var_cas_methodName, var_cas_categoryMethodClassBaseName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      GGS_lstring  var_cas_modifiedObjectName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifiedObjectName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_variableType ;
      GGS_typeCplusPlusName  var_cas_cppVariableName ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_modifiedObjectName, var_cas_variableType, var_cas_cppVariableName COMMA_SOURCE_FILE_AT_LINE (3957)) ;
      GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              GGS_lstring  var_cas_structAttributeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
              GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_variableType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (3966)) ;
              GGS_bool var_cas_found = GGS_bool (false) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_152533 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (3968)), true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_152533 = NULL ;
                while (((operand_152533 = enumerator_152533.nextObject ()))
                    && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
                  macroValidPointer (operand_152533) ;
                  var_cas_found = (operand_152533->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3969))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (3969))) ;
                  var_cas_variableType = operand_152533->mAttributType ;
                }
              }
              if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
                var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (3973)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (3974)) ;
              }
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      GGS_lstring  var_cas_modifierName ;
      inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_methodSignature ;
      const GGS_AC_galgasType  temp_153126 = var_cas_variableType ;
      if (temp_153126.isBuilt ()) {
        temp_153126 (HERE)->method_handleModifierCall (inLexique, var_cas_modifierName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (3980)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_methodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeModifierCallInstruction ::constructor_new (inLexique, var_cas_cppVariableName, var_cas_structAttributeList, var_cas_modifierName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_typeMethodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_typeMethodSignature ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_153922 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_153922.isBuilt ()) {
        temp_153922 (HERE)->method_searchKey (inLexique, var_cas_typeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (4002)) ;
      }
      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (4003)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (4003)) ;
      const GGS_AC_galgasType  temp_154077 = var_cas_type ;
      if (temp_154077.isBuilt ()) {
        temp_154077 (HERE)->method_handleClassMethodCall (inLexique, var_cas_typeMethodName, var_cas_typeMethodSignature COMMA_SOURCE_FILE_AT_LINE (4004)) ;
      }
      GGS_typeExpressionList  var_cas_expressionsList ;
      nt_actual_parameters_list_ (inLexique, var_cas_typeMethodSignature, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioInstructionList) ;
      var_cas_instruction = GGS_typeCallOfTypeMethodInstruction ::constructor_new (inLexique, var_cas_typeName, var_cas_typeMethodName, var_cas_expressionsList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_3899_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  switch (select_semantics_parser_35 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      { bool syntaxRepeat_36 = true ;
        while (syntaxRepeat_36) {
          switch (select_repeat_semantics_parser_36 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_36 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_actual_parameters_list_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4036_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_const) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_targetVarType ;
  GGS_lstring  var_cas_targetTypeName ;
  nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_targetVarType, var_cas_targetTypeName) ;
  GGS_lstring  var_cas_targetVarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_targetVarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_targetVarType,  var_cas_sourceExpressionType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (4072)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      const GGS_AC_galgasType  temp_156556 = var_cas_targetVarType ;
      if (temp_156556.isBuilt ()) {
        temp_156556 (HERE)->method_handleConstructorCall (inLexique, var_cas_constructorName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (4081)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
      var_cas_sourceExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_targetVarType, var_cas_constructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4096)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_targetVarCppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_targetVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4103)), var_cas_targetVarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4103)) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_insertConstInArgument (inLexique, var_cas_targetVarName, var_cas_targetVarType, var_cas_targetVarCppName COMMA_SOURCE_FILE_AT_LINE (4104)) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_C_constantDeclarationInstruction ::constructor_new (inLexique, var_cas_targetVarType, var_cas_targetVarCppName, var_cas_sourceExpression COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4036_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_const) COMMA_HERE) ;
  nt_type_parsing_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_37 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4120_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_ (inLexique, var_cas_nomVarDest, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inOptionsComponentsMapForUse, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4120_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_instruction_beginning_with_identifier_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4147_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4147_27_parse (galgas_scanner & inLexique) {
  nt_warning_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'warning_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4166_26_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorExpression ;
  GGS_AC_galgasType  var_cas_errorExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorExpression, var_cas_errorExpressionType) ;
  const GGS_AC_galgasType  temp_160264 = var_cas_errorExpressionType ;
  if (temp_160264.isBuilt ()) {
    temp_160264 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4185)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_warningMessageExpression ;
  GGS_AC_galgasType  var_cas_warningMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_warningMessageExpression, var_cas_warningMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_warningMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4199)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_typeWarningInstruction ::constructor_new (inLexique, var_cas_errorExpression, var_cas_warningMessageExpression, GGS_location (inLexique) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_warning_instruction_semantics_parser_4166_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_warning) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4213_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_ioInstructionList) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4213_27_parse (galgas_scanner & inLexique) {
  nt_error_instruction_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'error_instruction'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4232_24_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorLocationExpression ;
  GGS_AC_galgasType  var_cas_errorLocationExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorLocationExpression, var_cas_errorLocationExpressionType) ;
  const GGS_AC_galgasType  temp_162638 = var_cas_errorLocationExpressionType ;
  if (temp_162638.isBuilt ()) {
    temp_162638 (HERE)->method_checkAbilityToBeSilentlyConvertedToLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (4251)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_errorMessageExpression ;
  GGS_AC_galgasType  var_cas_errorMessageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_errorMessageExpression, var_cas_errorMessageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_errorMessageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4265)) ;
  GGS_varToDropList  var_cas_variablesToDrop = GGS_varToDropList ::constructor_emptyList () ;
  switch (select_semantics_parser_38 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_39 = true ;
        while (syntaxRepeat_39) {
            GGS_lstring  var_cas_nomVariable ;
            inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_typeCplusPlusName  var_cas_varCppName ;
            GGS_AC_galgasType  automatic_var_22 ;
            var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_nomVariable, automatic_var_22, var_cas_varCppName COMMA_SOURCE_FILE_AT_LINE (4275)) ;
            var_cas_variablesToDrop.addAssign_operation (var_cas_varCppName) ;
          switch (select_repeat_semantics_parser_39 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_39 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeErrorInstruction ::constructor_new (inLexique, var_cas_errorLocationExpression, var_cas_errorMessageExpression, GGS_location (inLexique), var_cas_variablesToDrop COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_error_instruction_semantics_parser_4232_24_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  switch (select_semantics_parser_38 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
      { bool syntaxRepeat_39 = true ;
        while (syntaxRepeat_39) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_39 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_39 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4298_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_typeExpression  var_cas_messageExpression ;
  GGS_AC_galgasType  var_cas_messageExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_messageExpression, var_cas_messageExpressionType) ;
  GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_messageExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4320)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeMessageInstruction ::constructor_new (inLexique, var_cas_messageExpression, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4298_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4333_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  GGS_L_expression_instructionsList_list  var_cas_listeBranchesTest = GGS_L_expression_instructionsList_list ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4343)) ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4345)) ;
        GGS_typeExpression  var_cas_testBranche ;
        GGS_AC_galgasType  var_cas_resultType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_testBranche, var_cas_resultType) ;
        GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4356)) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        GGS_typeInstructionList  var_cas_listeInstructionsBrancheTest = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheTest, var_cas_inSemanticContext) ;
        var_cas_listeBranchesTest.addAssign_operation (var_cas_testBranche, var_cas_listeInstructionsBrancheTest) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4345)) ;
      switch (select_repeat_semantics_parser_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  GGS_typeInstructionList  var_cas_listeInstructionsBrancheAutre = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4373)) ;
  switch (select_semantics_parser_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_listeInstructionsBrancheAutre, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4373)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4343)) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_if_instruction ::constructor_new (inLexique, var_cas_listeBranchesTest, var_cas_listeInstructionsBrancheAutre COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4333_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        nt_expression_parse (inLexique) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_then) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_41 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_if) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4404_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  GGS_typeExpression  var_cas_switchExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_switchExpression, var_cas_resultType) ;
  GGS_typeGalgas_enum  var_cas_e = GGS_typeGalgas_enum::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4425)) ;
  GGS_lstring  var_cas_enumTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4426)) ;
  GGS_enumConstantMap  var_cas_enumConstantesMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4427)) ;
  GGS_stringset  var_cas_allBranchConstantSet = GGS_stringset ::constructor_emptySet () ;
  GGS_L_switchBranchlist  var_cas_switchBranchlist = GGS_L_switchBranchlist ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4431)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_42 = true ;
    while (syntaxRepeat_42) {
        GGS_stringset  var_cas_branchConstantSet = GGS_stringset ::constructor_emptySet () ;
        { bool syntaxRepeat_43 = true ;
          while (syntaxRepeat_43) {
              GGS_lstring  var_cas_enumConstantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_enumConstantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_branchConstantSet.addAssign_operation (var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4439))) ;
              GGS_bool automatic_var_23 ;
              const GGS_enumConstantMap  temp_169300 = var_cas_enumConstantesMap ;
              if (temp_169300.isBuilt ()) {
                temp_169300 (HERE)->method_searchKey (inLexique, var_cas_enumConstantName, automatic_var_23 COMMA_SOURCE_FILE_AT_LINE (4440)) ;
              }
              if ((var_cas_allBranchConstantSet.reader_hasKey (inLexique, var_cas_enumConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4441)) COMMA_SOURCE_FILE_AT_LINE (4441))).isBuiltAndTrue ()) {
                var_cas_enumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this constant is already used in current switch instruction") COMMA_SOURCE_FILE_AT_LINE (4443)) ;
              }
            switch (select_repeat_semantics_parser_43 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_43 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        var_cas_allBranchConstantSet = (var_cas_allBranchConstantSet).operator_or (var_cas_branchConstantSet) ;
        var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4449)) ;
        GGS_typeInstructionList  var_cas_branchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
        nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_branchInstructionList, var_cas_inSemanticContext) ;
        var_cas_switchBranchlist.addAssign_operation (var_cas_branchConstantSet, var_cas_branchInstructionList) ;
        var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4449)) ;
      switch (select_repeat_semantics_parser_42 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_42 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4431)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  GGS_stringset  var_cas_missingConstants = var_cas_enumConstantesMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (4467)).substract_operation (inLexique, var_cas_allBranchConstantSet COMMA_SOURCE_FILE_AT_LINE (4467)) ;
  {
    GGS_stringset::cEnumerator enumerator_170317 (var_cas_missingConstants, true) ;
    while (enumerator_170317.hasCurrentObject ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (enumerator_170317._key (HERE))).operator_concat (GGS_string ("' is not used in switch instruction")) COMMA_SOURCE_FILE_AT_LINE (4470)) ;
      enumerator_170317.next () ;
    }
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_switch_instruction ::constructor_new (inLexique, var_cas_switchExpression, var_cas_enumTypeName, var_cas_switchBranchlist COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4404_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
  { bool syntaxRepeat_42 = true ;
    while (syntaxRepeat_42) {
        { bool syntaxRepeat_43 = true ;
          while (syntaxRepeat_43) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_43 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_43 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
        nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      switch (select_repeat_semantics_parser_42 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_42 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_switch) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4486_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  GGS_typeExpression  var_cas_variantExpression ;
  GGS_AC_galgasType  var_cas_variantResultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_variantExpression, var_cas_variantResultType) ;
  GGS_typeGalgas_uint  var_cas_ui = GGS_typeGalgas_uint::castFrom (inLexique, var_cas_variantResultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4506)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList1 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4510)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4511)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList1, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4511)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4510)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  GGS_typeExpression  var_cas_conditionalExpression ;
  GGS_AC_galgasType  var_cas_resultType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_conditionalExpression, var_cas_resultType) ;
  GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4534)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList2 = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4538)) ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4539)) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionList2, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4539)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (4538)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_while_instruction ::constructor_new (inLexique, var_cas_variantExpression, var_cas_instructionList1, var_cas_conditionalExpression, var_cas_instructionList2, GGS_location (inLexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4486_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4570_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bool var_cas_sourceIsFile ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_typeExpression  var_cas_depFileExpression ;
  GGS_typeExpression  var_cas_depFilePath ;
  GGS_bool var_cas_hasDependancyFile = GGS_bool (false) ;
  GGS_location  var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
  switch (select_semantics_parser_45 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (true) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_lstring  var_cas_gs = GGS_typeGalgas_lstring::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4609)) ;
      switch (select_semantics_parser_46 (inLexique)) {
        case 1 : {
          var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_depFileExpressionType ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFileExpression, var_cas_depFileExpressionType) ;
          var_cas_dependancyFileDefinitionLocation = GGS_location (inLexique) ;
          GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4625)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_depFilePath, var_cas_depFileExpressionType) ;
          var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_depFileExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4635)) ;
          var_cas_hasDependancyFile = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      var_cas_sourceIsFile = GGS_bool (false) ;
      GGS_AC_galgasType  var_cas_sourceExpressionType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
      GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_sourceExpressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4651)) ;
      var_cas_depFileExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      var_cas_depFilePath = GGS_typeLiteralStringExpression ::constructor_new (inLexique, GGS_stringlist ::constructor_listWithValue (GGS_string ("")) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_typeExpressionList  var_cas_expressionsList ;
  GGS_L_actualParametersSignature  var_cas_listeTypesParametresEffectifs ;
  GGS_bool var_cas_hasInputParameter ;
  nt_parse_parameters_list_ (inLexique, var_cas_listeTypesParametresEffectifs, var_cas_expressionsList, var_cas_ioVariablesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioComponentSemanticsEntitiesMap, var_cas_hasInputParameter) ;
  if (((var_cas_hasDependancyFile).operator_and (var_cas_hasInputParameter)).isBuiltAndTrue ()) {
    var_cas_dependancyFileDefinitionLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("a dependancy file reference requires there is no input parameter") COMMA_SOURCE_FILE_AT_LINE (4671)) ;
  }
  GGS_AC_semanticsEntity  var_cas_e ;
  const GGS_M_semanticsEntitiesForUse  temp_177279 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_177279.isBuilt ()) {
    temp_177279 (HERE)->method_searchKey (inLexique, var_cas_grammarName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (4674)) ;
  }
  GGS_C_grammarForSemantics  var_cas_gfs = GGS_C_grammarForSemantics::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_grammarName COMMA_SOURCE_FILE_AT_LINE (4675)) ;
  GGS_M_nonterminalSymbolAlts  var_cas_startSymbolAltMap = var_cas_gfs.reader_mGrammarAltMap (inLexique COMMA_SOURCE_FILE_AT_LINE (4676)) ;
  GGS_lstring  var_cas_lexiqueClassName = var_cas_gfs.reader_mLexiqueClassName (inLexique COMMA_SOURCE_FILE_AT_LINE (4677)) ;
  GGS_L_EXsignature  var_cas_startSymbolSignature ;
  const GGS_M_nonterminalSymbolAlts  temp_177592 = var_cas_startSymbolAltMap ;
  if (temp_177592.isBuilt ()) {
    temp_177592 (HERE)->method_searchKey (inLexique, var_cas_altName, var_cas_startSymbolSignature COMMA_SOURCE_FILE_AT_LINE (4679)) ;
  }
  ::routine_verifierCompatibiliteArgEffectifsSignature (inLexique,  var_cas_startSymbolSignature,  var_cas_listeTypesParametresEffectifs,  GGS_location (inLexique),  var_cas_ioInstructionList,  var_cas_expressionsList COMMA_SOURCE_FILE_AT_LINE (4681)) ;
  GGS_typeCplusPlusName  var_cas_sentStringName ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      var_cas_sentStringName = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4694)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      GGS_lstring  var_cas_sentVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_sentVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_targetType ;
      var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_sentVariableName, var_cas_targetType, var_cas_sentStringName COMMA_SOURCE_FILE_AT_LINE (4699)) ;
      GGS_typeGalgas_string  var_cas_gs = GGS_typeGalgas_string::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_sentVariableName COMMA_SOURCE_FILE_AT_LINE (4700)) ;
      } break ;
    default :
      break ;
  }
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_instruction = GGS_C_grammarInstruction ::constructor_new (inLexique, var_cas_sourceIsFile, var_cas_sourceExpression, var_cas_grammarName, var_cas_expressionsList, var_cas_altName, var_cas_lexiqueClassName, var_cas_sentStringName, var_cas_depFileExpression, var_cas_depFilePath COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4570_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_44 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_45 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      switch (select_semantics_parser_46 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_dependency) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_on) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  nt_parse_parameters_list_parse (inLexique) ;
  switch (select_semantics_parser_47 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4725_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  /* var_cas_inTableEnAvant */,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("using 'send'") COMMA_SOURCE_FILE_AT_LINE (4734)) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_expressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_expression, var_cas_expressionType) ;
  GGS_typeGalgas_string  var_cas_classType = GGS_typeGalgas_string::castFrom (inLexique, var_cas_expressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4747)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeSendInstruction ::constructor_new (inLexique, var_cas_expression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4725_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_send) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4762_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  GGS_string var_cas_prefixString ;
  switch (select_semantics_parser_48 (inLexique)) {
    case 1 : {
      var_cas_prefixString = GGS_string ("") ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_prefix ;
      inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_prefixString = var_cas_prefix.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4777)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_nomVarDest ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomVarDest) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_location  var_cas_instructionLocation = var_cas_nomVarDest.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4783)) ;
  GGS_AC_galgasType  var_cas_targetType ;
  GGS_typeCplusPlusName  var_cas_accessedVariableCppName ;
  GGS_string var_cas_errorMessageName ;
  var_cas_ioVariablesMap.modifier_searchForReadWriteAccess (inLexique, var_cas_nomVarDest, var_cas_targetType, var_cas_accessedVariableCppName COMMA_SOURCE_FILE_AT_LINE (4788)) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_49 = true ;
    while (syntaxRepeat_49) {
      switch (select_repeat_semantics_parser_49 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
          var_cas_instructionLocation = var_cas_structAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4797)) ;
          GGS_typeGalgasStructType  var_cas_structType = GGS_typeGalgasStructType::castFrom (inLexique, var_cas_targetType.getPtr (), true, var_cas_structAttributeName COMMA_SOURCE_FILE_AT_LINE (4798)) ;
          GGS_bool var_cas_found = GGS_bool (false) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_181709 (var_cas_structType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (4800)), true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_181709 = NULL ;
            while (((operand_181709 = enumerator_181709.nextObject ()))
                && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
              macroValidPointer (operand_181709) ;
              var_cas_found = (operand_181709->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4801))).operator_isEqual (var_cas_structAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4801))) ;
              var_cas_targetType = operand_181709->mAttributType ;
            }
          }
          if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
            var_cas_structAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_structType.reader_mStructTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (4805)))).operator_concat (GGS_string ("' does not define a '"))).operator_concat (var_cas_structAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (4806)) ;
          }
          } break ;
        default :
          syntaxRepeat_49 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_searchMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_searchMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_keyExpression ;
  GGS_AC_galgasType  var_cas_keyExpressionType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_keyExpression, var_cas_keyExpressionType) ;
  GGS_typeListeAttributsSemantiques  var_cas_attributeList ;
  GGS_string var_cas_mapTypeName ;
  const GGS_AC_galgasType  temp_182607 = var_cas_targetType ;
  if (temp_182607.isBuilt ()) {
    temp_182607 (HERE)->method_check_with_InstructionAccess (inLexique, var_cas_instructionLocation, var_cas_searchMethodName, var_cas_keyExpressionType, var_cas_mapTypeName, var_cas_errorMessageName, var_cas_attributeList COMMA_SOURCE_FILE_AT_LINE (4825)) ;
  }
  GGS_typeInstructionList  var_cas_doBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  GGS_typeInstructionList  var_cas_elseBranchInstructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4836)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4837)) ;
  var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (GGS_string ("key")), var_cas_instructionLocation COMMA_HERE), GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE), GGS_typeKeyName ::constructor_new (inLexique, var_cas_instructionLocation, GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4839)) ;
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_183298 (var_cas_attributeList, true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_183298 = NULL ;
    while (((operand_183298 = enumerator_183298.nextObject ()))) {
      macroValidPointer (operand_183298) ;
      var_cas_ioVariablesMap.modifier_insertWithInstructionLocalVariable (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_prefixString).operator_concat (operand_183298->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4848))), var_cas_instructionLocation COMMA_HERE), operand_183298->mAttributType, GGS_typeOperandName ::constructor_new (inLexique, var_cas_instructionLocation, operand_183298->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4850)), GGS_bool (true), GGS_bool (false) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (4847)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_doBranchInstructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4837)) ;
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4864)) ;
  switch (select_semantics_parser_50 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elseBranchInstructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4864)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (4836)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeWithInstruction ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_accessedVariableCppName, var_cas_structAttributeList, var_cas_errorMessageName, var_cas_keyExpression, var_cas_doBranchInstructionList, var_cas_elseBranchInstructionList, var_cas_instructionLocation COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_4762_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  switch (select_semantics_parser_48 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  { bool syntaxRepeat_49 = true ;
    while (syntaxRepeat_49) {
      switch (select_repeat_semantics_parser_49 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_49 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
  switch (select_semantics_parser_50 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'constant_while_before_in_foreach_instruction'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4902_51_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_typeCplusPlusName  &var_cas_outIndexVariable,
                                GGS_typeInstructionList  &var_cas_out_before_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4912)) ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      var_cas_outIndexVariable = GGS_typeNullName ::constructor_new (inLexique, GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_outIndexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (4938)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (4938)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_outIndexVariable COMMA_SOURCE_FILE_AT_LINE (4939)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  var_cas_out_before_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_before_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4912)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4902_51_secondPhase (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                GGS_foreachEnumerationList  &var_cas_outForeachEnumerationList,
                                GGS_typeExpression  &var_cas_outWhileExpression,
                                GGS_typeInstructionList  &var_cas_out_do_instructionList) {
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (4979)) ;
  var_cas_outForeachEnumerationList = GGS_foreachEnumerationList ::constructor_emptyList () ;
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        GGS_location  var_cas_magicNumber = GGS_location (inLexique) ;
        GGS_bool var_cas_ascending ;
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (true) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            var_cas_ascending = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        GGS_typeExpression  var_cas_sourceExpression ;
        GGS_AC_galgasType  var_cas_sourceExpressionType ;
        nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceExpressionType) ;
        GGS_typeListeAttributsSemantiques  var_cas_formalEnumerationList ;
        GGS_localConstantBuildStyleEnum var_cas_localConstantBuildStyleEnum ;
        GGS_bool var_cas_iteratorNewStyle ;
        const GGS_AC_galgasType  temp_188258 = var_cas_sourceExpressionType ;
        if (temp_188258.isBuilt ()) {
          temp_188258 (HERE)->method_acceptForeachInstruction (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_magicNumber, var_cas_formalEnumerationList, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle COMMA_SOURCE_FILE_AT_LINE (5010)) ;
        }
        GGS_string var_cas_typeName ;
        const GGS_AC_galgasType  temp_188516 = var_cas_sourceExpressionType ;
        if (temp_188516.isBuilt ()) {
          temp_188516 (HERE)->method_getTypeName (inLexique, var_cas_typeName COMMA_SOURCE_FILE_AT_LINE (5019)) ;
        }
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            GGS_bool automatic_var_24 ;
            nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_formalEnumerationList, var_cas_magicNumber, var_cas_localConstantBuildStyleEnum, var_cas_iteratorNewStyle, automatic_var_24) ;
            } break ;
          case 2 : {
            GGS_bool var_cas_mapStyle = (var_cas_localConstantBuildStyleEnum).operator_isNotEqual (GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE)) ;
            GGS_bool var_cas_firstOne = GGS_bool (true) ;
            {
              GGS_typeListeAttributsSemantiques::cEnumerator enumerator_188989 (var_cas_formalEnumerationList, true) ;
              const GGS_typeListeAttributsSemantiques::cElement * operand_188989 = NULL ;
              while (((operand_188989 = enumerator_188989.nextObject ()))) {
                macroValidPointer (operand_188989) ;
                GGS_typeCplusPlusName  var_cas_cppName ;
                if ((((var_cas_localConstantBuildStyleEnum).operator_isEqual (GGS_localConstantBuildStyleEnum::constructor_firstIsKeyOtherMapStyle (inLexique COMMA_HERE))).operator_and (var_cas_firstOne)).isBuiltAndTrue ()) {
                  var_cas_cppName = GGS_typeKeyName ::constructor_new (inLexique, var_cas_magicNumber, var_cas_iteratorNewStyle COMMA_HERE) ;
                }else{
                  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_magicNumber, operand_188989->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5038)), var_cas_mapStyle, var_cas_iteratorNewStyle COMMA_HERE) ;
                }
                var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_188989->mAttributeName, operand_188989->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (5040)) ;
                var_cas_firstOne = GGS_bool (false) ;
              }
            }
            } break ;
          default :
            break ;
        }
        var_cas_outForeachEnumerationList.addAssign_operation (var_cas_iteratorNewStyle, var_cas_sourceExpression, var_cas_magicNumber, var_cas_typeName, var_cas_ascending) ;
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      GGS_lstring  var_cas_indexVariableName ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      GGS_typeCplusPlusName  var_cas_indexVariable = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_indexVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5054)), var_cas_indexVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5054)) COMMA_HERE) ;
      var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, var_cas_indexVariableName, GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5055)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      var_cas_outWhileExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_resultType ;
      nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_outWhileExpression, var_cas_resultType) ;
      GGS_typeGalgas_bool  var_cas_b = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_resultType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5074)) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  var_cas_out_do_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_out_do_instructionList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (4979)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_constant_while_before_in_foreach_instruction_semantics_parser_4902_51_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_51 = true ;
    while (syntaxRepeat_51) {
        switch (select_semantics_parser_52 (inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
            } break ;
          case 3 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
        nt_expression_parse (inLexique) ;
        switch (select_semantics_parser_53 (inLexique)) {
          case 1 : {
            nt_parse_effective_input_parameters_list_parse (inLexique) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
      switch (select_repeat_semantics_parser_51 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_51 = false ;
          break ;
      }
    }
  }
  switch (select_semantics_parser_54 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_55 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_while) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_56 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_before) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_do) COMMA_HERE) ;
  nt_semantic_instructions_list_no_verif_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5099_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction ;
  var_cas_ioVariablesMap.prologue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5109)) ;
  GGS_typeInstructionList  var_cas_before_instructionList ;
  GGS_typeExpression  var_cas_whileExpression ;
  GGS_foreachEnumerationList  var_cas_foreachEnumerationList ;
  GGS_typeInstructionList  var_cas_do_instructionList ;
  GGS_typeCplusPlusName  var_cas_indexVariable ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_192429 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_indexVariable, var_cas_before_instructionList) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_192429) ;
    nt_constant_while_before_in_foreach_instruction_secondPhase (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_inSemanticContext, var_cas_foreachEnumerationList, var_cas_whileExpression, var_cas_do_instructionList) ;
  //--- End of parse/rewind instruction
  GGS_typeInstructionList  var_cas_between_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5139)) ;
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_192882 = var_cas_indexVariable ; // CAST instruction
        if (_var_192882.getPtr () != NULL) {
          macroValidPointer (_var_192882.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_192882.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_192882.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5145)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5145)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5144)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_between_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5139)) ;
  GGS_typeInstructionList  var_cas_after_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_repeatPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5164)) ;
  switch (select_semantics_parser_58 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { const GGS_typeCplusPlusName _var_193649 = var_cas_indexVariable ; // CAST instruction
        if (_var_193649.getPtr () != NULL) {
          macroValidPointer (_var_193649.getPtr ()) ;
          if (typeid (cPtr_typeAutomaticName) == typeid (* (_var_193649.getPtr ()))) {
            const GGS_typeAutomaticName var_cas_a (_var_193649.getPtr ()) ;
            var_cas_ioVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_a.reader_mName (inLexique COMMA_SOURCE_FILE_AT_LINE (5170)), var_cas_a.reader_mVariableLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (5170)) COMMA_HERE), GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE), var_cas_indexVariable COMMA_SOURCE_FILE_AT_LINE (5169)) ;
          }else{
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_after_instructionList, var_cas_inSemanticContext) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioVariablesMap.epilogue_repeatPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5164)) ;
  var_cas_ioVariablesMap.epilogue_repeatBlock (inLexique COMMA_SOURCE_FILE_AT_LINE (5109)) ;
  var_cas_instruction = GGS_typeForeachInstruction ::constructor_new (inLexique, var_cas_foreachEnumerationList, var_cas_indexVariable, var_cas_whileExpression, var_cas_before_instructionList, var_cas_do_instructionList, var_cas_between_instructionList, var_cas_after_instructionList COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5099_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  //--- First branch of parse/rewind instruction
    const C_parsingContext context_192429 = inLexique.parsingContext () ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- Branch of parse/rewind instruction
    inLexique.setParsingContext (context_192429) ;
    nt_constant_while_before_in_foreach_instruction_parse (inLexique) ;
  //--- End of parse/rewind instruction
  switch (select_semantics_parser_57 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_between) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  switch (select_semantics_parser_58 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_after) COMMA_HERE) ;
      nt_semantic_instructions_list_no_verif_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'parse_match_operand'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5209_26_ (galgas_scanner & inLexique,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeCplusPlusName  &var_cas_outCppName,
                                GGS_lstring  &var_cas_outBaseTypeName,
                                GGS_location  &var_cas_outVarLocation,
                                GGS_bool &var_cas_outIsEnumeration,
                                GGS_enumConstantMap  &var_cas_outEnumMessageMap) {
  GGS_lstring  var_cas_variableName ;
  GGS_AC_galgasType  var_cas_type ;
  nt_read_access_ (inLexique, var_cas_variableName, var_cas_outCppName, var_cas_type, var_cas_ioVariablesMap) ;
  var_cas_outVarLocation = GGS_location (inLexique) ;
  { const GGS_AC_galgasType _var_195702 = var_cas_type ; // CAST instruction
    if (_var_195702.getPtr () != NULL) {
      macroValidPointer (_var_195702.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgasClassType *> (_var_195702.getPtr ()) != NULL) {
        const GGS_typeGalgasClassType var_cas_t (_var_195702.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_t.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5228)) ;
        var_cas_outIsEnumeration = GGS_bool (false) ;
        var_cas_outEnumMessageMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      }else if (dynamic_cast <cPtr_typeGalgas_enum *> (_var_195702.getPtr ()) != NULL) {
        const GGS_typeGalgas_enum var_cas_e (_var_195702.getPtr ()) ;
        var_cas_outBaseTypeName = var_cas_e.reader_mEnumTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (5232)) ;
        var_cas_outIsEnumeration = GGS_bool (true) ;
        var_cas_outEnumMessageMap = var_cas_e.reader_mEnumConstantesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5234)) ;
      }else{
        GGS_string var_cas_actualTypeName ;
        const GGS_AC_galgasType  temp_195466 = var_cas_type ;
        if (temp_195466.isBuilt ()) {
          temp_195466 (HERE)->method_getTypeName (inLexique, var_cas_actualTypeName COMMA_SOURCE_FILE_AT_LINE (5237)) ;
        }
        var_cas_variableName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the type of this variable is '@")).operator_concat (var_cas_actualTypeName)).operator_concat (GGS_string ("' ; I was expected an enumeration type or an abstract type")) COMMA_SOURCE_FILE_AT_LINE (5241)) ;
        var_cas_outBaseTypeName.drop () ;
        var_cas_outIsEnumeration.drop () ;
        var_cas_outEnumMessageMap.drop () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_operand_semantics_parser_5209_26_parse (galgas_scanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5247_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  var_cas_inVarLocation,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  /* var_cas_inEnumMessageMap */,
                                GGS_lstring  &var_cas_outTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_196250 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_196250.isBuilt ()) {
    temp_196250 (HERE)->method_searchKey (inLexique, var_cas_outTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5260)) ;
  }
  GGS_AC_galgasType  var_cas_definitionClasse1 = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5261)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5261)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_definitionClasse1.getPtr (), true, var_cas_outTypeName COMMA_SOURCE_FILE_AT_LINE (5263)) ;
  GGS_typeSuperClassesMap  var_cas_tableDesClassesAncetresType1 = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5264)) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributs1 = var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5265)) ;
  GGS_bool var_cas_isAbstract = var_cas_classType.reader_mClassIsAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (5266)) ;
  if ((var_cas_isAbstract).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("an abstract class is not allowed here") COMMA_SOURCE_FILE_AT_LINE (5270)) ;
  }
  if ((var_cas_inIsEnumeration).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a constant of '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5273)))).operator_concat (GGS_string ("' enumeration type is expected here")) COMMA_SOURCE_FILE_AT_LINE (5274)) ;
  }else if (((var_cas_tableDesClassesAncetresType1.reader_hasKey (inLexique, var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5274)) COMMA_SOURCE_FILE_AT_LINE (5274))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_outTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("This type does not inherit from '")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5275)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (5276)) ;
  }
  GGS_bool automatic_var_25 ;
  nt_parse_effective_input_parameters_list_ (inLexique, var_cas_ioVariablesMap, var_cas_listeAttributs1, var_cas_inVarLocation, GGS_localConstantBuildStyleEnum::constructor_listStyle (inLexique COMMA_HERE), GGS_bool (false), automatic_var_25) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5247_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  nt_parse_effective_input_parameters_list_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'parse_match_case'            *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5290_23_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_lstring  var_cas_inTypeName,
                                GGS_location  /* var_cas_inVarLocation */,
                                GGS_bool var_cas_inIsEnumeration,
                                GGS_enumConstantMap  var_cas_inEnumMessageMap,
                                GGS_lstring  &var_cas_outEnumConstantName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outEnumConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  if ((var_cas_inIsEnumeration).isBuiltAndTrue ()) {
    GGS_bool automatic_var_26 ;
    const GGS_enumConstantMap  temp_198051 = var_cas_inEnumMessageMap ;
    if (temp_198051.isBuilt ()) {
      temp_198051 (HERE)->method_searchKey (inLexique, var_cas_outEnumConstantName, automatic_var_26 COMMA_SOURCE_FILE_AT_LINE (5303)) ;
    }
  }else{
    var_cas_outEnumConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("a class that inherit from '@")).operator_concat (var_cas_inTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5305)))).operator_concat (GGS_string ("' abstract class is expected here")) COMMA_SOURCE_FILE_AT_LINE (5306)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_parse_match_case_semantics_parser_5290_23_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5311_27_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand1_cppName ;
  GGS_lstring  var_cas_operand1_typeName ;
  GGS_location  var_cas_operand1_location ;
  GGS_bool var_cas_operand1_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand1_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand1_cppName, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_operand2_cppName ;
  GGS_lstring  var_cas_operand2_typeName ;
  GGS_location  var_cas_operand2_location ;
  GGS_bool var_cas_operand2_isEnumeration ;
  GGS_enumConstantMap  var_cas_operand2_enumMessageMap ;
  nt_parse_match_operand_ (inLexique, var_cas_ioVariablesMap, var_cas_operand2_cppName, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_L_matchInstructionCasesList  var_cas_casesList = GGS_L_matchInstructionCasesList ::constructor_emptyList () ;
  var_cas_ioVariablesMap.prologue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5352)) ;
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5356)) ;
          GGS_lstring  var_cas_case1_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand1_typeName, var_cas_operand1_location, var_cas_operand1_isEnumeration, var_cas_operand1_enumMessageMap, var_cas_case1_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          GGS_lstring  var_cas_case2_name ;
          nt_parse_match_case_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_ioVariablesMap, var_cas_operand2_typeName, var_cas_operand2_location, var_cas_operand2_isEnumeration, var_cas_operand2_enumMessageMap, var_cas_case2_name) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeInstructionList  var_cas_instructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
          nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_instructionsList, var_cas_inSemanticContext) ;
          var_cas_casesList.addAssign_operation (var_cas_case1_name, var_cas_case2_name, var_cas_instructionsList) ;
          var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5356)) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
  var_cas_ioVariablesMap.prologue_testPart (inLexique COMMA_SOURCE_FILE_AT_LINE (5396)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_elsePartInstructionsList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_elsePartInstructionsList, var_cas_inSemanticContext) ;
  var_cas_ioVariablesMap.epilogue_testPart (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (5396)) ;
  var_cas_ioVariablesMap.epilogue_testBloc (inLexique COMMA_SOURCE_FILE_AT_LINE (5352)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstruction  var_cas_instruction = GGS_typeMatchInstruction ::constructor_new (inLexique, var_cas_operand1_location, var_cas_operand2_location, var_cas_operand1_cppName, var_cas_operand2_cppName, var_cas_operand1_typeName, var_cas_operand2_typeName, var_cas_operand1_isEnumeration, var_cas_operand2_isEnumeration, var_cas_casesList, var_cas_elsePartInstructionsList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instruction_semantics_parser_5311_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
  nt_parse_match_operand_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_59 = true ;
    while (syntaxRepeat_59) {
      switch (select_repeat_semantics_parser_59 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_when) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3A_) COMMA_HERE) ;
          nt_parse_match_case_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          nt_semantic_instructions_list_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_59 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_else) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_match) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of production rule 'semantic_instructions_list_no_verif'   *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5428_42_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext) {
  { bool syntaxRepeat_60 = true ;
    while (syntaxRepeat_60) {
      switch (select_repeat_semantics_parser_60 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ioInstructionList, var_cas_inSemanticContext) ;
          } break ;
        default :
          syntaxRepeat_60 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantic_instructions_list_no_verif_semantics_parser_5428_42_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_60 = true ;
    while (syntaxRepeat_60) {
      switch (select_repeat_semantics_parser_60 (inLexique)) {
        case 2 : {
          nt_semantic_instruction_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_60 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5453_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  /* var_cas_inTargetVarName */,
                                const GGS_typeCplusPlusName  var_cas_inVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_ioComponentSemanticsEntitiesMap */) {
  var_cas_ioInstructionList.addAssign_operation (GGS_typeInstructionDeclarationVarLocale ::constructor_new (inLexique, var_cas_inVariableCppName, var_cas_inVariableType COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5453_26_parse (galgas_scanner & /* inLexique */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5469_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_sourceExpression ;
  GGS_AC_galgasType  var_cas_sourceType ;
  nt_expression_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap, var_cas_sourceExpression, var_cas_sourceType) ;
  ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_inVariableType,  var_cas_sourceType,  GGS_location (inLexique),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (5493)) ;
  GGS_typeInstruction  var_cas_instruction = GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_sourceExpression COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  GGS_AC_galgasType  automatic_var_27 ;
  GGS_typeCplusPlusName  automatic_var_28 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_27, automatic_var_28 COMMA_SOURCE_FILE_AT_LINE (5498)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5469_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A__3D_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'optional_assignment'           *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5503_26_ (galgas_scanner & inLexique,
                                const GGS_lstring  /* var_cas_inTypeName */,
                                const GGS_lstring  var_cas_inTargetVarName,
                                const GGS_typeCplusPlusName  var_cas_inTargetVariableCppName,
                                const GGS_AC_galgasType  var_cas_inVariableType,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeInstructionList  &var_cas_ioInstructionList,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_semanticsEntitiesForUse  var_cas_ioComponentSemanticsEntitiesMap) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  GGS_lstring  var_cas_constructorName ;
  inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  GGS_bool var_cas_hasLexiqueAndLocationArguments ;
  const GGS_AC_galgasType  temp_205454 = var_cas_inVariableType ;
  if (temp_205454.isBuilt ()) {
    temp_205454 (HERE)->method_handleConstructorCall (inLexique, var_cas_constructorName, var_cas_listeAttributsSemantiques, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (5521)) ;
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inSemanticContext, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_e = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_inVariableType, var_cas_constructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5536)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_C_declarationInstructionWithAssignment ::constructor_new (inLexique, var_cas_inVariableType, var_cas_inTargetVariableCppName, var_cas_e COMMA_HERE)) ;
  GGS_AC_galgasType  automatic_var_29 ;
  GGS_typeCplusPlusName  automatic_var_30 ;
  var_cas_ioVariablesMap.modifier_searchForWriteAccess (inLexique, var_cas_inTargetVarName, automatic_var_29, automatic_var_30 COMMA_SOURCE_FILE_AT_LINE (5542)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_optional_assignment_semantics_parser_5503_26_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5551_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5565)) COMMA_SOURCE_FILE_AT_LINE (5565))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5566)) COMMA_SOURCE_FILE_AT_LINE (5566)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5568)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_207598 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_207598.isBuilt ()) {
        temp_207598 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5575)) ;
      }
      GGS_AC_galgasType  var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5576)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5576)) ;
      GGS_typeGalgasMapType  var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5577)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5578)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5579)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5580)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5581)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5594)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5595)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5608)) ;
      GGS_typeEntityToGenerate  var_cas_e = GGS_C_mapindexToImplement ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5551_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  GGS_lstring  var_cas_mapindexTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapindexTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5631)) COMMA_SOURCE_FILE_AT_LINE (5631))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapindexTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5632)) COMMA_SOURCE_FILE_AT_LINE (5632)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapindexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5634)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      GGS_lstring  var_cas_mapTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_theEntity ;
      const GGS_M_semanticsEntitiesForUse  temp_210123 = var_cas_ioComponentSemanticsEntitiesMap ;
      if (temp_210123.isBuilt ()) {
        temp_210123 (HERE)->method_searchKey (inLexique, var_cas_mapTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (5641)) ;
      }
      GGS_AC_galgasType  var_cas_aType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5642)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (5642)) ;
      GGS_typeGalgasMapType  var_cas_mapType = GGS_typeGalgasMapType::castFrom (inLexique, var_cas_aType.getPtr (), true, var_cas_mapTypeName COMMA_SOURCE_FILE_AT_LINE (5643)) ;
      GGS_typeListeAttributsSemantiques  var_cas_mapAttributesList = var_cas_mapType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (5644)) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesSurcharger = var_cas_mapType.reader_aTableMethodesSurcharger (inLexique COMMA_SOURCE_FILE_AT_LINE (5645)) ;
      GGS_mapModifierMap  var_cas_modifierMethodMap = var_cas_mapType.reader_mModifierMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5646)) ;
      GGS_mapMethodMap  var_cas_readerMethodMap = var_cas_mapType.reader_mReaderMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (5647)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_mapIndexSearchReaderMap  var_cas_mapIndexSearchReaderMap = GGS_mapIndexSearchReaderMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_searchReaderName ;
              inLexique.assignFromAttribute_tokenString (var_cas_searchReaderName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              GGS_lstring  var_cas_mapindexErrorMessage ;
              inLexique.assignFromAttribute_tokenString (var_cas_mapindexErrorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              if (var_cas_mapindexErrorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5660)) ;
              }
              var_cas_mapIndexSearchReaderMap.modifier_insertKey (inLexique, var_cas_searchReaderName, var_cas_mapindexErrorMessage COMMA_SOURCE_FILE_AT_LINE (5661)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_t = GGS_typeGalgasMapindexType ::constructor_new (inLexique, var_cas_mapindexTypeName, var_cas_mapTypeName, var_cas_mapAttributesList, var_cas_mapIndexSearchReaderMap, var_cas_tableMethodesSurcharger, var_cas_modifierMethodMap, var_cas_readerMethodMap COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapindexTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (5674)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5551_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_mapindex) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_61 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_62 = true ;
        while (syntaxRepeat_62) {
          switch (select_repeat_semantics_parser_62 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_62 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5684_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5698)) COMMA_SOURCE_FILE_AT_LINE (5698))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5699)) COMMA_SOURCE_FILE_AT_LINE (5699)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (5701)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      var_cas_cppClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("old style map definition") COMMA_SOURCE_FILE_AT_LINE (5708)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5721)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5728)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (5763)) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_215629 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_215629 = NULL ;
        while (((operand_215629 = enumerator_215629.nextObject ()))) {
          macroValidPointer (operand_215629) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_215826 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_215826 = NULL ;
            while (((operand_215826 = enumerator_215826.nextObject ()))) {
              macroValidPointer (operand_215826) ;
              var_cas_methodSignature.addAssign_operation (operand_215826->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_215629->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5791)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_216256 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_216256 = NULL ;
            while (((operand_216256 = enumerator_216256.nextObject ()))) {
              macroValidPointer (operand_216256) ;
              var_cas_methodSignature.addAssign_operation (operand_216256->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_215629->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5799))).operator_concat (GGS_string ("GetIndex")), operand_215629->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5799)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5800)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_216605 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_216605 = NULL ;
        while (((operand_216605 = enumerator_216605.nextObject ()))) {
          macroValidPointer (operand_216605) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_216800 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_216800 = NULL ;
            while (((operand_216800 = enumerator_216800.nextObject ()))) {
              macroValidPointer (operand_216800) ;
              var_cas_methodSignature.addAssign_operation (operand_216800->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_216605->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5809)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_217228 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_217228 = NULL ;
            while (((operand_217228 = enumerator_217228.nextObject ()))) {
              macroValidPointer (operand_217228) ;
              var_cas_methodSignature.addAssign_operation (operand_217228->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_216605->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5817))).operator_concat (GGS_string ("GetIndex")), operand_216605->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (5817)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5818)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5829)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_typeDefinitionTableAimplementer ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_cppClassName, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_tableMethodesBloc COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_lstring  var_cas_enumTypeName ;
      GGS_lstring  var_cas_checkFinalStateMethod ;
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          var_cas_enumTypeName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          var_cas_checkFinalStateMethod = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_checkFinalStateMethod) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_removeMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5885)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_220622 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_220622 = NULL ;
                while (((operand_220622 = enumerator_220622.nextObject ()))) {
                  macroValidPointer (operand_220622) ;
                  var_cas_methodSignature.addAssign_operation (operand_220622->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5893)) ;
              var_cas_removeMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5894)), GGS_bool (false), GGS_string ("")) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5896))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_221211 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_221211 = NULL ;
                  while (((operand_221211 = enumerator_221211.nextObject ()))) {
                    macroValidPointer (operand_221211) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_221211->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5903)) ;
                var_cas_removeMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5904)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_KL_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5912)) ;
              }
              GGS_string var_cas_shadowErrorMessage ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  var_cas_shadowErrorMessage = GGS_string ("") ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  GGS_lstring  var_cas_shadowErrorMessageString ;
                  inLexique.assignFromAttribute_tokenString (var_cas_shadowErrorMessageString) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  if (var_cas_shadowErrorMessageString.isBuilt ()) {
                    ::routine_check_KL_escapeCharacters (inLexique,  var_cas_shadowErrorMessageString COMMA_SOURCE_FILE_AT_LINE (5920)) ;
                  }
                  var_cas_shadowErrorMessage = var_cas_shadowErrorMessageString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5921)) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_222307 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_222307 = NULL ;
                while (((operand_222307 = enumerator_222307.nextObject ()))) {
                  macroValidPointer (operand_222307) ;
                  var_cas_methodSignature.addAssign_operation (operand_222307->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5930)) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5931)), GGS_bool (false), var_cas_shadowErrorMessage) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5933))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_222911 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_222911 = NULL ;
                  while (((operand_222911 = enumerator_222911.nextObject ()))) {
                    macroValidPointer (operand_222911) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_222911->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5940)) ;
                var_cas_insertMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5941)), GGS_bool (true), var_cas_shadowErrorMessage) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  var_cas_errorMessage ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, var_cas_errorMessage) ;
              if (var_cas_errorMessage.isBuilt ()) {
                ::routine_check_K_escapeCharacters (inLexique,  var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (5949)) ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_223693 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_223693 = NULL ;
                while (((operand_223693 = enumerator_223693.nextObject ()))) {
                  macroValidPointer (operand_223693) ;
                  var_cas_methodSignature.addAssign_operation (operand_223693->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (5957)) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_methodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5958)), GGS_bool (false), GGS_string ("")) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5960))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_224312 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_224312 = NULL ;
                  while (((operand_224312 = enumerator_224312.nextObject ()))) {
                    macroValidPointer (operand_224312) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_224312->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (5967)) ;
                var_cas_searchMethodList.addAssign_operation (var_cas_getIndexMethodName, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5968)), GGS_bool (true), GGS_string ("")) ;
              }
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_224713 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_224713 = NULL ;
        while (((operand_224713 = enumerator_224713.nextObject ()))) {
          macroValidPointer (operand_224713) ;
          if ((operand_224713->mInfo.mHasSetter).isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_224713->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (5974)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (5974)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_224713->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (5978)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (5990)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_mapToImplement ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_enumTypeName, var_cas_checkFinalStateMethod, var_cas_listeTousAttributsSemantiques, var_cas_tableAttributs, var_cas_insertMethodList, var_cas_searchMethodList, var_cas_removeMethodList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5684_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  GGS_lstring  var_cas_mapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6019)) COMMA_SOURCE_FILE_AT_LINE (6019))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_mapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6019)) COMMA_SOURCE_FILE_AT_LINE (6019)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedMapType ::constructor_new (inLexique, var_cas_mapTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (6021)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      GGS_lstring  var_cas_cppClassName ;
      inLexique.assignFromAttribute_tokenString (var_cas_cppClassName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      GGS_insertOrSearchMethodList  var_cas_insertMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_insertOrSearchMethodList  var_cas_searchMethodList = GGS_insertOrSearchMethodList ::constructor_emptyList () ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_insertMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6040)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              GGS_lstring  var_cas_errorMessage ;
              nt_ex_map_method_ (inLexique, var_cas_nomMethode, var_cas_errorMessage) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_searchMethodList.addAssign_operation (var_cas_nomMethode, var_cas_errorMessage.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6047)), GGS_bool (true), GGS_string ("")) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              GGS_lstring  var_cas_nomMethode ;
              inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureDebut ;
              GGS_typeVariablesMap  var_cas_tableDebut = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeDebut ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureDebut, var_cas_tableDebut, var_cas_listeTypesEtNomsArgMethodeDebut, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_signatureFin ;
              GGS_typeVariablesMap  var_cas_tableFin = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypesEtNomsArgMethodeFin ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_signatureFin, var_cas_tableFin, var_cas_listeTypesEtNomsArgMethodeFin, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              var_cas_tableMethodesBloc.modifier_insertKey (inLexique, var_cas_nomMethode, var_cas_signatureDebut, var_cas_signatureFin COMMA_SOURCE_FILE_AT_LINE (6082)) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_229550 (var_cas_insertMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_229550 = NULL ;
        while (((operand_229550 = enumerator_229550.nextObject ()))) {
          macroValidPointer (operand_229550) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_229747 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_229747 = NULL ;
            while (((operand_229747 = enumerator_229747.nextObject ()))) {
              macroValidPointer (operand_229747) ;
              var_cas_methodSignature.addAssign_operation (operand_229747->mAttributType, var_cas_inPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_229550->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6110)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_230177 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_230177 = NULL ;
            while (((operand_230177 = enumerator_230177.nextObject ()))) {
              macroValidPointer (operand_230177) ;
              var_cas_methodSignature.addAssign_operation (operand_230177->mAttributType, var_cas_inPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_229550->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6118))).operator_concat (GGS_string ("GetIndex")), operand_229550->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6118)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6119)) ;
        }
      }
      {
        GGS_insertOrSearchMethodList::cEnumerator enumerator_230526 (var_cas_searchMethodList, true) ;
        const GGS_insertOrSearchMethodList::cElement * operand_230526 = NULL ;
        while (((operand_230526 = enumerator_230526.nextObject ()))) {
          macroValidPointer (operand_230526) ;
          GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_230723 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_230723 = NULL ;
            while (((operand_230723 = enumerator_230723.nextObject ()))) {
              macroValidPointer (operand_230723) ;
              var_cas_methodSignature.addAssign_operation (operand_230723->mAttributType, var_cas_outPassingMode) ;
            }
          }
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, operand_230526->mMethodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6128)) ;
          var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
          var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
          var_cas_methodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
          {
            GGS_typeListeAttributsSemantiques::cEnumerator enumerator_231154 (var_cas_listeTousAttributsSemantiques, true) ;
            const GGS_typeListeAttributsSemantiques::cElement * operand_231154 = NULL ;
            while (((operand_231154 = enumerator_231154.nextObject ()))) {
              macroValidPointer (operand_231154) ;
              var_cas_methodSignature.addAssign_operation (operand_231154->mAttributType, var_cas_outPassingMode) ;
            }
          }
          GGS_lstring  var_cas_insertKeyAndGetIndexName = GGS_lstring ::constructor_new (inLexique, (operand_230526->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6136))).operator_concat (GGS_string ("GetIndex")), operand_230526->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6136)) COMMA_HERE) ;
          var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_insertKeyAndGetIndexName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6137)) ;
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6148)) ;
      GGS_TypeModel  var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6150)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_typeTableBlocsDeTable  var_cas_tableMethodesBloc = GGS_typeTableBlocsDeTable ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_inPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE) ;
      GGS_EXformalArgumentPassingMode var_cas_outPassingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_lstringType = GGS_typeGalgas_lstring ::constructor_new (inLexique COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_luintType = GGS_typeGalgas_luint ::constructor_new (inLexique COMMA_HERE) ;
      GGS_mapModifierMap  var_cas_mapModifierMethodMap = GGS_mapModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_mapMethodMap  var_cas_mapReaderMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_31 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_31) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_233513 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_233513 = NULL ;
                while (((operand_233513 = enumerator_233513.nextObject ()))) {
                  macroValidPointer (operand_233513) ;
                  var_cas_methodSignature.addAssign_operation (operand_233513->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6197)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6199))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_234058 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_234058 = NULL ;
                  while (((operand_234058 = enumerator_234058.nextObject ()))) {
                    macroValidPointer (operand_234058) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_234058->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6206)) ;
              }
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_32 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_32) ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_234739 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_234739 = NULL ;
                while (((operand_234739 = enumerator_234739.nextObject ()))) {
                  macroValidPointer (operand_234739) ;
                  var_cas_methodSignature.addAssign_operation (operand_234739->mAttributType, var_cas_inPassingMode) ;
                }
              }
              var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6225)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6227))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_235283 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_235283 = NULL ;
                  while (((operand_235283 = enumerator_235283.nextObject ()))) {
                    macroValidPointer (operand_235283) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_235283->mAttributType, var_cas_inPassingMode) ;
                  }
                }
                var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6234)) ;
              }
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              GGS_lstring  var_cas_methodName ;
              GGS_lstring  var_cas_getIndexMethodName ;
              GGS_lstring  automatic_var_33 ;
              nt_map_method_ (inLexique, var_cas_methodName, var_cas_getIndexMethodName, automatic_var_33) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_methodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
              var_cas_methodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
              {
                GGS_typeListeAttributsSemantiques::cEnumerator enumerator_235884 (var_cas_listeTousAttributsSemantiques, true) ;
                const GGS_typeListeAttributsSemantiques::cElement * operand_235884 = NULL ;
                while (((operand_235884 = enumerator_235884.nextObject ()))) {
                  macroValidPointer (operand_235884) ;
                  var_cas_methodSignature.addAssign_operation (operand_235884->mAttributType, var_cas_outPassingMode) ;
                }
              }
              var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_methodSignature COMMA_SOURCE_FILE_AT_LINE (6248)) ;
              if (((var_cas_getIndexMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6250))).operator_isNotEqual (GGS_string (""))).isBuiltAndTrue ()) {
                GGS_L_EXsignature  var_cas_getIndexMethodSignature = GGS_L_EXsignature ::constructor_emptyList () ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_lstringType, var_cas_inPassingMode) ;
                var_cas_getIndexMethodSignature.addAssign_operation (var_cas_luintType, var_cas_outPassingMode) ;
                {
                  GGS_typeListeAttributsSemantiques::cEnumerator enumerator_236469 (var_cas_listeTousAttributsSemantiques, true) ;
                  const GGS_typeListeAttributsSemantiques::cElement * operand_236469 = NULL ;
                  while (((operand_236469 = enumerator_236469.nextObject ()))) {
                    macroValidPointer (operand_236469) ;
                    var_cas_getIndexMethodSignature.addAssign_operation (operand_236469->mAttributType, var_cas_outPassingMode) ;
                  }
                }
                var_cas_mapReaderMethodMap.modifier_insertKey (inLexique, var_cas_getIndexMethodName, var_cas_getIndexMethodSignature COMMA_SOURCE_FILE_AT_LINE (6257)) ;
              }
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      {
        GGS_typeSemanticAttributesMap::cEnumerator enumerator_236788 (var_cas_tableAttributs, true) ;
        const GGS_typeSemanticAttributesMap::cElement * operand_236788 = NULL ;
        while (((operand_236788 = enumerator_236788.nextObject ()))) {
          macroValidPointer (operand_236788) ;
          if ((operand_236788->mInfo.mHasSetter).isBuiltAndTrue ()) {
            GGS_string var_cas_modifierName = ((GGS_string ("set")).operator_concat (operand_236788->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6263)).reader_stringByCapitalizingFirstCharacter (inLexique COMMA_SOURCE_FILE_AT_LINE (6263)))).operator_concat (GGS_string ("ForKey")) ;
            GGS_L_EXsignature  var_cas_modifierSignature = GGS_L_EXsignature ::constructor_emptyList () ;
            var_cas_modifierSignature.addAssign_operation (operand_236788->mInfo.mAttributType, var_cas_inPassingMode) ;
            var_cas_modifierSignature.addAssign_operation (GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE), var_cas_inPassingMode) ;
            var_cas_mapModifierMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_modifierName, GGS_location (inLexique) COMMA_HERE), var_cas_modifierSignature COMMA_SOURCE_FILE_AT_LINE (6267)) ;
          }
        }
      }
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasMapType ::constructor_new (inLexique, var_cas_mapTypeName, var_cas_listeTousAttributsSemantiques, var_cas_tableMethodesBloc, var_cas_mapModifierMethodMap, var_cas_mapReaderMethodMap COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (6279)) ;
      GGS_TypeModel  var_cas_type = GGS_MapModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_mapTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (6281)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_5684_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_63 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      { bool syntaxRepeat_64 = true ;
        while (syntaxRepeat_64) {
          switch (select_repeat_semantics_parser_64 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_ex_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_block) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_64 = false ;
              break ;
          }
        }
      }
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    case 3 : {
      switch (select_semantics_parser_65 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      { bool syntaxRepeat_66 = true ;
        while (syntaxRepeat_66) {
          switch (select_repeat_semantics_parser_66 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_remove) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_insert) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              switch (select_semantics_parser_67 (inLexique)) {
                case 1 : {
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_search) COMMA_HERE) ;
              nt_map_method_parse (inLexique) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_66 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'ex_map_method'              *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6288_20_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_nomMethode,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomMethode) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_ex_map_method_semantics_parser_6288_20_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'map_method'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6300_17_ (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_methodName,
                                GGS_lstring  &var_cas_getIndexMethodName,
                                GGS_lstring  &var_cas_outMessage) {
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      var_cas_getIndexMethodName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_getIndexMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_map_method_semantics_parser_6300_17_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  switch (select_semantics_parser_68 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_message) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6323_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6349))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6349))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6349)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6350)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_240192 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_240192.isBuilt ()) {
    temp_240192 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6353)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6354)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6354)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6355)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6358)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_240661 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_240661 = NULL ;
    while (((operand_240661 = enumerator_240661.nextObject ()))) {
      macroValidPointer (operand_240661) ;
      GGS_string var_cas_keyClassMethod = ((operand_240661->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6361))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6361))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6362)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6362))).isBuiltAndTrue ()) {
        var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_240661->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6365)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6367)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6378)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6323_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6406))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6406))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6406)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6407)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6407)) COMMA_SOURCE_FILE_AT_LINE (6407))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6408)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6323_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6419_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6451))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6451))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6451)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6452)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_244501 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_244501.isBuilt ()) {
    temp_244501 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6455)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6456)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6456)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6457)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6460)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_245095 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_245095 = NULL ;
      while (((operand_245095 = enumerator_245095.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_245095) ;
        GGS_string var_cas_keyClassMethod = ((operand_245095->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6465))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6465))) ;
        var_cas_baseClassName = operand_245095->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6466)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6467)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6467)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryMethodMap  temp_245495 = var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6471)) ;
          if (temp_245495.isBuilt ()) {
            temp_245495 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (6471)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (6472)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden method is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6483)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_246113 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_246113 = NULL ;
      while (((operand_246113 = enumerator_246113.nextObject ()))) {
        macroValidPointer (operand_246113) ;
        GGS_string var_cas_keyClassMethod = ((operand_246113->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6486))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6486))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6487)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6487))).isBuiltAndTrue ()) {
          var_cas_methodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this method is already defined for super class @")).operator_concat (operand_246113->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6490)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6492)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_246570 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6495)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_246570 = NULL ;
    while (((operand_246570 = enumerator_246570.nextObject ()))) {
      macroValidPointer (operand_246570) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6497)), operand_246570->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6498)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_246570->mAttributeName, operand_246570->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6502)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6505)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6505)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryMethodToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_methodName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6527)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6419_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_methodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6561))).operator_concat (GGS_string (":"))).operator_concat (var_cas_methodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6561))), var_cas_methodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6561)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryMethodMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6562)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6562)) COMMA_SOURCE_FILE_AT_LINE (6562))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryMethodMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6563)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6419_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_69 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6579_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6609)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6609)) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_251007 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_251007.isBuilt ()) {
    temp_251007 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6611)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6612)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6612)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6614))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6614))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6614)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6615)) ;
  const GGS_M_semanticsEntitiesForUse  temp_251524 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_251524.isBuilt ()) {
    temp_251524 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6617)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6618)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6618)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6619)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6622)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_251993 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_251993 = NULL ;
    while (((operand_251993 = enumerator_251993.nextObject ()))) {
      macroValidPointer (operand_251993) ;
      GGS_string var_cas_keyClassMethod = ((operand_251993->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6625))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6625))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6626)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6626))).isBuiltAndTrue ()) {
        var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_251993->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6629)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6631)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6642)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6579_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_253899 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_253899.isBuilt ()) {
    temp_253899 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6677)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6678)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6678)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6680))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6680))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6680)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6681)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6681)) COMMA_SOURCE_FILE_AT_LINE (6681))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6682)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6579_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6693_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_256188 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_256188.isBuilt ()) {
    temp_256188 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6729)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6730)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6730)) ;
  GGS_lstring  var_cas_returnedVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_returnedCppVarName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6733)), var_cas_returnedVariableName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6733)) COMMA_HERE) ;
  var_cas_methodLocalVariablesMap.modifier_insertOutArgument (inLexique, var_cas_returnedVariableName, var_cas_returnedType, var_cas_returnedCppVarName COMMA_SOURCE_FILE_AT_LINE (6734)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6736))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6736))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6736)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6737)) ;
  const GGS_M_semanticsEntitiesForUse  temp_257058 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_257058.isBuilt ()) {
    temp_257058 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6739)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6740)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6740)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6741)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6744)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_257652 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_257652 = NULL ;
      while (((operand_257652 = enumerator_257652.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_257652) ;
        GGS_string var_cas_keyClassMethod = ((operand_257652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6749))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6749))) ;
        var_cas_baseClassName = operand_257652->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6750)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6751)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6751)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          GGS_AC_galgasType  var_cas_returnedTypePreviousDeclaration ;
          const GGS_EXcategoryReaderMap  temp_258109 = var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6756)) ;
          if (temp_258109.isBuilt ()) {
            temp_258109 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration, var_cas_returnedTypePreviousDeclaration COMMA_SOURCE_FILE_AT_LINE (6756)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6765)) COMMA_SOURCE_FILE_AT_LINE (6762)) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  var_cas_returnedType,  var_cas_returnedTypePreviousDeclaration,  var_cas_returnedVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6770)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (6767)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden reader is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6779)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_259013 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_259013 = NULL ;
      while (((operand_259013 = enumerator_259013.nextObject ()))) {
        macroValidPointer (operand_259013) ;
        GGS_string var_cas_keyClassMethod = ((operand_259013->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6782))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6782))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6783)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6783))).isBuiltAndTrue ()) {
          var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this reader is already defined for super class @")).operator_concat (operand_259013->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6786)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6788)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_259470 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (6791)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_259470 = NULL ;
    while (((operand_259470 = enumerator_259470.nextObject ()))) {
      macroValidPointer (operand_259470) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6793)), operand_259470->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6794)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_259470->mAttributeName, operand_259470->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (6798)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6801)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (6801)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
  nt_semantic_instructions_list_ (inLexique, var_cas_tableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_methodLocalVariablesMap, var_cas_instructionList, var_cas_ioSemanticContext) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryReaderToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_readerName, var_cas_listeTypeEtNomsArguments, var_cas_instructionList, var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6823)), var_cas_returnedType, var_cas_returnedCppVarName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6693_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_readerName ;
  inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_returnedTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_261963 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_261963.isBuilt ()) {
    temp_261963 (HERE)->method_searchKey (inLexique, var_cas_returnedTypeName, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6864)) ;
  }
  GGS_AC_galgasType  var_cas_returnedType = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6865)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6865)) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6867))).operator_concat (GGS_string (":"))).operator_concat (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6867))), var_cas_readerName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6867)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6868)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6868)) COMMA_SOURCE_FILE_AT_LINE (6868))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryReaderMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes, var_cas_returnedType COMMA_SOURCE_FILE_AT_LINE (6869)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6693_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_70 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  nt_semantic_instructions_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_beginning_by_abstract'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6885_50_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6912))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6912))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6912)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6913)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_264422 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_264422.isBuilt ()) {
    temp_264422 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (6916)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6917)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (6917)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (6918)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6921)) ;
  {
    GGS_typeSuperClassesMap::cEnumerator enumerator_264891 (var_cas_ancestorClassesMap, true) ;
    const GGS_typeSuperClassesMap::cElement * operand_264891 = NULL ;
    while (((operand_264891 = enumerator_264891.nextObject ()))) {
      macroValidPointer (operand_264891) ;
      GGS_string var_cas_keyClassMethod = ((operand_264891->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6924))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6924))) ;
      if ((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6925)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (6925))).isBuiltAndTrue ()) {
        var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_264891->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (6928)) ;
      }
    }
  }
  var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6930)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, GGS_templateInstructionList ::constructor_emptyList (), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6940)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6885_50_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_abstractMethod (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6969))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6969))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (6969)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (6970)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (6970)) COMMA_SOURCE_FILE_AT_LINE (6970))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (6971)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_beginning_by_abstract_semantics_parser_6885_50_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6982_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7015))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7015))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7015)) COMMA_HERE) ;
  var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7016)) ;
  GGS_AC_semanticsEntity  var_cas_theEntity ;
  const GGS_M_semanticsEntitiesForUse  temp_268879 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_268879.isBuilt ()) {
    temp_268879 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_theEntity COMMA_SOURCE_FILE_AT_LINE (7019)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_theEntity.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (7020)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7020)) ;
  GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (7021)) ;
  GGS_string var_cas_baseClassName ;
  GGS_typeSuperClassesMap  var_cas_ancestorClassesMap = var_cas_classType.reader_mAncestorClassesMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7024)) ;
  if (((var_cas_categoryMethodKind).operator_isEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
    var_cas_baseClassName = GGS_string ("") ;
    GGS_bool var_cas_found = GGS_bool (false) ;
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_269473 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_269473 = NULL ;
      while (((operand_269473 = enumerator_269473.nextObject ()))
          && ((var_cas_found).operator_not ().isBuiltAndTrue ())) {
        macroValidPointer (operand_269473) ;
        GGS_string var_cas_keyClassMethod = ((operand_269473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7029))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7029))) ;
        var_cas_baseClassName = operand_269473->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7030)) ;
        var_cas_found = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7031)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (7031)) ;
        if ((var_cas_found).isBuiltAndTrue ()) {
          GGS_categoryMethodKind var_cas_categoryMethodKind ;
          GGS_L_EXsignature  var_cas_listeDeTypesPrecedenteDeclaration ;
          const GGS_EXcategoryTemplateMap  temp_269879 = var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7035)) ;
          if (temp_269879.isBuilt ()) {
            temp_269879 (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_keyClassMethod, GGS_location (inLexique) COMMA_HERE), var_cas_categoryMethodKind, var_cas_listeDeTypesPrecedenteDeclaration COMMA_SOURCE_FILE_AT_LINE (7035)) ;
          }
          ::routine_verifierCompatibiliteSignatures (inLexique,  var_cas_listeDeTypesPrecedenteDeclaration,  var_cas_listeDeTypes,  var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7043)) COMMA_SOURCE_FILE_AT_LINE (7040)) ;
          var_cas_found = (var_cas_categoryMethodKind).operator_isNotEqual (GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE)) ;
        }
      }
    }
    if (((var_cas_found).operator_not ()).isBuiltAndTrue ()) {
      var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this overriden template is not defined in any super class of @")).operator_concat (var_cas_className)).operator_concat (GGS_string (": you should remove the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (7051)) ;
    }
  }else{
    {
      GGS_typeSuperClassesMap::cEnumerator enumerator_270562 (var_cas_ancestorClassesMap, true) ;
      const GGS_typeSuperClassesMap::cElement * operand_270562 = NULL ;
      while (((operand_270562 = enumerator_270562.nextObject ()))) {
        macroValidPointer (operand_270562) ;
        GGS_string var_cas_keyClassMethod = ((operand_270562->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7054))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7054))) ;
        if ((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7055)).reader_hasKey (inLexique, var_cas_keyClassMethod COMMA_SOURCE_FILE_AT_LINE (7055))).isBuiltAndTrue ()) {
          var_cas_templateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this template is already defined for super class @")).operator_concat (operand_270562->mKey)).operator_concat (GGS_string (": you should use the 'override' key word")) COMMA_SOURCE_FILE_AT_LINE (7058)) ;
        }
      }
    }
    var_cas_baseClassName = var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7060)) ;
  }
  {
    GGS_typeListeAttributsSemantiques::cEnumerator enumerator_271027 (var_cas_classType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7063)), true) ;
    const GGS_typeListeAttributsSemantiques::cElement * operand_271027 = NULL ;
    while (((operand_271027 = enumerator_271027.nextObject ()))) {
      macroValidPointer (operand_271027) ;
      GGS_typeCplusPlusName  var_cas_cppName = GGS_typeOperandName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7065)), operand_271027->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7066)), GGS_bool (false), GGS_bool (false) COMMA_HERE) ;
      var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, operand_271027->mAttributeName, operand_271027->mAttributType, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7070)) ;
    }
  }
  var_cas_methodLocalVariablesMap.modifier_insertUsedConstInArgument (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_HERE), var_cas_classType, GGS_typeCppThisInCategoryName ::constructor_new (inLexique, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7073)) COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7073)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  GGS_string var_cas_templateString = GGS_string ("") ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        GGS_lstring  var_cas_s ;
        inLexique.assignFromAttribute_tokenString (var_cas_s) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_templateString.dotAssign_operation (var_cas_s.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7079))) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  GGS_templateInstructionList  var_cas_templateInstructionList ;
  galgasTemplateGrammar::_performSourceStringParsing_ (inLexique,
                                  NULL,
                                  var_cas_templateString,
                                  var_cas_methodLocalVariablesMap,
                                  var_cas_ioSemanticContext,
                                  var_cas_ioComponentSemanticsEntitiesMap,
                                  var_cas_inOptionsComponentsMapForUse,
                                  var_cas_templateInstructionList
                                  COMMA_SOURCE_FILE_AT_LINE (7083)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (GGS_categoryTemplateToImplement ::constructor_new (inLexique, var_cas_categoryMethodKind, var_cas_baseClassName, var_cas_className, var_cas_templateName, var_cas_listeTypeEtNomsArguments, var_cas_templateInstructionList, var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7100)) COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6982_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  GGS_categoryMethodKind var_cas_categoryMethodKind ;
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_baseMethod (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      var_cas_categoryMethodKind = GGS_categoryMethodKind::constructor_overridingMethod (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_templateName ;
  inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_methodLocalVariablesMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signatureForGrammarComponent ;
  nt_formal_input_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_methodLocalVariablesMap, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
  GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_className.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7135))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7135))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7135)) COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (7136)).reader_hasKey (inLexique, var_cas_key.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7136)) COMMA_SOURCE_FILE_AT_LINE (7136))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mCategoryTemplateMap.modifier_insertKey (inLexique, var_cas_key, var_cas_categoryMethodKind, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (7137)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_6982_28_parse (galgas_scanner & inLexique) {
  switch (select_semantics_parser_71 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_override) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_input_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_72 = true ;
    while (syntaxRepeat_72) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_72 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_72 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7156_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7170)) COMMA_SOURCE_FILE_AT_LINE (7170))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7170)) COMMA_SOURCE_FILE_AT_LINE (7170)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7172)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_275774 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_275774 = NULL ;
        while (((operand_275774 = enumerator_275774.nextObject ()))) {
          macroValidPointer (operand_275774) ;
          var_cas_extractSignature.addAssign_operation (operand_275774->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_275774->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7204)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_listTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7156_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7225)) COMMA_SOURCE_FILE_AT_LINE (7225))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7225)) COMMA_SOURCE_FILE_AT_LINE (7225)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7227)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      GGS_L_EXsignature  var_cas_inputSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_277964 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_277964 = NULL ;
        while (((operand_277964 = enumerator_277964.nextObject ()))) {
          macroValidPointer (operand_277964) ;
          var_cas_extractSignature.addAssign_operation (operand_277964->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
          var_cas_inputSignature.addAssign_operation (operand_277964->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentIn (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature, var_cas_inputSignature COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7259)) ;
      GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7261)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7156_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_73 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7271_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7285)) COMMA_SOURCE_FILE_AT_LINE (7285))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7285)) COMMA_SOURCE_FILE_AT_LINE (7285)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7287)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_280523 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_280523 = NULL ;
        while (((operand_280523 = enumerator_280523.nextObject ()))) {
          macroValidPointer (operand_280523) ;
          var_cas_extractSignature.addAssign_operation (operand_280523->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_EXsortDescriptorList  var_cas_sortDescriptorList = GGS_EXsortDescriptorList ::constructor_emptyList () ;
      GGS_stringset  var_cas_usedSortedAttributes = GGS_stringset ::constructor_emptySet () ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            GGS_lstring  var_cas_sortAttribute ;
            inLexique.assignFromAttribute_tokenString (var_cas_sortAttribute) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            if ((var_cas_usedSortedAttributes.reader_hasKey (inLexique, var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7322)) COMMA_SOURCE_FILE_AT_LINE (7322))).isBuiltAndTrue ()) {
              var_cas_sortAttribute.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this attribute is already used in sort list") COMMA_SOURCE_FILE_AT_LINE (7324)) ;
            }else{
              GGS_AC_galgasType  var_cas_definitionType ;
              GGS_bool automatic_var_34 ;
              GGS_bool automatic_var_35 ;
              const GGS_typeSemanticAttributesMap  temp_281340 = var_cas_tableAttributs ;
              if (temp_281340.isBuilt ()) {
                temp_281340 (HERE)->method_searchKey (inLexique, var_cas_sortAttribute, var_cas_definitionType, automatic_var_34, automatic_var_35 COMMA_SOURCE_FILE_AT_LINE (7326)) ;
              }
              const GGS_AC_galgasType  temp_281444 = var_cas_definitionType ;
              if (temp_281444.isBuilt ()) {
                temp_281444 (HERE)->method_acceptToBeSortKeyInSortedListDefinition (inLexique, var_cas_sortAttribute COMMA_SOURCE_FILE_AT_LINE (7327)) ;
              }
              var_cas_usedSortedAttributes.addAssign_operation (var_cas_sortAttribute.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7328))) ;
            }
            GGS_bool var_cas_ascendingOrder ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (true) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                var_cas_ascendingOrder = GGS_bool (false) ;
                } break ;
              default :
                break ;
            }
            var_cas_sortDescriptorList.addAssign_operation (var_cas_sortAttribute, var_cas_ascendingOrder) ;
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7344)) ;
      GGS_typeEntityToGenerate  var_cas_def = GGS_C_sortedListTypeToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_sortDescriptorList COMMA_HERE) ;
      var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7271_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      if ((((var_cas_tableEnAvant.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7366)) COMMA_SOURCE_FILE_AT_LINE (7366))).operator_or (var_cas_ioComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_listTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7366)) COMMA_SOURCE_FILE_AT_LINE (7366)))).operator_not ()).isBuiltAndTrue ()) {
        GGS_AC_galgasType  var_cas_t = GGS_typeGalgasUndefinedSortedListType ::constructor_new (inLexique, var_cas_listTypeName COMMA_HERE) ;
        var_cas_tableEnAvant.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7368)) ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
      GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
      nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
      GGS_L_EXsignature  var_cas_extractSignature = GGS_L_EXsignature ::constructor_emptyList () ;
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_283537 (var_cas_listeTousAttributsSemantiques, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_283537 = NULL ;
        while (((operand_283537 = enumerator_283537.nextObject ()))) {
          macroValidPointer (operand_283537) ;
          var_cas_extractSignature.addAssign_operation (operand_283537->mAttributType, GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE)) ;
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_galgasType  var_cas_c = GGS_typeGalgasSortedListType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques, var_cas_extractSignature COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
      var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7410)) ;
      GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
      var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7412)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7271_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_sortedlist) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  switch (select_semantics_parser_74 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      nt_attributes_definition_list_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
      { bool syntaxRepeat_75 = true ;
        while (syntaxRepeat_75) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_semantics_parser_76 (inLexique)) {
              case 1 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3C_) COMMA_HERE) ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3E_) COMMA_HERE) ;
                } break ;
              default :
                break ;
            }
          switch (select_repeat_semantics_parser_75 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_75 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'attributes_definition_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7422_33_ (galgas_scanner & inLexique,
                                const GGS_typeTableEnAvant  var_cas_inTableEnAvant,
                                GGS_typeListModel  &var_cas_outAttributeListModel,
                                GGS_typeSemanticAttributesMap  &var_cas_tableAttributs,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeTousAttributsSemantiques,
                                GGS_typeListeAttributsSemantiques  &var_cas_listeAttributsSemantiquesCourants,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap) {
  var_cas_listeAttributsSemantiquesCourants = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  var_cas_outAttributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_77 = true ;
    while (syntaxRepeat_77) {
      switch (select_repeat_semantics_parser_77 (inLexique)) {
        case 2 : {
          GGS_AC_galgasType  var_cas_definitionType ;
          GGS_lstring  var_cas_typeName ;
          nt_type_parsing_ (inLexique, var_cas_inTableEnAvant, var_cas_ioComponentSemanticsEntitiesMap, var_cas_definitionType, var_cas_typeName) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_bool var_cas_hasSetter = GGS_bool (false) ;
          GGS_bool var_cas_hasGetter = GGS_bool (true) ;
          switch (select_semantics_parser_78 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_79 = true ;
                while (syntaxRepeat_79) {
                    GGS_lstring  var_cas_directiveName ;
                    inLexique.assignFromAttribute_tokenString (var_cas_directiveName) ;
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                    if (((var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7454))).operator_isEqual (GGS_string ("nogetter"))).isBuiltAndTrue ()) {
                      if (((var_cas_hasGetter).operator_not ()).isBuiltAndTrue ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'nogetter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7457)) ;
                      }
                      var_cas_hasGetter = GGS_bool (false) ;
                    }else if (((var_cas_directiveName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7459))).operator_isEqual (GGS_string ("setter"))).isBuiltAndTrue ()) {
                      if ((var_cas_hasSetter).isBuiltAndTrue ()) {
                        var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the 'setter' feature is already set") COMMA_SOURCE_FILE_AT_LINE (7462)) ;
                      }
                      var_cas_hasSetter = GGS_bool (true) ;
                    }else{
                      var_cas_directiveName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only 'setter' or 'nogetter' feature names are allowed here") COMMA_SOURCE_FILE_AT_LINE (7466)) ;
                    }
                  switch (select_repeat_semantics_parser_79 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_79 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          var_cas_tableAttributs.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_definitionType, var_cas_hasSetter, var_cas_hasGetter COMMA_SOURCE_FILE_AT_LINE (7471)) ;
          var_cas_listeTousAttributsSemantiques.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_listeAttributsSemantiquesCourants.addAssign_operation (var_cas_definitionType, var_cas_attributeName) ;
          var_cas_outAttributeListModel.addAssign_operation (var_cas_typeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_77 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_attributes_definition_list_semantics_parser_7422_33_parse (galgas_scanner & inLexique) {
  { bool syntaxRepeat_77 = true ;
    while (syntaxRepeat_77) {
      switch (select_repeat_semantics_parser_77 (inLexique)) {
        case 2 : {
          nt_type_parsing_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_78 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_feature) COMMA_HERE) ;
              { bool syntaxRepeat_79 = true ;
                while (syntaxRepeat_79) {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  switch (select_repeat_semantics_parser_79 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_79 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_77 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7485_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_287759 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_287759.isBuilt ()) {
    temp_287759 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7502)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7503)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7503)) ;
  GGS_typeGalgasListType  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7504)) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7510)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7512)) ;
  GGS_typeEntityToGenerate  var_cas_def = GGS_typeGalgasListmapToImplement ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7516)) COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7485_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  GGS_lstring  var_cas_listmapTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listmapTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_289040 = var_cas_ioComponentSemanticsEntitiesMap ;
  if (temp_289040.isBuilt ()) {
    temp_289040 (HERE)->method_searchKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7536)) ;
  }
  GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7537)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (7537)) ;
  GGS_typeGalgasListType  var_cas_listType = GGS_typeGalgasListType::castFrom (inLexique, var_cas_type.getPtr (), true, var_cas_listTypeName COMMA_SOURCE_FILE_AT_LINE (7538)) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasListmapType ::constructor_new (inLexique, var_cas_listmapTypeName, var_cas_listTypeName, var_cas_listType, var_cas_listType.reader_mAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (7544)) COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listmapTypeName, GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (7546)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7485_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_listmap) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__28_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__29_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7555_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7588)) ;
  GGS_typeEntityToGenerate  var_cas_def = GGS_C_structToImplement ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_def) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7555_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  GGS_lstring  var_cas_listTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeListModel  var_cas_attributeListModel = GGS_typeListModel ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeTousAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiquesCourants ;
  GGS_typeSemanticAttributesMap  var_cas_tableAttributs = GGS_typeSemanticAttributesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  nt_attributes_definition_list_ (inLexique, var_cas_tableEnAvant, var_cas_attributeListModel, var_cas_tableAttributs, var_cas_listeTousAttributsSemantiques, var_cas_listeAttributsSemantiquesCourants, var_cas_ioComponentSemanticsEntitiesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasStructType ::constructor_new (inLexique, var_cas_listTypeName, var_cas_listeTousAttributsSemantiques COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (7627)) ;
  GGS_TypeModel  var_cas_t = GGS_ListModel ::constructor_new (inLexique, var_cas_attributeListModel COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_listTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (7629)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7555_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_struct) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  nt_attributes_definition_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "recursivelyEnumerateDirectories"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyEnumerateDirectories (C_Compiler & inLexique,
                                const GGS_string  var_cas_inAbsoluteSourcePath,
                                const GGS_string  var_cas_inPathInWrapper,
                                const GGS_wrapperExtensionMap   var_cas_inExtensionMap,
                                GGS_wrapperFileSortedList  & var_cas_outWrapperFileSortedList,
                                GGS_wrapperDirectorySortedList  & var_cas_outWrapperDirectorySortedList,
                                GGS_uint  & var_cas_ioWrapperFileIndex,
                                GGS_uint  & var_cas_ioWrapperDirectoryIndex,
                                GGS_M_regularFiles  & var_cas_ioRegularFileMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyEnumerateDirectories at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_uint  var_cas_currentDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
  var_cas_ioWrapperDirectoryIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7649)) ;
  GGS_stringlist  var_cas_files = var_cas_inAbsoluteSourcePath.reader_regularFiles (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7651)) ;
  var_cas_outWrapperFileSortedList = GGS_wrapperFileSortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_293776 (var_cas_files, true) ;
    const GGS_stringlist::cElement * operand_293776 = NULL ;
    while (((operand_293776 = enumerator_293776.nextObject ()))) {
      macroValidPointer (operand_293776) ;
      if ((var_cas_inExtensionMap.reader_hasKey (inLexique, operand_293776->mValue.reader_pathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (7654)) COMMA_SOURCE_FILE_AT_LINE (7654))).isBuiltAndTrue ()) {
        GGS_string var_cas_absoluteFilePath = ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_293776->mValue) ;
        var_cas_outWrapperFileSortedList.addAssign_operation (operand_293776->mValue, var_cas_absoluteFilePath, var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex) ;
        var_cas_ioRegularFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (var_cas_inPathInWrapper).operator_concat (operand_293776->mValue), GGS_location (inLexique) COMMA_HERE), var_cas_currentDirectoryIndex, var_cas_ioWrapperFileIndex COMMA_SOURCE_FILE_AT_LINE (7663)) ;
        var_cas_ioWrapperFileIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (7668)) ;
      }
    }
  }
  GGS_stringlist  var_cas_directories = var_cas_inAbsoluteSourcePath.reader_directories (inLexique, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (7672)) ;
  var_cas_outWrapperDirectorySortedList = GGS_wrapperDirectorySortedList ::constructor_emptySortedList () ;
  {
    GGS_stringlist::cEnumerator enumerator_294530 (var_cas_directories, true) ;
    const GGS_stringlist::cElement * operand_294530 = NULL ;
    while (((operand_294530 = enumerator_294530.nextObject ()))) {
      macroValidPointer (operand_294530) ;
      GGS_wrapperFileSortedList  var_cas_internalWrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_internalWrapperDirectorySortedList ;
      GGS_uint  var_cas_theDirectoryIndex = var_cas_ioWrapperDirectoryIndex ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  ((var_cas_inAbsoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (operand_294530->mValue),  ((var_cas_inPathInWrapper).operator_concat (operand_294530->mValue)).operator_concat (GGS_string ("/")),  var_cas_inExtensionMap,  var_cas_internalWrapperFileSortedList,  var_cas_internalWrapperDirectorySortedList,  var_cas_ioWrapperFileIndex,  var_cas_ioWrapperDirectoryIndex,  var_cas_ioRegularFileMap COMMA_SOURCE_FILE_AT_LINE (7678)) ;
      var_cas_outWrapperDirectorySortedList.addAssign_operation (operand_294530->mValue, var_cas_internalWrapperFileSortedList, var_cas_internalWrapperDirectorySortedList, var_cas_theDirectoryIndex) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyEnumerateDirectories\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7699_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7721)) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_string var_cas_absoluteSourcePath ;
  if (((var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7730))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
    var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7731)) ;
  }else{
    var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7733))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7733))) ;
  }
  if (((var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7735))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7737)) ;
  }else{
    GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
    GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
    GGS_uint  var_cas_wrapperFileIndex = GGS_uint (0U) ;
    GGS_uint  var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
    ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7743)) ;
    GGS_typeEntityToGenerate  var_cas_w = GGS_C_wrapperToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7756)), var_cas_extensionMap, var_cas_wrapperFileSortedList, var_cas_wrapperDirectorySortedList COMMA_HERE) ;
    var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_w) ;
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_lstring  var_cas_templateAbsolutePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_absoluteSourcePath).operator_concat (GGS_string ("/"))).operator_concat (var_cas_templatePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7776))), var_cas_templatePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7777)) COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_templateArgumentTypesList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_templateVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  GGS_bool var_cas_parameterIsUsed ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      var_cas_parameterIsUsed = GGS_bool (true) ;
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      var_cas_parameterIsUsed = GGS_bool (false) ;
                      } break ;
                    default :
                      break ;
                  }
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_cppName = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_parameterName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (7804)), var_cas_parameterName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7804)) COMMA_HERE) ;
                  var_cas_templateArgumentTypesList.addAssign_operation (var_cas_type_semantique, GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE), var_cas_cppName, GGS_bool (true), var_cas_parameterName) ;
                  if ((var_cas_parameterIsUsed).isBuiltAndTrue ()) {
                    var_cas_templateVariableMap.modifier_insertConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7807)) ;
                  }else{
                    var_cas_templateVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_parameterName, var_cas_type_semantique, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (7809)) ;
                  }
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7812)) ;
          GGS_templateInstructionList  var_cas_templateInstructionList ;
          const GGS_string _depExtension = GGS_string ("") ;
          const GGS_string _depPath = GGS_string ("") ;
          if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
            galgasTemplateGrammar::_performSourceFileParsing_ (inLexique,
                                          _depExtension.string (),
                                          _depPath.string (),
                                          NULL,
                                          var_cas_templateAbsolutePath,
                                          var_cas_templateVariableMap,
                                          var_cas_ioSemanticContext,
                                          var_cas_ioComponentSemanticsEntitiesMap,
                                          var_cas_inOptionsComponentsMapForUse,
                                          var_cas_templateInstructionList
                                          COMMA_SOURCE_FILE_AT_LINE (7814)) ;
          }
          var_cas_listeEntitesAengendrer.addAssign_operation (GGS_C_filewrapperTemplateToImplement ::constructor_new (inLexique, var_cas_wrapperName, var_cas_templateName, var_cas_templateArgumentTypesList, var_cas_templateInstructionList COMMA_HERE)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7830)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7699_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  GGS_lstring  var_cas_wrapperName ;
  inLexique.assignFromAttribute_tokenString (var_cas_wrapperName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  GGS_lstring  var_cas_sourcePath ;
  inLexique.assignFromAttribute_tokenString (var_cas_sourcePath) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_wrapperExtensionMap  var_cas_extensionMap = GGS_wrapperExtensionMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            GGS_lstring  var_cas_extension ;
            inLexique.assignFromAttribute_tokenString (var_cas_extension) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
            var_cas_extensionMap.modifier_insertKey (inLexique, var_cas_extension COMMA_SOURCE_FILE_AT_LINE (7854)) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_M_regularFiles  var_cas_regularFileMap = GGS_M_regularFiles ::constructor_emptyMap (inLexique COMMA_HERE) ;
  if (((var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7861)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7861)) COMMA_SOURCE_FILE_AT_LINE (7861))).operator_not ()).isBuiltAndTrue ()) {
    GGS_string var_cas_absoluteSourcePath ;
    if (((var_cas_sourcePath.ggs_string ().reader_firstCharacterOrNul (inLexique COMMA_SOURCE_FILE_AT_LINE (7864))).operator_isEqual (GGS_char (TO_UNICODE ('/')))).isBuiltAndTrue ()) {
      var_cas_absoluteSourcePath = var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7865)) ;
    }else{
      var_cas_absoluteSourcePath = ((GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (7867))).operator_concat (GGS_string ("/"))).operator_concat (var_cas_sourcePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7867))) ;
    }
    if (((var_cas_absoluteSourcePath.reader_directoryExists (inLexique COMMA_SOURCE_FILE_AT_LINE (7869))).operator_not ()).isBuiltAndTrue ()) {
      var_cas_sourcePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (var_cas_absoluteSourcePath)).operator_concat (GGS_string ("' directory does not exist")) COMMA_SOURCE_FILE_AT_LINE (7871)) ;
    }else{
      GGS_wrapperFileSortedList  var_cas_wrapperFileSortedList ;
      GGS_wrapperDirectorySortedList  var_cas_wrapperDirectorySortedList ;
      GGS_uint  var_cas_wrapperFileIndex = GGS_uint (0U) ;
      GGS_uint  var_cas_wrapperDirectoryIndex = GGS_uint (0U) ;
      ::routine_recursivelyEnumerateDirectories (inLexique,  var_cas_absoluteSourcePath,  GGS_string ("/"),  var_cas_extensionMap,  var_cas_wrapperFileSortedList,  var_cas_wrapperDirectorySortedList,  var_cas_wrapperFileIndex,  var_cas_wrapperDirectoryIndex,  var_cas_regularFileMap COMMA_SOURCE_FILE_AT_LINE (7877)) ;
    }
  }
  GGS_filewrapperTemplateMap  var_cas_templateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          GGS_lstring  var_cas_templateName ;
          inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_templatePath ;
          inLexique.assignFromAttribute_tokenString (var_cas_templatePath) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  var_cas_formalAttributeList.addAssign_operation (var_cas_type_semantique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          var_cas_templateMap.modifier_insertKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (7918)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  if (((var_cas_ioSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (7922)).reader_hasKey (inLexique, var_cas_wrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (7922)) COMMA_SOURCE_FILE_AT_LINE (7922))).operator_not ()).isBuiltAndTrue ()) {
    var_cas_ioSemanticContext.mFilewrappers.modifier_insertKey (inLexique, var_cas_wrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (7923)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7699_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_filewrapper) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  switch (select_semantics_parser_80 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      { bool syntaxRepeat_81 = true ;
        while (syntaxRepeat_81) {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          switch (select_repeat_semantics_parser_81 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_81 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_82 = true ;
    while (syntaxRepeat_82) {
      switch (select_repeat_semantics_parser_82 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_template) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          { bool syntaxRepeat_83 = true ;
            while (syntaxRepeat_83) {
              switch (select_repeat_semantics_parser_83 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  switch (select_semantics_parser_84 (inLexique)) {
                    case 1 : {
                      } break ;
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                      } break ;
                    default :
                      break ;
                  }
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_83 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_82 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7934_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeEntitesAengendrer, var_cas_inOptionsComponentsMapForUse, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7934_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &var_cas_tableNomRoutinesDeclarees,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &var_cas_tableRoutinesAimplementer,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_importSemantics (inLexique, var_cas_ioModelMap, var_cas_ioExternActionMap, var_cas_ioComponentSemanticsEntitiesMap, var_cas_tableNomRoutinesDeclarees, var_cas_tableEnAvant, var_cas_tableRoutinesAimplementer) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_7934_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_extern) COMMA_HERE) ;
  nt_semantics_declaration_begining_by_extern_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7978_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_modifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_constructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_constructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (8019)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_methodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signatureForGrammarComponent ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8039)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_methodName ;
              inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_L_signature  var_cas_signatureForGrammarComponent ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signatureForGrammarComponent) ;
              var_cas_modifiersMap.modifier_insertKey (inLexique, var_cas_methodName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8059)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              if ((var_cas_acceptAddAssignOperatorCall).isBuiltAndTrue ()) {
                var_cas_errorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (8080)) ;
              }else{
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  GGS_typeEntityToGenerate  var_cas_t = GGS_typeExternTypeToGenerate ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_t) ;
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_constructorsMap, var_cas_modifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8106)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7978_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  GGS_lstring  var_cas_externTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_externTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_EXmodifiersMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeTableMethodes  var_cas_readersInInstructionMap = GGS_typeTableMethodes ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_bool var_cas_acceptAddAssignOperatorCall = GGS_bool (false) ;
  GGS_typeListeAttributsSemantiques  var_cas_addAssignOperatorCallTypeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  GGS_M_externTypeConstructorMap  var_cas_EXconstructorsMap = GGS_M_externTypeConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListModel  var_cas_addAssignFormalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          GGS_lstring  var_cas_constructorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_constructorArgumentTypesList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
          GGS_typeListModel  var_cas_formalInputArgumentList = GGS_typeListModel ::constructor_emptyList () ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  GGS_AC_galgasType  var_cas_type_semantique ;
                  GGS_lstring  var_cas_galgasTypeName ;
                  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                  GGS_lstring  var_cas_parameterName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  var_cas_constructorArgumentTypesList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                  var_cas_formalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_EXconstructorsMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_constructorArgumentTypesList COMMA_SOURCE_FILE_AT_LINE (8155)) ;
          var_cas_constructorMap.modifier_insertKey (inLexique, var_cas_constructorName, var_cas_formalInputArgumentList COMMA_SOURCE_FILE_AT_LINE (8156)) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_listeDeTypes ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
          GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_L_signature  var_cas_signature ;
          nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          var_cas_readersInInstructionMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8176)) ;
          var_cas_readerMap.modifier_insertKey (inLexique, var_cas_readerName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8177)) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_modifierName ;
              inLexique.assignFromAttribute_tokenString (var_cas_modifierName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              GGS_L_EXsignature  var_cas_listeDeTypes ;
              GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
              GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
              GGS_L_signature  var_cas_signature ;
              nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
              var_cas_EXmodifiersMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_listeDeTypes COMMA_SOURCE_FILE_AT_LINE (8197)) ;
              var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_modifierName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (8198)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              if (((var_cas_addAssignFormalInputArgumentList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (8201))).operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'+=' operator is already defined") COMMA_SOURCE_FILE_AT_LINE (8203)) ;
              }else{
                var_cas_acceptAddAssignOperatorCall = GGS_bool (true) ;
              }
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      GGS_AC_galgasType  var_cas_type_semantique ;
                      GGS_lstring  var_cas_galgasTypeName ;
                      nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_type_semantique, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
                      GGS_lstring  var_cas_parameterName ;
                      inLexique.assignFromAttribute_tokenString (var_cas_parameterName) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      var_cas_addAssignOperatorCallTypeList.addAssign_operation (var_cas_type_semantique, var_cas_parameterName) ;
                      var_cas_addAssignFormalInputArgumentList.addAssign_operation (var_cas_galgasTypeName) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  GGS_AC_galgasType  var_cas_c = GGS_typeGalgasExternType ::constructor_new (inLexique, var_cas_externTypeName, var_cas_EXconstructorsMap, var_cas_EXmodifiersMap, var_cas_readersInInstructionMap, var_cas_acceptAddAssignOperatorCall, var_cas_addAssignOperatorCallTypeList COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_c COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (8235)) ;
  GGS_TypeModel  var_cas_t = GGS_ExternTypeModel ::constructor_new (inLexique, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_addAssignFormalInputArgumentList COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_externTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (8237)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_7978_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_85 = true ;
    while (syntaxRepeat_85) {
      switch (select_repeat_semantics_parser_85 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          { bool syntaxRepeat_86 = true ;
            while (syntaxRepeat_86) {
              switch (select_repeat_semantics_parser_86 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                  nt_formal_argument_type_parse (inLexique) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_86 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          nt_formal_arguments_list_parse (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          switch (select_semantics_parser_87 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              nt_formal_arguments_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2B__3D_) COMMA_HERE) ;
              { bool syntaxRepeat_88 = true ;
                while (syntaxRepeat_88) {
                  switch (select_repeat_semantics_parser_88 (inLexique)) {
                    case 2 : {
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_) COMMA_HERE) ;
                      nt_formal_argument_type_parse (inLexique) ;
                      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                      } break ;
                    default :
                      syntaxRepeat_88 = false ;
                      break ;
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_85 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8245_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8252)) COMMA_SOURCE_FILE_AT_LINE (8252))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_314239 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_314239.isBuilt ()) {
      temp_314239 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8254)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8255)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8255)) ;
  }else{
    const GGS_typeTableEnAvant  temp_314431 = var_cas_tableEnAvant ;
    if (temp_314431.isBuilt ()) {
      temp_314431 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8257)) ;
    }
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8245_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8245_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8267_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8275)) COMMA_SOURCE_FILE_AT_LINE (8275))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_315072 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_315072.isBuilt ()) {
      temp_315072 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8277)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8278)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8278)) ;
  }else{
    const GGS_typeTableEnAvant  temp_315264 = var_cas_tableEnAvant ;
    if (temp_315264.isBuilt ()) {
      temp_315264 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8280)) ;
    }
    GGS_typeGalgasUndefinedListType  var_cas_x = GGS_typeGalgasUndefinedListType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8281)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8267_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8267_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_list) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8292_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8300)) COMMA_SOURCE_FILE_AT_LINE (8300))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_316042 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_316042.isBuilt ()) {
      temp_316042 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8302)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8303)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8303)) ;
  }else{
    const GGS_typeTableEnAvant  temp_316234 = var_cas_tableEnAvant ;
    if (temp_316234.isBuilt ()) {
      temp_316234 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8305)) ;
    }
    GGS_typeGalgasUndefinedMapType  var_cas_x = GGS_typeGalgasUndefinedMapType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8306)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8292_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8292_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_map) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'formal_argument_type'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8317_27_ (galgas_scanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_AC_galgasType  &var_cas_type_semantique,
                                const GGS_typeTableEnAvant  var_cas_tableEnAvant,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  if ((var_cas_inComponentSemanticsEntitiesMap.reader_hasKey (inLexique, var_cas_outGalgasTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8326)) COMMA_SOURCE_FILE_AT_LINE (8326))).isBuiltAndTrue ()) {
    GGS_AC_semanticsEntity  var_cas_entite ;
    const GGS_M_semanticsEntitiesForUse  temp_317027 = var_cas_inComponentSemanticsEntitiesMap ;
    if (temp_317027.isBuilt ()) {
      temp_317027 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8328)) ;
    }
    var_cas_type_semantique = GGS_typeEntiteType::castFrom (inLexique, var_cas_entite.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8329)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (8329)) ;
  }else{
    const GGS_typeTableEnAvant  temp_317219 = var_cas_tableEnAvant ;
    if (temp_317219.isBuilt ()) {
      temp_317219 (HERE)->method_searchKey (inLexique, var_cas_outGalgasTypeName, var_cas_type_semantique COMMA_SOURCE_FILE_AT_LINE (8331)) ;
    }
    GGS_typeGalgasUndefinedClassType  var_cas_x = GGS_typeGalgasUndefinedClassType::castFrom (inLexique, var_cas_type_semantique.getPtr (), true, var_cas_outGalgasTypeName COMMA_SOURCE_FILE_AT_LINE (8332)) ;
  }
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8317_27_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_lstring  &var_cas_outGalgasTypeName) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_outGalgasTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_formal_argument_type_semantics_parser_8317_27_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_abstract) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_class) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8348_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_36 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_36) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8372)) ;
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeRoutineExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8348_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteRoutineExterne ::constructor_new (inLexique, var_cas_listeDeTypes COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8401)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8402)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8348_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'semantics_declaration_begining_by_extern'*
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8412_47_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_nomAction ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomAction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  automatic_var_37 ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, automatic_var_37) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_321366 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_321366 = NULL ;
    while (((operand_321366 = enumerator_321366.nextObject ()))) {
      macroValidPointer (operand_321366) ;
      if (((operand_321366->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_321366->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8441)) ;
      }else if (((operand_321366->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_321366->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8443)) ;
      }
    }
  }
  GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8457)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8457)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8458)) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_nomAction, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8461)) ;
  GGS_typeEntityToGenerate  var_cas_ea = GGS_typeFonctionExterneAengendrer ::constructor_new (inLexique, var_cas_nomAction, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_ea) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8412_47_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &/* var_cas_ioModelMap */,
                                GGS_ActionMap  &var_cas_ioExternActionMap,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &var_cas_tableEnAvant,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_listeDeTypes ;
  GGS_typeVariablesMap  var_cas_tableArgumentsMethode = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_typeListeTypesEtNomsArgMethode  var_cas_listeTypeEtNomsArguments ;
  GGS_L_signature  var_cas_signature ;
  nt_formal_arguments_list_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_listeDeTypes, var_cas_tableArgumentsMethode, var_cas_listeTypeEtNomsArguments, var_cas_tableEnAvant, var_cas_signature) ;
  GGS_L_EXsignature  var_cas_returnedTypes = GGS_L_EXsignature ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  {
    GGS_typeListeTypesEtNomsArgMethode::cEnumerator enumerator_323625 (var_cas_listeTypeEtNomsArguments, true) ;
    const GGS_typeListeTypesEtNomsArgMethode::cElement * operand_323625 = NULL ;
    while (((operand_323625 = enumerator_323625.nextObject ()))) {
      macroValidPointer (operand_323625) ;
      if (((operand_323625->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_323625->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8495)) ;
      }else if (((operand_323625->mFormalArgumentPassingMode).operator_isEqual (GGS_EXformalArgumentPassingMode::constructor_argumentInOut (inLexique COMMA_HERE))).isBuiltAndTrue ()) {
        operand_323625->mParameterName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("for a function only input parameters (\?) and constant input parameters (\?\?) can be used.") COMMA_SOURCE_FILE_AT_LINE (8497)) ;
      }
    }
  }
  GGS_EXformalArgumentPassingMode var_cas_passingMode = GGS_EXformalArgumentPassingMode::constructor_argumentOut (inLexique COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_returnedType ;
  GGS_lstring  var_cas_galgasTypeName ;
  nt_formal_argument_type_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_returnedType, var_cas_tableEnAvant, var_cas_galgasTypeName) ;
  GGS_lstring  var_cas_nomArgument ;
  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8511)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8511)) COMMA_HERE) ;
  var_cas_tableArgumentsMethode.modifier_insertOutArgument (inLexique, var_cas_nomArgument, var_cas_returnedType, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8512)) ;
  GGS_AC_semanticsEntity  var_cas_entite = GGS_typeEntiteFonctionExterne ::constructor_new (inLexique, var_cas_listeDeTypes, var_cas_returnedType COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (8515)) ;
  var_cas_ioExternActionMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_signature, GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (8516)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_begining_by_extern_semantics_parser_8412_47_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  nt_formal_arguments_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
  nt_formal_argument_type_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'semantics_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8526_28_ (galgas_scanner & inLexique,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeEntitiesToGenerateList  &var_cas_listeEntitesAengendrer,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8553)) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_enumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8580))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8582)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8589)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8589)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8591)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8595)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8595)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8597)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_38 ;
                const GGS_enumConstantMap  temp_328155 = var_cas_constantMap ;
                if (temp_328155.isBuilt ()) {
                  temp_328155 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_38 COMMA_SOURCE_FILE_AT_LINE (8607)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_39 ;
                const GGS_enumConstantMap  temp_328348 = var_cas_constantMap ;
                if (temp_328348.isBuilt ()) {
                  temp_328348 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_39 COMMA_SOURCE_FILE_AT_LINE (8612)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_40 ;
                const GGS_enumConstantMap  temp_328547 = var_cas_constantMap ;
                if (temp_328547.isBuilt ()) {
                  temp_328547 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_40 COMMA_SOURCE_FILE_AT_LINE (8617)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8649)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8663))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8665)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8672)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8672)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8674)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8678)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8678)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8680)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_41 ;
                const GGS_enumConstantMap  temp_331194 = var_cas_constantMap ;
                if (temp_331194.isBuilt ()) {
                  temp_331194 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_41 COMMA_SOURCE_FILE_AT_LINE (8690)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8691)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_42 ;
                const GGS_enumConstantMap  temp_331367 = var_cas_constantMap ;
                if (temp_331367.isBuilt ()) {
                  temp_331367 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_42 COMMA_SOURCE_FILE_AT_LINE (8695)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_332100 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_332100 = NULL ;
            while (((operand_332100 = enumerator_332100.nextObject ()))) {
              macroValidPointer (operand_332100) ;
              if (((var_cas_definedSourceMap.reader_hasKey (inLexique, operand_332100->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8721)) COMMA_SOURCE_FILE_AT_LINE (8721))).operator_not ()).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_332100->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8722)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8723)) ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8726)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8740))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8742)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8749)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8749)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8751)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8755)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8755)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8757)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_43 ;
                const GGS_enumConstantMap  temp_334135 = var_cas_constantMap ;
                if (temp_334135.isBuilt ()) {
                  temp_334135 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_43 COMMA_SOURCE_FILE_AT_LINE (8767)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8768)) ;
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_ (inLexique, var_cas_ioComponentSemanticsEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioSemanticContext, var_cas_localVariableMap, var_cas_instructionList) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          {
            GGS_enumConstantMap::cEnumerator enumerator_334907 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_334907 = NULL ;
            while (((operand_334907 = enumerator_334907.nextObject ()))) {
              macroValidPointer (operand_334907) ;
              if (((var_cas_definedSourceMap.reader_hasKey (inLexique, operand_334907->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8794)) COMMA_SOURCE_FILE_AT_LINE (8794))).operator_not ()).isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("The '")).operator_concat (operand_334907->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8795)))).operator_concat (GGS_string ("' is not handled")) COMMA_SOURCE_FILE_AT_LINE (8796)) ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8799)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          GGS_typeEnumCstMessageStringMap  var_cas_cstMessageStringMap = GGS_typeEnumCstMessageStringMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                GGS_lstring  var_cas_cstName ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_cstString ;
                inLexique.assignFromAttribute_tokenString (var_cas_cstString) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                var_cas_cstMessageStringMap.modifier_insertKey (inLexique, var_cas_cstName, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8813)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          GGS_lstringlist  var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          {
            GGS_enumConstantMap::cEnumerator enumerator_335782 (var_cas_constantMap, true) ;
            const GGS_enumConstantMap::cElement * operand_335782 = NULL ;
            while (((operand_335782 = enumerator_335782.nextObject ()))) {
              macroValidPointer (operand_335782) ;
              GGS_lstring  var_cas_name = GGS_lstring ::constructor_new (inLexique, operand_335782->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8823)), GGS_location (inLexique) COMMA_HERE) ;
              GGS_lstring  var_cas_cstString ;
              const GGS_typeEnumCstMessageStringMap  temp_335944 = var_cas_cstMessageStringMap ;
              if (temp_335944.isBuilt ()) {
                temp_335944 (HERE)->method_searchKey (inLexique, var_cas_name, var_cas_cstString COMMA_SOURCE_FILE_AT_LINE (8825)) ;
              }
              var_cas_messageStringList.addAssign_operation (var_cas_cstString) ;
            }
          }
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (8829)) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_typeEntityToGenerate  var_cas_e = GGS_enumGalgasType ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  var_cas_listeEntitesAengendrer.addAssign_operation (var_cas_e) ;
  GGS_AC_galgasType  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_enumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_ee = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_ee COMMA_SOURCE_FILE_AT_LINE (8853)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8526_28_importSemantics (galgas_scanner & inLexique,
                                GGS_ModelMap  &var_cas_ioModelMap,
                                GGS_ActionMap  &/* var_cas_ioExternActionMap */,
                                GGS_M_semanticsEntitiesForUse  &var_cas_ioComponentSemanticsEntitiesMap,
                                GGS_typeTableNomRoutinesDeclarees  &/* var_cas_tableNomRoutinesDeclarees */,
                                GGS_typeTableEnAvant  &/* var_cas_tableEnAvant */,
                                GGS_typeTableRoutinesAimplementer  &/* var_cas_tableRoutinesAimplementer */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  GGS_lstring  var_cas_enumTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_enumConstantMap  var_cas_constantMap = GGS_enumConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        GGS_bool var_cas_hasConstructor ;
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            var_cas_hasConstructor = GGS_bool (true) ;
            } break ;
          case 2 : {
            var_cas_hasConstructor = GGS_bool (false) ;
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
              var_cas_constantMap.modifier_insertKey (inLexique, var_cas_constantName, var_cas_hasConstructor COMMA_SOURCE_FILE_AT_LINE (8881)) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  GGS_typeEnumMessageMap  var_cas_exEnumMessageMap = GGS_typeEnumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumModifierMap  var_cas_modifierMap = GGS_enumModifierMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMethodMap  var_cas_methodMap = GGS_enumMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumMessageMap  var_cas_enumMessageMap = GGS_enumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_enumOperatorMap  var_cas_operatorMap = GGS_enumOperatorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          GGS_lstring  var_cas_operatorName ;
          inLexique.assignFromAttribute_tokenString (var_cas_operatorName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeVariablesMap  var_cas_localVariableMap = GGS_typeVariablesMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              if (((var_cas_typeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8909))).operator_isNotEqual (GGS_string ("location"))).isBuiltAndTrue ()) {
                var_cas_typeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the type should be '@location'") COMMA_SOURCE_FILE_AT_LINE (8911)) ;
              }
              GGS_AC_galgasType  var_cas_type_semantique = GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE) ;
              GGS_EXformalArgumentPassingMode var_cas_argumentConstantIn = GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8918)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8918)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertUnusedConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8920)) ;
                  } break ;
                case 2 : {
                  GGS_lstring  var_cas_nomArgument ;
                  inLexique.assignFromAttribute_tokenString (var_cas_nomArgument) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  GGS_typeCplusPlusName  var_cas_natureNom = GGS_typeAutomaticName ::constructor_new (inLexique, var_cas_nomArgument.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (8924)), var_cas_nomArgument.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (8924)) COMMA_HERE) ;
                  var_cas_argumentList.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn, var_cas_natureNom, GGS_bool (true), var_cas_nomArgument) ;
                  var_cas_localVariableMap.modifier_insertConstInArgument (inLexique, var_cas_nomArgument, var_cas_type_semantique, var_cas_natureNom COMMA_SOURCE_FILE_AT_LINE (8926)) ;
                  } break ;
                default :
                  break ;
              }
              var_cas_signature.addAssign_operation (var_cas_type_semantique, var_cas_argumentConstantIn) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumOperatorDefinitionList  var_cas_enumOperatorDefinitionList = GGS_enumOperatorDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                GGS_lstring  var_cas_leftConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_leftConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_leftConstantIndex ;
                GGS_bool automatic_var_44 ;
                const GGS_enumConstantMap  temp_339663 = var_cas_constantMap ;
                if (temp_339663.isBuilt ()) {
                  temp_339663 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_leftConstant, var_cas_leftConstantIndex, automatic_var_44 COMMA_SOURCE_FILE_AT_LINE (8936)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                GGS_lstring  var_cas_rightConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_rightConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_rightConstantIndex ;
                GGS_bool automatic_var_45 ;
                const GGS_enumConstantMap  temp_339856 = var_cas_constantMap ;
                if (temp_339856.isBuilt ()) {
                  temp_339856 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_rightConstant, var_cas_rightConstantIndex, automatic_var_45 COMMA_SOURCE_FILE_AT_LINE (8941)) ;
                }
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetConstant ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetConstant) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_luint  var_cas_targetConstantIndex ;
                GGS_bool automatic_var_46 ;
                const GGS_enumConstantMap  temp_340055 = var_cas_constantMap ;
                if (temp_340055.isBuilt ()) {
                  temp_340055 (HERE)->method_searchKeyAndGetIndex (inLexique, var_cas_targetConstant, var_cas_targetConstantIndex, automatic_var_46 COMMA_SOURCE_FILE_AT_LINE (8946)) ;
                }
                GGS_typeInstructionList  var_cas_instructionList = GGS_typeInstructionList ::constructor_emptyList () ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumOperatorDefinitionList.addAssign_operation (var_cas_leftConstant, var_cas_leftConstantIndex, var_cas_rightConstant, var_cas_rightConstantIndex, var_cas_targetConstant, var_cas_targetConstantIndex, var_cas_instructionList) ;
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          var_cas_operatorMap.modifier_insertKey (inLexique, var_cas_operatorName, var_cas_enumOperatorDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (8966)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumModifierDefinitionList  var_cas_enumActionDefinitionList = GGS_enumModifierDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_47 ;
                const GGS_enumConstantMap  temp_341397 = var_cas_constantMap ;
                if (temp_341397.isBuilt ()) {
                  temp_341397 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_47 COMMA_SOURCE_FILE_AT_LINE (8993)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (8994)) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                GGS_lstring  var_cas_targetName ;
                inLexique.assignFromAttribute_tokenString (var_cas_targetName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_48 ;
                const GGS_enumConstantMap  temp_341570 = var_cas_constantMap ;
                if (temp_341570.isBuilt ()) {
                  temp_341570 (HERE)->method_searchKey (inLexique, var_cas_targetName, automatic_var_48 COMMA_SOURCE_FILE_AT_LINE (8998)) ;
                }
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, var_cas_targetName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          var_cas_modifierMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (9010)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          GGS_lstring  var_cas_actionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          GGS_L_EXsignature  var_cas_signature = GGS_L_EXsignature ::constructor_emptyList () ;
          GGS_typeListeTypesEtNomsArgMethode  var_cas_argumentList = GGS_typeListeTypesEtNomsArgMethode ::constructor_emptyList () ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              var_cas_signature.addAssign_operation (GGS_typeGalgas_location ::constructor_new (inLexique COMMA_HERE), GGS_EXformalArgumentPassingMode::constructor_argumentConstantIn (inLexique COMMA_HERE)) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          GGS_enumUsedConstantMap  var_cas_definedSourceMap = GGS_enumUsedConstantMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
          GGS_enumMethodDefinitionList  var_cas_enumActionDefinitionList = GGS_enumMethodDefinitionList ::constructor_emptyList () ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                GGS_lstring  var_cas_sourceName ;
                inLexique.assignFromAttribute_tokenString (var_cas_sourceName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                GGS_bool automatic_var_49 ;
                const GGS_enumConstantMap  temp_342721 = var_cas_constantMap ;
                if (temp_342721.isBuilt ()) {
                  temp_342721 (HERE)->method_searchKey (inLexique, var_cas_sourceName, automatic_var_49 COMMA_SOURCE_FILE_AT_LINE (9037)) ;
                }
                var_cas_definedSourceMap.modifier_insertKey (inLexique, var_cas_sourceName COMMA_SOURCE_FILE_AT_LINE (9038)) ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
                var_cas_enumActionDefinitionList.addAssign_operation (var_cas_sourceName, GGS_typeInstructionList ::constructor_emptyList ()) ;
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          var_cas_methodMap.modifier_insertKey (inLexique, var_cas_actionName, var_cas_enumActionDefinitionList, var_cas_signature, var_cas_argumentList COMMA_SOURCE_FILE_AT_LINE (9050)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          GGS_lstring  var_cas_messageName ;
          inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_enumMessageMap.modifier_insertKey (inLexique, var_cas_messageName COMMA_SOURCE_FILE_AT_LINE (9057)) ;
          GGS_lstringlist  var_cas_messageStringList = GGS_lstringlist ::constructor_emptyList () ;
          var_cas_exEnumMessageMap.modifier_insertKey (inLexique, var_cas_messageName, var_cas_messageStringList COMMA_SOURCE_FILE_AT_LINE (9059)) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_t = GGS_typeGalgas_enum ::constructor_new (inLexique, var_cas_enumTypeName, var_cas_constantMap, var_cas_exEnumMessageMap, var_cas_modifierMap, var_cas_methodMap, var_cas_operatorMap COMMA_HERE) ;
  GGS_AC_semanticsEntity  var_cas_e = GGS_typeEntiteType ::constructor_new (inLexique, var_cas_t COMMA_HERE) ;
  var_cas_ioComponentSemanticsEntitiesMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_e COMMA_SOURCE_FILE_AT_LINE (9083)) ;
  GGS_TypeModel  var_cas_type = GGS_EnumModel ::constructor_new (inLexique, var_cas_constantMap, var_cas_enumMessageMap COMMA_HERE) ;
  var_cas_ioModelMap.modifier_insertKey (inLexique, var_cas_enumTypeName, var_cas_type COMMA_SOURCE_FILE_AT_LINE (9085)) ;
}

//---------------------------------------------------------------------------*

void semantics_parser::
pr_semantics_declaration_semantics_parser_8526_28_parse (galgas_scanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_enum) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_89 = true ;
    while (syntaxRepeat_89) {
        switch (select_semantics_parser_90 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_constructor) COMMA_HERE) ;
            } break ;
          case 2 : {
            } break ;
          default :
            break ;
        }
        { bool syntaxRepeat_91 = true ;
          while (syntaxRepeat_91) {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_repeat_semantics_parser_91 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_91 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
      switch (select_repeat_semantics_parser_89 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_89 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
  { bool syntaxRepeat_92 = true ;
    while (syntaxRepeat_92) {
      switch (select_repeat_semantics_parser_92 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_operator) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_93 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_94 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_95 = true ;
            while (syntaxRepeat_95) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_96 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_95 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_95 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_modifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_97 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_98 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_99 = true ;
            while (syntaxRepeat_99) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_100 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_99 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_99 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_method) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          switch (select_semantics_parser_101 (inLexique)) {
            case 1 : {
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F__3F_) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5F_name) COMMA_HERE) ;
              switch (select_semantics_parser_102 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                  } break ;
                default :
                  break ;
              }
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7B_) COMMA_HERE) ;
          { bool syntaxRepeat_103 = true ;
            while (syntaxRepeat_103) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                switch (select_semantics_parser_104 (inLexique)) {
                  case 1 : {
                    inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
                    } break ;
                  case 2 : {
                    nt_error_instruction_parse (inLexique) ;
                    } break ;
                  case 3 : {
                    nt_warning_instruction_parse (inLexique) ;
                    } break ;
                  default :
                    break ;
                }
              switch (select_repeat_semantics_parser_103 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_103 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
          { bool syntaxRepeat_105 = true ;
            while (syntaxRepeat_105) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D__3E_) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
              switch (select_repeat_semantics_parser_105 (inLexique)) {
                case 2 : {
                  } break ;
                default :
                  syntaxRepeat_105 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_reader) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_92 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__7D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

