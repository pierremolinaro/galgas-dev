//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'cocoaGalgas.mm'                            *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       july 7th, 2009, at 19h36'34"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#import "OC_Token.h"
#include "utilities/M_SourceLocation.h"
#include "galgas/C_Lexique.h"
#import "F_CocoaWrapperForGalgas.h"
#import "OCP_TokenizerProtocol.h"
#import "C_sourceTextForCocoa.h"
#import "galgas_scanner.h"
#import "galgas_cli_options.h"
#import "GGSUpdateCocoaGalgas.h"
#ifdef USER_DEFAULT_COLORS_DEFINED
  #import "user_default_colors.h"
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

#pragma mark Command Line Options

//---------------------------------------------------------------------------*
//                                                                           *
//                           Command Line Options                            *
//                                                                           *
//---------------------------------------------------------------------------*

void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray) {
}
//---------------------------------------------------------------------------*

#pragma mark Text Macros

//---------------------------------------------------------------------------*
//                                                                           *
//                          T E X T    M A C R O S                           *
//                                                                           *
//---------------------------------------------------------------------------*

static uint32 kTextMacroCount = 0 ;

static NSString * kTextMacroTitle [1] = {
  NULL
} ;

static NSString * kTextMacroContent [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

#pragma mark Popup List Data

//---------------------------------------------------------------------------*
//                                                                           *
//                     P O P U P    L I S T    D A T A                       *
//                                                                           *
//---------------------------------------------------------------------------*

static const uint16 * kPopUpListData [144] = {
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL} ;

//---------------------------------------------------------------------------*

#pragma mark Nibs

//---------------------------------------------------------------------------*
//                                                                           *
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S            *
//                                                                           *
//---------------------------------------------------------------------------*

NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
    [NSArray arrayWithObjects:@"galgasUpdate", [GGSUpdateCocoaGalgas class], nil],
    nil
  ] ;
}

//---------------------------------------------------------------------------*

#pragma mark Lexique interface

//---------------------------------------------------------------------------*
//                                                                           *
//                            Lexique interface                              *
//                                                                           *
//---------------------------------------------------------------------------*

@interface OC_TemporaryTokenizer : NSObject <OCP_TokenizerProtocol> {
  @private galgas_scanner * mScannerPtr ;
  @private C_galgas_io * mIOParametersPtr ;
}

@end

//---------------------------------------------------------------------------*

@implementation OC_TemporaryTokenizer

//---------------------------------------------------------------------------*

- (void) tokenizeForSourceString: (NSString *) inSourceString
         tokenArray: (NSMutableArray *) ioStyledRangeArray // Array of OC_Token
         editedRange: (const NSRange *) inEditedRange
         changeInLength: (const int) inChangeInLength
         firstIndexToRedraw: (int *) outLowerIndexToRedrawInStyleArray
         lastIndexToRedraw: (int *) outUpperIndexToRedrawInStyleArray
         eraseRangeStart: (int *) outEraseRangeStart
         eraseRangeEnd: (int *) outEraseRangeEnd
         popupMenu: (NSMenu *) ioMenu {
  if (mScannerPtr == NULL) {
    macroMyNew (mIOParametersPtr, C_galgas_io (C_galgas_io_parameters (false, "", ""), C_galgas_io::kNoOutput COMMA_HERE)) ;
    macroMyNew (mScannerPtr, galgas_scanner (NULL, "", "", mIOParametersPtr, "" COMMA_HERE)) ;
  }
  AC_sourceText * sourceTextPtr = NULL ;
  macroMyNew (sourceTextPtr,
              C_sourceTextForCocoa (inSourceString,
                                    ""
                                    COMMA_HERE)) ;
  mScannerPtr->resetAndLoadSourceFromText (sourceTextPtr) ;
  TC_UniqueArray <C_styledRange> styledRangeArray ([ioStyledRangeArray count] COMMA_HERE) ;
  for (uint32 i=0 ; i<[ioStyledRangeArray count] ; i++) {
    OC_Token * token = [ioStyledRangeArray objectAtIndex:i] ;
    const C_styledRange sr = {[token tokenCode], [token range].location, [token range].location + [token range].length - 1, [token style]} ;
    styledRangeArray.addObject (sr) ;
  }
  TC_UniqueArray <C_popupEntry> popUpEntries ;
  const SInt32 affectedRangeLocation = inEditedRange->location ;
  const SInt32 affectedRangeLength = inEditedRange->length ;
  const SInt32 replacementStringLength = inEditedRange->length + inChangeInLength ;
  mScannerPtr->scanThenGetStyledRangeArray (styledRangeArray,
                                            affectedRangeLocation,
                                            affectedRangeLength,
                                            replacementStringLength,
                                            *outLowerIndexToRedrawInStyleArray,
                                            *outUpperIndexToRedrawInStyleArray,
                                            *outEraseRangeStart,
                                            *outEraseRangeEnd,
                                            kPopUpListData,
                                            popUpEntries) ;
  for (SInt32 i=0 ; i<popUpEntries.count () ; i++) {
    NSMenuItem * item = [[NSMenuItem alloc]
      initWithTitle:[NSString stringWithFormat:@"%s", popUpEntries (i COMMA_HERE).mEntryString.cString (HERE)]
      action:NULL
      keyEquivalent:@""
    ] ;
    [item setTag:popUpEntries (i COMMA_HERE).mStartLocation] ;
    [ioMenu addItem:item] ;
    [item release] ;
  }
  [ioStyledRangeArray removeAllObjects] ;
  for (SInt32 i=0 ; i<styledRangeArray.count () ; i++) {
    OC_Token * token = [[OC_Token alloc]
      initWithTokenCode:styledRangeArray (i COMMA_HERE).mTokenCode
      range:NSMakeRange (styledRangeArray (i COMMA_HERE).mStartLocation, styledRangeArray (i COMMA_HERE).mEndLocation + 1 - styledRangeArray (i COMMA_HERE).mStartLocation)
      style:styledRangeArray (i COMMA_HERE).mStyle
    ] ;
    [ioStyledRangeArray addObject:token] ;
  }
  macroDetachPointer (sourceTextPtr, C_sourceTextForCocoa) ;
}

//---------------------------------------------------------------------------*

- (NSString *) blockComment {
  return @"" ;
}

//---------------------------------------------------------------------------*


- (UInt32) styleCount {
  return galgas_scanner::getStylesCount () ;
}

//---------------------------------------------------------------------------*

- (NSString *) styleNameForStyleIndex: (const SInt32) inIndex {
  return [NSString stringWithCString:galgas_scanner::getStyleName (inIndex)] ;
}

//---------------------------------------------------------------------------*

- (NSString *) styleIdentifierForStyleIndex: (const SInt32) inIndex {
  return [NSString stringWithCString:galgas_scanner::getStyleIdentifier (inIndex)] ;
}

//---------------------------------------------------------------------------*

- (UInt32) textMacroCount {
  return kTextMacroCount ;
}

//---------------------------------------------------------------------------*

- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {
  return kTextMacroTitle [inIndex] ;
}

//---------------------------------------------------------------------------*

- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {
  return kTextMacroContent [inIndex] ;
}

//---------------------------------------------------------------------------*

- (NSString *) tabItemTitle {
  return @"Source" ;
}

//---------------------------------------------------------------------------*

@end

//---------------------------------------------------------------------------*

NSObject <OCP_TokenizerProtocol> * tokenizerForExtension (const NSString * inExtension) {
  return [[OC_TemporaryTokenizer alloc] init] ;
}

//---------------------------------------------------------------------------*

NSArray * tokenizers (void) {
  return [NSArray arrayWithObjects:
    [[[OC_TemporaryTokenizer alloc] init] autorelease],
    nil
  ] ;
}

//---------------------------------------------------------------------------*

