//---------------------------------------------------------------------------*
//                                                                           *
//                          File 'cocoaGalgas.mm'                            *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     november 4th, 2006, at 13h47'22"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#import <Cocoa/Cocoa.h>

#import "F_CocoaWrapperForGalgas.h"
#import "C_sourceTextForCocoa.h"
#import "command_line_interface/C_CLI_OptionGroup.h"
#import "command_line_interface/C_builtin_CLI_Options.h"
#import "galgas/C_galgas_CLI_Options.h"
#import "galgas/C_galgas_null_io.h"
#import "galgas_scanner.h"
#import "galgas_cli_options.h"
#import "GGSUpdateCocoaGalgas.h"
#ifdef USER_DEFAULT_COLORS_DEFINED
  #import "user_default_colors.h"
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                         Global static variables                           *
//                                                                           *
//---------------------------------------------------------------------------*


static C_builtin_CLI_Options gGenericOptions (false) ;
static C_galgas_CLI_Options gGalgasOptions ;
static galgas_cli_options gOption0 ;
static C_CLI_OptionGroup gCommandLineOptions (& gGenericOptions, & gGalgasOptions, & gOption0, NULL) ;
static C_galgas_io_parameters IOparameters (& gCommandLineOptions) ;
static C_galgas_null_io gNullIO (IOparameters) ;
static galgas_scanner * gScannerPtr = NULL ;
static NSMutableArray * gColorArray ;

//---------------------------------------------------------------------------*
//                                                                           *
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S            *
//                                                                           *
//---------------------------------------------------------------------------*

NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
    [NSArray arrayWithObjects:@"galgasUpdate", [GGSUpdateCocoaGalgas class], nil],
    nil
  ] ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        B L O C K    C O M M E N T                         *
//                                                                           *
//---------------------------------------------------------------------------*

NSString * blockComment (void) {
  return @"#" ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                B O O L   O P T I O N S   R O U T I N E S                  *
//                                                                           *
//---------------------------------------------------------------------------*

sint32 getBoolOptionsCount (void) {
  return gCommandLineOptions.getBoolOptionsCount () ;
}

bool getBoolOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getBoolOptionValue (inIndex COMMA_THERE) ;
}

void setBoolOptionValue (const sint32 inIndex, const bool inValue COMMA_LOCATION_ARGS) {
  gCommandLineOptions.setBoolOptionValue (inIndex, inValue COMMA_THERE) ;
}

char getBoolOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {
  return gCommandLineOptions.getBoolOptionChar (inIndex COMMA_THERE) ;
}

const char * getBoolOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getBoolOptionString (inIndex COMMA_THERE) ;
}

const char * getBoolOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getBoolOptionDescription (inIndex COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    U N S I G N E D   I N T E G E R   O P T I O N S   R O U T I N E S      *
//                                                                           *
//---------------------------------------------------------------------------*


sint32 getUIntOptionsCount (void) {
  return gCommandLineOptions.getUintOptionsCount () ;
}

uint32 getUIntOptionDefaultValue (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getUintOptionDefaultValue (inIndex COMMA_THERE) ;
}

uint32 getUIntOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getUintOptionValue (inIndex COMMA_THERE) ;
}

void setUIntOptionValue (const sint32 inIndex, const uint32 inValue COMMA_LOCATION_ARGS) {
  gCommandLineOptions.setUintOptionValue (inIndex, inValue COMMA_THERE) ;
}

char getUIntOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {
  return gCommandLineOptions.getUintOptionChar (inIndex COMMA_THERE) ;
}

const char * getUIntOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getUintOptionString (inIndex COMMA_THERE) ;
}

const char * getUIntOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getUintOptionDescription (inIndex COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              S T R I N G   O P T I O N S   R O U T I N E S                *
//                                                                           *
//---------------------------------------------------------------------------*


sint32 getStringOptionsCount (void) {
  return gCommandLineOptions.getStringOptionsCount () ;
}

C_String getStringOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getStringOptionValue (inIndex COMMA_THERE) ;
}

void setStringOptionValue (const sint32 inIndex, const C_String & inValue COMMA_LOCATION_ARGS) {
  gCommandLineOptions.setStringOptionValue (inIndex, inValue COMMA_THERE) ;
}

char getStringOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {
  return gCommandLineOptions.getStringOptionChar (inIndex COMMA_THERE) ;
}

const char * getStringOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getStringOptionString (inIndex COMMA_THERE) ;
}

const char * getStringOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {
  return gCommandLineOptions.getStringOptionDescription (inIndex COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                            Lexique interface                              *
//                                                                           *
//---------------------------------------------------------------------------*


sint32 getStylesCount (void) {
  return galgas_scanner::getStylesCount () ;
}

//---------------------------------------------------------------------------*

const char * getStyleName (const sint32 inIndex) {
  return galgas_scanner::getStyleName (inIndex) ;
}

//---------------------------------------------------------------------------*

const char * getStyleIdentifier (const sint32 inIndex) {
  return galgas_scanner::getStyleIdentifier (inIndex) ;
}

//---------------------------------------------------------------------------*

void scanThenGetStyledRangeArray (NSString * inSourceString,
                                  const char * inSourceFileName,
                                  TC_UniqueArray <C_styledRange> & ioStyledRangeArray,
                                  const sint32 inAffectedRangeLocation,
                                  const sint32 inAffectedRangeLength,
                                  const sint32 inReplacementStringLength,
                                  sint32 & outFirstIndexToRedraw,
                                  sint32 & outLastIndexToRedraw,
                                  sint32 & outEraseRangeStart,
                                  sint32 & outEraseRangeEnd) {
  if (gScannerPtr == NULL) {
    macroMyNew (gScannerPtr, galgas_scanner (& gNullIO)) ;
  }
  AC_sourceText * sourceTextPtr = NULL ;
  macroMyNew (sourceTextPtr,
              C_sourceTextForCocoa (inSourceString,
                                    inSourceFileName
                                    COMMA_HERE)) ;
  gScannerPtr->resetAndLoadSourceFromText (sourceTextPtr) ;
  gScannerPtr->scanThenGetStyledRangeArray (ioStyledRangeArray,
                                            inAffectedRangeLocation,
                                            inAffectedRangeLength,
                                            inReplacementStringLength,
                                            outFirstIndexToRedraw,
                                            outLastIndexToRedraw,
                                            outEraseRangeStart,
                                            outEraseRangeEnd) ;
}

//---------------------------------------------------------------------------*

void
initializeTextColors (NSString * inGGS_indexed_color,
                      NSString * inGGS_named_color) {
  NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults] ;
  gColorArray = [NSMutableArray arrayWithCapacity:getStylesCount ()] ;
  [gColorArray retain] ;
  for (int i=0 ; i<getStylesCount () ; i++) {
    NSString * name = [NSString stringWithFormat:inGGS_named_color, getStyleIdentifier (i)] ;
    NSData * colorData = [defaults dataForKey:name] ;
    if (colorData == nil) {
      NSString * indexedName = [NSString stringWithFormat:inGGS_indexed_color, i] ;
      colorData = [defaults dataForKey:indexedName] ;
      [defaults setObject:colorData forKey:name] ;
      [defaults setObject:nil forKey:indexedName] ;
    }
    if (colorData != nil) {
      NSColor * color = (NSColor *) [NSUnarchiver unarchiveObjectWithData: colorData] ;
      [gColorArray addObject:color] ;
    }else{
      #ifdef USER_DEFAULT_COLORS_DEFINED
        NSColor * newColor = getDefaultUserColor (i) ;
      #else
        NSColor * newColor = [NSColor blackColor] ;
      #endif
        [gColorArray addObject:newColor] ;
        colorData = [NSArchiver archivedDataWithRootObject:newColor] ;
        [defaults setObject:colorData forKey:name] ;
    }
  }
}

//---------------------------------------------------------------------------*

NSColor * getColor (const sint32 inIndex) {
  return [gColorArray objectAtIndex: inIndex] ;
}

//---------------------------------------------------------------------------*

void changeColor (const sint32 inIndex, NSColor * inNewColor) {
  [gColorArray replaceObjectAtIndex: inIndex withObject: inNewColor] ;
}

//---------------------------------------------------------------------------*

