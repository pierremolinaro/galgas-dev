//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'cocoa_parser.cpp'                           *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 25th, 2008, at 21h55'29"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "cocoa_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "cocoa_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  GGS_lstring  var_cas_guiComponentName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_guiComponentName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_basename ;
  var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (_inLexique COMMA_HERE).reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)) ;
  if (((var_cas_guiComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (113)))._operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_guiComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((((GGS_string (true, "GALGAS 1.7.5 and later checks "
      "the component name ('"))._operator_concat (var_cas_guiComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (115))))._operator_concat (GGS_string (true, "') against the source file base name ('")))._operator_concat (var_cas_basename))._operator_concat (GGS_string (true, "'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (116)) ;
  }
  GGS_lstring  var_cas_guiKindName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_guiKindName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      var_cas_grammarName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique._assignFromAttribute_tokenString (var_cas_grammarName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_ModelMap  var_cas_modelMap ;
  var_cas_modelMap = GGS_ModelMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_ActionMap  var_cas_actionMap ;
  var_cas_actionMap = GGS_ActionMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_inclusionsForHeaderFile ;
  GGS_stringset  var_cas_inclusionsForImplementationFile ;
  GGS_M_optionComponents  var_cas_optionsComponentsMapForUse ;
  var_cas_optionsComponentsMapForUse = GGS_M_optionComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_semanticsEntitiesForUse  var_cas_componentEntitiesMap ;
  GGS_stringset  var_cas_classNamesSet ;
  var_cas_classNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_typeTableEnAvant  var_cas_tableEnAvant ;
  var_cas_tableEnAvant = GGS_typeTableEnAvant ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_stringset  var_cas_includedSemanticsComponents ;
  GGS_stringset  var_cas_includedOptionComponents ;
  GGS_stringset  var_cas_includedMetamodelComponents ;
  GGS_stringset  var_cas_includedGrammarComponents ;
  nt_import_headers_semantics_and_grammars_ (_inLexique, var_cas_includedSemanticsComponents, var_cas_includedMetamodelComponents, var_cas_includedOptionComponents, var_cas_includedGrammarComponents, var_cas_ioLexiqueMapForUse, var_cas_ioSemanticsComponentsMap, var_cas_ioGrammarComponentsMap, var_cas_ioOptionsComponentsMap, var_cas_inclusionsForImplementationFile, var_cas_inclusionsForHeaderFile, var_cas_optionsComponentsMapForUse, var_cas_modelMap, var_cas_actionMap, var_cas_componentEntitiesMap, var_cas_tableEnAvant, var_cas_ioSemanticContext) ;
  GGS_lstring  var_cas_lexiqueClassName ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_nonterminalSymbolParametersMap ;
  GGS_M_optionComponents  var_cas_optionsComponentsMap ;
  if (((var_cas_ioGrammarComponentsMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (164)))._operator_isEqual (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
    GGS_lstring  var_cas_grammarKey ;
    var_cas_grammarKey = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
    {
      GGS_M_grammarComponents::cEnumerator enumerator_6494 (var_cas_ioGrammarComponentsMap, true) ;
      const GGS_M_grammarComponents::cElement * operand_6494 = NULL ;
      while (((operand_6494 = (GGS_M_grammarComponents::cElement *) enumerator_6494.nextObject ()))) {
        macroValidPointer (operand_6494) ;
        var_cas_grammarKey = operand_6494->mKey ;
      }
    }
    const GGS_M_grammarComponents  _temp_6612 = var_cas_ioGrammarComponentsMap ;
    if (_temp_6612._isBuilt ()) {
      _temp_6612 (HERE)->method_searchKey (_inLexique, var_cas_grammarKey, var_cas_nonterminalSymbolParametersMap, var_cas_lexiqueClassName, var_cas_optionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (169)) ;
    }
  }else if (((var_cas_grammarName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, (((((GGS_string (true, "the grammar should be named in the header, as follows (replace xxx by actual grammar name):\n"))._operator_concat (GGS_string (true, "gui ")))._operator_concat (var_cas_guiComponentName))._operator_concat (GGS_string (true, "\"")))._operator_concat (var_cas_guiKindName))._operator_concat (GGS_string (true, "\" grammar xxx :")) COMMA_SOURCE_FILE_AT_LINE (178)) ;
    var_cas_nonterminalSymbolParametersMap._drop_operation () ;
    var_cas_lexiqueClassName._drop_operation () ;
    var_cas_optionsComponentsMap._drop_operation () ;
  }else{
    const GGS_M_grammarComponents  _temp_7079 = var_cas_ioGrammarComponentsMap ;
    if (_temp_7079._isBuilt ()) {
      _temp_7079 (HERE)->method_searchKey (_inLexique, var_cas_grammarName, var_cas_nonterminalSymbolParametersMap, var_cas_lexiqueClassName, var_cas_optionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (180)) ;
    }
  }
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  GGS_L_signature  automatic_var_0 ;
  const GGS_M_nonterminalSymbolAltsForGrammar  _temp_7300 = var_cas_nonterminalSymbolParametersMap ;
  if (_temp_7300._isBuilt ()) {
    _temp_7300 (HERE)->method_searchKey (_inLexique, var_cas_altName, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_bool var_cas_lexiqueImported ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      var_cas_lexiqueImported = GGS_bool (true, false) ;
      var_cas_terminalSymbolMap = GGS_M_terminalSymbolsMapForUse ::constructor_emptyMap (_inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      GGS_lstring  var_cas_lexiqueFileName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_lexiqueFileName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_ (_inLexique, var_cas_lexiqueFileName, var_cas_ioLexiqueMapForUse) ;
      const GGS_M_lexiqueComponents  _temp_7753 = var_cas_ioLexiqueMapForUse ;
      if (_temp_7753._isBuilt ()) {
        _temp_7753 (HERE)->method_searchKey (_inLexique, var_cas_lexiqueClassName, var_cas_terminalSymbolMap COMMA_SOURCE_FILE_AT_LINE (204)) ;
      }
      var_cas_lexiqueImported = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  GGS_lstringlist  var_cas_nibAndClassList ;
  var_cas_nibAndClassList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_labelForPopUpList  var_cas_labelForPopUpList ;
  var_cas_labelForPopUpList = GGS_labelForPopUpList ::constructor_emptyList () ;
  GGS_string var_cas_blockComment ;
  var_cas_blockComment = GGS_string (true, "") ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          if (((var_cas_lexiqueImported)._operator_not ()).isBuiltAndTrue ()) {
            GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the lexique should be imported by an import__ \"...\" statement.") COMMA_SOURCE_FILE_AT_LINE (215)) ;
          }
          GGS_lstring  var_cas_terminal1 ;
          _inLexique._assignFromAttribute_tokenString (var_cas_terminal1) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          GGS_luint  var_cas_terminal1ID ;
          GGS_typeListeAttributsSemantiques  automatic_var_1 ;
          const GGS_M_terminalSymbolsMapForUse  _temp_8281 = var_cas_terminalSymbolMap ;
          if (_temp_8281._isBuilt ()) {
            _temp_8281 (HERE)->method_searchKeyGetID (_inLexique, var_cas_terminal1, var_cas_terminal1ID, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (220)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          GGS_lstring  var_cas_terminal2 ;
          _inLexique._assignFromAttribute_tokenString (var_cas_terminal2) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          GGS_luint  var_cas_terminal2ID ;
          GGS_typeListeAttributsSemantiques  automatic_var_2 ;
          const GGS_M_terminalSymbolsMapForUse  _temp_8439 = var_cas_terminalSymbolMap ;
          if (_temp_8439._isBuilt ()) {
            _temp_8439 (HERE)->method_searchKeyGetID (_inLexique, var_cas_terminal2, var_cas_terminal2ID, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (225)) ;
          }
          var_cas_labelForPopUpList._addAssign_operation (var_cas_terminal1, var_cas_terminal1ID.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)), var_cas_terminal2, var_cas_terminal2ID.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (230))) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_lstring  var_cas_targetName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_targetName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          GGS_lstring  var_cas_sourceExpression ;
          _inLexique._assignFromAttribute_tokenString (var_cas_sourceExpression) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          if (((var_cas_sourceExpression.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (239)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
            var_cas_sourceExpression.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this string should not be empty") COMMA_SOURCE_FILE_AT_LINE (240)) ;
          }
          if (((var_cas_targetName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (242)))._operator_isEqual (GGS_string (true, "nibAndMainClass"))).isBuiltAndTrue ()) {
            var_cas_nibAndClassList._addAssign_operation (var_cas_sourceExpression) ;
          }else if (((var_cas_targetName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (244)))._operator_isEqual (GGS_string (true, "blockComment"))).isBuiltAndTrue ()) {
            if (((var_cas_blockComment)._operator_isNotEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
              var_cas_targetName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this key is already defined") COMMA_SOURCE_FILE_AT_LINE (246)) ;
            }else{
              var_cas_blockComment = var_cas_sourceExpression.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (248)) ;
            }
          }else{
            var_cas_targetName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "unkown key") COMMA_SOURCE_FILE_AT_LINE (251)) ;
          }
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  if (var_cas_guiComponentName._isBuilt () &&
      var_cas_guiKindName._isBuilt () &&
      var_cas_nibAndClassList._isBuilt () &&
      var_cas_blockComment._isBuilt () &&
      var_cas_lexiqueClassName._isBuilt () &&
      var_cas_optionsComponentsMap._isBuilt () &&
      var_cas_labelForPopUpList._isBuilt () &&
      var_cas_terminalSymbolMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (264))._isBuilt ()) {
    ::routine_generateCocoaComponent (_inLexique,  var_cas_guiComponentName,  var_cas_guiKindName,  var_cas_nibAndClassList,  var_cas_blockComment,  var_cas_lexiqueClassName,  var_cas_optionsComponentsMap,  var_cas_labelForPopUpList,  var_cas_terminalSymbolMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (264)) COMMA_SOURCE_FILE_AT_LINE (254)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void cocoa_parser::
pr_galgas_component_cocoa_parser_100_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  switch (select_cocoa_parser_0 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_import_headers_semantics_and_grammars_parse (_inLexique) ;
  switch (select_cocoa_parser_1 (_inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import_5F_5F) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
      nt_parse_lexique_for_importing_parse (_inLexique) ;
      } break ;
    default :
      break ;
  }
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_cocoa_parser_2 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_terminal) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_gui) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

