//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'templateExpressionParser.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 10th, 2009, at 15h17'36"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "templateExpressionParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateExpressionParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_4462 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4486 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_4462 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4462) ;
    cPtr_typeGalgas_binaryset * operand_4486 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4486) ;
    if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_4462 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4462) ;
      cPtr_typeGalgas_bool * operand_4486 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4486) ;
      if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_4462 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4462) ;
        cPtr_typeGalgas_uint * operand_4486 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4486) ;
        if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_4462 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4462) ;
          cPtr_typeGalgas_uint64 * operand_4486 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4486) ;
          if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_4462 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4462) ;
            cPtr_typeGalgas_stringset * operand_4486 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4486) ;
            if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_4462 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4462) ;
              cPtr_typeGalgas_sint * operand_4486 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4486) ;
              if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_4462 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4462) ;
                cPtr_typeGalgas_sint64 * operand_4486 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4486) ;
                if ((operand_4462 != NULL) && (operand_4486 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (130)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (133)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5994 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6018 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_5994 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_5994) ;
    cPtr_typeGalgas_binaryset * operand_6018 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6018) ;
    if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_5994 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5994) ;
      cPtr_typeGalgas_bool * operand_6018 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6018) ;
      if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_5994 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_5994) ;
        cPtr_typeGalgas_uint * operand_6018 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6018) ;
        if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_5994 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_5994) ;
          cPtr_typeGalgas_uint64 * operand_6018 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6018) ;
          if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_5994 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_5994) ;
            cPtr_typeGalgas_sint * operand_6018 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6018) ;
            if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_5994 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_5994) ;
              cPtr_typeGalgas_sint64 * operand_6018 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6018) ;
              if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_5994 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_5994) ;
                cPtr_typeGalgas_stringset * operand_6018 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6018) ;
                if ((operand_5994 != NULL) && (operand_6018 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (163)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (164)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (166)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_7527 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7551 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_7527 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7527) ;
    cPtr_typeGalgas_binaryset * operand_7551 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7551) ;
    if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_7527 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7527) ;
      cPtr_typeGalgas_bool * operand_7551 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7551) ;
      if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_7527 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7527) ;
        cPtr_typeGalgas_uint * operand_7551 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7551) ;
        if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_7527 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7527) ;
          cPtr_typeGalgas_uint64 * operand_7551 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7551) ;
          if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_7527 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7527) ;
            cPtr_typeGalgas_sint * operand_7551 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7551) ;
            if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_7527 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7527) ;
              cPtr_typeGalgas_sint64 * operand_7551 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7551) ;
              if ((operand_7527 != NULL) && (operand_7551 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (194)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (195)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (197)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb ;
  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (210)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkLogicalNegateOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_10027 = var_cas_inOperandType ; // CAST instruction
    if (_var_10027.getPtr () != NULL) {
      macroValidPointer (_var_10027.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_10027.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_10027.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_10027.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_10027.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_10027.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (237)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (239)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_10597 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_10621 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_10597 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10597) ;
    cPtr_typeGalgas_binaryset * operand_10621 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10621) ;
    if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_10597 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_10597) ;
      cPtr_typeGalgas_stringset * operand_10621 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_10621) ;
      if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_10597 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10597) ;
        cPtr_typeGalgas_bool * operand_10621 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10621) ;
        if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_10597 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_10597) ;
          cPtr_typeGalgas_char * operand_10621 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_10621) ;
          if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_10597 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10597) ;
            cPtr_typeGalgas_uint * operand_10621 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10621) ;
            if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_10597 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10597) ;
              cPtr_typeGalgas_sint * operand_10621 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10621) ;
              if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_10597 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10597) ;
                cPtr_typeGalgas_uint64 * operand_10621 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10621) ;
                if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_10597 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10597) ;
                  cPtr_typeGalgas_sint64 * operand_10621 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10621) ;
                  if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_10597 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_10597) ;
                    cPtr_typeGalgas_double * operand_10621 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_10621) ;
                    if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_10597 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10597) ;
                      cPtr_typeGalgas_string * operand_10621 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10621) ;
                      if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_10597 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_10597) ;
                        cPtr_typeGalgas_lbool * operand_10621 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_10621) ;
                        if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_10597 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_10597) ;
                          cPtr_typeGalgas_lchar * operand_10621 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_10621) ;
                          if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_10597 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_10597) ;
                            cPtr_typeGalgas_luint * operand_10621 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_10621) ;
                            if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_10597 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_10597) ;
                              cPtr_typeGalgas_lsint * operand_10621 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_10621) ;
                              if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_10597 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_10597) ;
                                cPtr_typeGalgas_luint64 * operand_10621 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_10621) ;
                                if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_10597 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_10597) ;
                                  cPtr_typeGalgas_lsint64 * operand_10621 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_10621) ;
                                  if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_10597 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_10597) ;
                                    cPtr_typeGalgas_ldouble * operand_10621 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_10621) ;
                                    if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_10597 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_10597) ;
                                      cPtr_typeGalgas_lstring * operand_10621 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_10621) ;
                                      if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_10597 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_10597) ;
                                        cPtr_typeGalgas_location * operand_10621 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_10621) ;
                                        if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_10597 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_10597) ;
                                          cPtr_typeGalgas_filewrapper * operand_10621 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_10621) ;
                                          if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_10597 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_10597) ;
                                            cPtr_typeGalgas_enum * operand_10621 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_10621) ;
                                            if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                              if (((operand_10597->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274))).operator_isNotEqual (operand_10621->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)))).isBuiltAndTrue ()) {
                                                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_10597->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (275)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_10621->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (277)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_10597 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10597) ;
                                              cPtr_typeGalgasUndefinedListType * operand_10621 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10621) ;
                                              if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                                if (((operand_10597->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (279))).operator_isNotEqual (operand_10621->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (279)))).isBuiltAndTrue ()) {
                                                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_10597->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (280)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_10621->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (282)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_10597 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_10597) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_10621 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_10621) ;
                                                if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                                  if (((operand_10597->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (285))).operator_isNotEqual (operand_10621->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (285)))).isBuiltAndTrue ()) {
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_10597->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (286)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_10621->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (288)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_10597 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_10597) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_10621 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_10621) ;
                                                  if ((operand_10597 != NULL) && (operand_10621 != NULL)) {
                                                    if (((operand_10597->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isNotEqual (operand_10621->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292)))).isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_10597->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_10621->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (294)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (295)) ;
                                                    }
                                                  }else{
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (297)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (298)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (299)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_13978 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_14002 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_13978 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13978) ;
    cPtr_typeGalgas_stringset * operand_14002 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_14002) ;
    if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_13978 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13978) ;
      cPtr_typeGalgas_bool * operand_14002 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_14002) ;
      if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_13978 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13978) ;
        cPtr_typeGalgas_char * operand_14002 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_14002) ;
        if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_13978 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13978) ;
          cPtr_typeGalgas_uint * operand_14002 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_14002) ;
          if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_13978 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13978) ;
            cPtr_typeGalgas_sint * operand_14002 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_14002) ;
            if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_13978 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13978) ;
              cPtr_typeGalgas_uint64 * operand_14002 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_14002) ;
              if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_13978 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13978) ;
                cPtr_typeGalgas_sint64 * operand_14002 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_14002) ;
                if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_13978 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13978) ;
                  cPtr_typeGalgas_double * operand_14002 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_14002) ;
                  if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_13978 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13978) ;
                    cPtr_typeGalgas_string * operand_14002 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_14002) ;
                    if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_13978 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13978) ;
                      cPtr_typeGalgas_enum * operand_14002 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_14002) ;
                      if ((operand_13978 != NULL) && (operand_14002 != NULL)) {
                        if (((operand_13978->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (323))).operator_isNotEqual (operand_14002->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (323)))).isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_13978->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (324)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_14002->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (325)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (326)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (328)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (329)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (330)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_15647 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_15671 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_15647 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_15647) ;
    cPtr_typeGalgas_uint * operand_15671 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15671) ;
    if ((operand_15647 != NULL) && (operand_15671 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_15647 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15647) ;
      cPtr_typeGalgas_uint * operand_15671 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15671) ;
      if ((operand_15647 != NULL) && (operand_15671 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_15647 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15647) ;
        cPtr_typeGalgas_uint * operand_15671 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15671) ;
        if ((operand_15647 != NULL) && (operand_15671 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_15647 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15647) ;
          cPtr_typeGalgas_uint * operand_15671 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15671) ;
          if ((operand_15647 != NULL) && (operand_15671 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_15647 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15647) ;
            cPtr_typeGalgas_uint * operand_15671 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15671) ;
            if ((operand_15647 != NULL) && (operand_15671 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (356)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (357)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (360)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_16664 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16688 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_16664 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_16664) ;
    cPtr_typeGalgas_uint * operand_16688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16688) ;
    if ((operand_16664 != NULL) && (operand_16688 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_16664 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16664) ;
      cPtr_typeGalgas_uint * operand_16688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16688) ;
      if ((operand_16664 != NULL) && (operand_16688 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_16664 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16664) ;
        cPtr_typeGalgas_uint * operand_16688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16688) ;
        if ((operand_16664 != NULL) && (operand_16688 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_16664 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16664) ;
          cPtr_typeGalgas_uint * operand_16688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16688) ;
          if ((operand_16664 != NULL) && (operand_16688 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_16664 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16664) ;
            cPtr_typeGalgas_uint * operand_16688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16688) ;
            if ((operand_16664 != NULL) && (operand_16688 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (382)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (383)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (386)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_17990 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18014 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_17990 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17990) ;
    cPtr_typeGalgas_uint * operand_18014 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18014) ;
    if ((operand_17990 != NULL) && (operand_18014 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_17990 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_17990) ;
      cPtr_typeGalgas_sint * operand_18014 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18014) ;
      if ((operand_17990 != NULL) && (operand_18014 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_17990 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_17990) ;
        cPtr_typeGalgas_uint64 * operand_18014 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18014) ;
        if ((operand_17990 != NULL) && (operand_18014 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_17990 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_17990) ;
          cPtr_typeGalgas_sint64 * operand_18014 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18014) ;
          if ((operand_17990 != NULL) && (operand_18014 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (410)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (411)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (414)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19226 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19250 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_19226 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19226) ;
    cPtr_typeGalgas_uint * operand_19250 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19250) ;
    if ((operand_19226 != NULL) && (operand_19250 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_19226 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19226) ;
      cPtr_typeGalgas_sint * operand_19250 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19250) ;
      if ((operand_19226 != NULL) && (operand_19250 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_19226 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19226) ;
        cPtr_typeGalgas_uint64 * operand_19250 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19250) ;
        if ((operand_19226 != NULL) && (operand_19250 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_19226 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19226) ;
          cPtr_typeGalgas_sint64 * operand_19250 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19250) ;
          if ((operand_19226 != NULL) && (operand_19250 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_19226 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19226) ;
            cPtr_typeGalgas_stringset * operand_19250 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19250) ;
            if ((operand_19226 != NULL) && (operand_19250 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (440)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (441)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (444)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20568 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20592 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20568 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20568) ;
    cPtr_typeGalgas_uint * operand_20592 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20592) ;
    if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20568 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20568) ;
      cPtr_typeGalgas_sint * operand_20592 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20592) ;
      if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20568 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20568) ;
        cPtr_typeGalgas_uint64 * operand_20592 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20592) ;
        if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20568 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20568) ;
          cPtr_typeGalgas_sint64 * operand_20592 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20592) ;
          if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (468)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (469)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (472)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_21804 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21828 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21804 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21804) ;
    cPtr_typeGalgas_uint * operand_21828 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21828) ;
    if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21804 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21804) ;
      cPtr_typeGalgas_sint * operand_21828 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21828) ;
      if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21804 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21804) ;
        cPtr_typeGalgas_uint64 * operand_21828 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21828) ;
        if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21804 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21804) ;
          cPtr_typeGalgas_sint64 * operand_21828 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21828) ;
          if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (496)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (497)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (500)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_23034 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23058 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23034 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23034) ;
    cPtr_typeGalgas_uint * operand_23058 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23058) ;
    if ((operand_23034 != NULL) && (operand_23058 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23034 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23034) ;
      cPtr_typeGalgas_sint * operand_23058 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23058) ;
      if ((operand_23034 != NULL) && (operand_23058 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23034 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23034) ;
        cPtr_typeGalgas_uint64 * operand_23058 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23058) ;
        if ((operand_23034 != NULL) && (operand_23058 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23034 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23034) ;
          cPtr_typeGalgas_sint64 * operand_23058 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23058) ;
          if ((operand_23034 != NULL) && (operand_23058 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (524)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (525)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (528)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "unary_minus_type_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_24498 = var_cas_inExpressionType ; // CAST instruction
    if (_var_24498.getPtr () != NULL) {
      macroValidPointer (_var_24498.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_24498.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_24498.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (547)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (551)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_560_17_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (590)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (610)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_560_17_parse (galgasTemplateScanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_624_20_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (654)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_624_20_parse (galgasTemplateScanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_668_22_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_templateExpressionParser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (696)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (713)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (730)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (747)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (764)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (781)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_668_22_parse (galgasTemplateScanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_templateExpressionParser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_793_24_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_templateExpressionParser_3 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (822)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (838)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (854)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (870)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_793_24_parse (galgasTemplateScanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_templateExpressionParser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_881_11_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (910)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (926)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (942)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_881_11_parse (galgasTemplateScanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_953_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_checkForTemplate (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (971)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_953_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_981_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_981_13_parse (galgasTemplateScanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_999_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_999_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1023_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1042)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1023_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1051_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1070)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1051_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1079_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1079_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1097_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1097_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1115_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1115_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1134_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1134_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1153_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1153_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1172_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1172_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1191_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1191_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1213_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_5 (inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_description) COMMA_HERE) ;
          var_cas_outExpression = GGS_typeDescriptionInExpression ::constructor_new (inLexique, var_cas_expressionValue, GGS_location (inLexique) COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_methodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
          GGS_string var_cas_conversionMethod ;
          ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod COMMA_SOURCE_FILE_AT_LINE (1243)) ;
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1261))).operator_isNotEqual (GGS_string ("verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1263)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, GGS_string ("generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          const GGS_M_optionComponents  _temp_50635 = var_cas_inOptionsComponentsMapForUse ;
          if (_temp_50635.isBuilt ()) {
            _temp_50635 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1272)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) COMMA_SOURCE_FILE_AT_LINE (1276))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1277)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)) COMMA_SOURCE_FILE_AT_LINE (1279))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1280)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1282)) COMMA_SOURCE_FILE_AT_LINE (1282))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1286)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1288)) ;
            var_cas_outExpression.drop () ;
            var_cas_outResultType.drop () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1213_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_5 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_description) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1301_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  _temp_52536 = var_cas_inEntitiesMap ;
  if (_temp_52536.isBuilt ()) {
    _temp_52536 (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1313)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_53116 = var_cas_entite ; // CAST instruction
    if (_var_53116.getPtr () != NULL) {
      macroValidPointer (_var_53116.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_53116.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_53116.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1318)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_53116.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_53116.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1322)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1326)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1329)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_53284 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_53284 = NULL ;
    while (((operand_53284 = enumerator_53284.nextObject ()))) {
      macroValidPointer (operand_53284) ;
      var_cas_listeAttributsSemantiques._addAssign_operation (operand_53284->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1301_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1354_18_ (galgasTemplateScanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1361)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1354_18_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1370_29_ (galgasTemplateScanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_repeat_templateExpressionParser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1397))).operator_strictInf (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1397)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (1399)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1399))).operator_strictSup (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1399)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1401)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_55855 (var_cas_inFormalAttributesList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_55855 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_55946 (var_cas_effectiveTypesList, true) ;
      const GGS_typeTypesList::cElement * operand_55946 = NULL ;
      while (((operand_55855 = enumerator_55855.nextObject ()))
          && ((operand_55946 = enumerator_55946.nextObject ()))) {
        macroValidPointer (operand_55855) ;
        macroValidPointer (operand_55946) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_55855->mAttributType,  operand_55946->mType,  operand_55946->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1404)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1370_29_parse (galgasTemplateScanner & inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_repeat_templateExpressionParser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

