//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'templateExpressionParser.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     january 31th, 2010, at 13h10'8"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "templateExpressionParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateExpressionParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "matchConcatOperatorForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5171 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5195 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_5171 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5171) ;
    cPtr_typeGalgas_string * operand_5195 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5195) ;
    if ((operand_5171 != NULL) && (operand_5195 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_5171 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5171) ;
      cPtr_typeGalgas_lstring * operand_5195 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_5195) ;
      if ((operand_5171 != NULL) && (operand_5195 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_5171 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_5171) ;
        cPtr_typeGalgasUndefinedListType * operand_5195 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_5195) ;
        if ((operand_5171 != NULL) && (operand_5195 != NULL)) {
          const GGS_bool cond_5752 = (operand_5171->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))).operator_isNotEqual (operand_5195->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (138))) ;
          if (cond_5752.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: lists should have the same type (here '@")).operator_concat (operand_5171->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_5195->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (141)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgasListmapType * operand_5171 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_5171) ;
          cPtr_typeGalgasListmapType * operand_5195 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_5195) ;
          if ((operand_5171 != NULL) && (operand_5195 != NULL)) {
            const GGS_bool cond_6156 = (operand_5171->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (144))).operator_isNotEqual (operand_5195->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (144))) ;
            if (cond_6156.isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: listmaps should have the same type (here '@")).operator_concat (operand_5171->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_5195->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (146)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (147)) ;
            }
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: @")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (150)))).operator_concat (GGS_string (" and @"))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (151)))).operator_concat (GGS_string (" objects cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (153)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_7040 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7064 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_7040 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7040) ;
    cPtr_typeGalgas_binaryset * operand_7064 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7064) ;
    if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_7040 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7040) ;
      cPtr_typeGalgas_bool * operand_7064 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7064) ;
      if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_7040 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7040) ;
        cPtr_typeGalgas_uint * operand_7064 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7064) ;
        if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_7040 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7040) ;
          cPtr_typeGalgas_uint64 * operand_7064 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7064) ;
          if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_7040 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_7040) ;
            cPtr_typeGalgas_stringset * operand_7064 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_7064) ;
            if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_7040 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7040) ;
              cPtr_typeGalgas_sint * operand_7064 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7064) ;
              if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_7040 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7040) ;
                cPtr_typeGalgas_sint64 * operand_7064 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7064) ;
                if ((operand_7040 != NULL) && (operand_7064 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (183)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (184)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (186)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_8572 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8596 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8572 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8572) ;
    cPtr_typeGalgas_binaryset * operand_8596 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8596) ;
    if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8572 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8572) ;
      cPtr_typeGalgas_bool * operand_8596 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8596) ;
      if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8572 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8572) ;
        cPtr_typeGalgas_uint * operand_8596 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8596) ;
        if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8572 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8572) ;
          cPtr_typeGalgas_uint64 * operand_8596 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8596) ;
          if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8572 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8572) ;
            cPtr_typeGalgas_sint * operand_8596 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8596) ;
            if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8572 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8572) ;
              cPtr_typeGalgas_sint64 * operand_8596 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8596) ;
              if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_8572 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_8572) ;
                cPtr_typeGalgas_stringset * operand_8596 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_8596) ;
                if ((operand_8572 != NULL) && (operand_8596 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (216)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (217)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (219)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_10105 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_10129 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_10105 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10105) ;
    cPtr_typeGalgas_binaryset * operand_10129 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10129) ;
    if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_10105 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10105) ;
      cPtr_typeGalgas_bool * operand_10129 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10129) ;
      if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_10105 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10105) ;
        cPtr_typeGalgas_uint * operand_10129 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10129) ;
        if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_10105 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10105) ;
          cPtr_typeGalgas_uint64 * operand_10129 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10129) ;
          if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_10105 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10105) ;
            cPtr_typeGalgas_sint * operand_10129 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10129) ;
            if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_10105 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10105) ;
              cPtr_typeGalgas_sint64 * operand_10129 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10129) ;
              if ((operand_10105 != NULL) && (operand_10129 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (247)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (248)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (250)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (263)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkLogicalNegateOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12605 = var_cas_inOperandType ; // CAST instruction
    if (_var_12605.getPtr () != NULL) {
      macroValidPointer (_var_12605.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12605.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12605.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12605.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12605.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12605.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (290)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (292)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_13175 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_13199 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_13175 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13175) ;
    cPtr_typeGalgas_binaryset * operand_13199 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13199) ;
    if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_13175 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13175) ;
      cPtr_typeGalgas_stringset * operand_13199 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13199) ;
      if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_13175 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13175) ;
        cPtr_typeGalgas_bool * operand_13199 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13199) ;
        if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_13175 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13175) ;
          cPtr_typeGalgas_char * operand_13199 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13199) ;
          if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_13175 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13175) ;
            cPtr_typeGalgas_uint * operand_13199 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13199) ;
            if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_13175 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13175) ;
              cPtr_typeGalgas_sint * operand_13199 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13199) ;
              if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_13175 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13175) ;
                cPtr_typeGalgas_uint64 * operand_13199 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13199) ;
                if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_13175 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13175) ;
                  cPtr_typeGalgas_sint64 * operand_13199 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13199) ;
                  if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_13175 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13175) ;
                    cPtr_typeGalgas_double * operand_13199 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13199) ;
                    if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_13175 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13175) ;
                      cPtr_typeGalgas_string * operand_13199 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13199) ;
                      if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_13175 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13175) ;
                        cPtr_typeGalgas_lbool * operand_13199 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13199) ;
                        if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_13175 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13175) ;
                          cPtr_typeGalgas_lchar * operand_13199 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13199) ;
                          if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_13175 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13175) ;
                            cPtr_typeGalgas_luint * operand_13199 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13199) ;
                            if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_13175 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13175) ;
                              cPtr_typeGalgas_lsint * operand_13199 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13199) ;
                              if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_13175 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13175) ;
                                cPtr_typeGalgas_luint64 * operand_13199 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13199) ;
                                if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_13175 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13175) ;
                                  cPtr_typeGalgas_lsint64 * operand_13199 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13199) ;
                                  if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_13175 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13175) ;
                                    cPtr_typeGalgas_ldouble * operand_13199 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13199) ;
                                    if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_13175 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13175) ;
                                      cPtr_typeGalgas_lstring * operand_13199 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13199) ;
                                      if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_13175 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13175) ;
                                        cPtr_typeGalgas_location * operand_13199 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13199) ;
                                        if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_13175 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13175) ;
                                          cPtr_typeGalgas_filewrapper * operand_13199 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13199) ;
                                          if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_13175 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13175) ;
                                            cPtr_typeGalgas_enum * operand_13199 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13199) ;
                                            if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                              const GGS_bool cond_14754 = (operand_13175->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327))).operator_isNotEqual (operand_13199->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (327))) ;
                                              if (cond_14754.isBuiltAndTrue ()) {
                                                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_13175->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (328)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_13199->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (330)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_13175 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13175) ;
                                              cPtr_typeGalgasUndefinedListType * operand_13199 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13199) ;
                                              if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                                const GGS_bool cond_15101 = (operand_13175->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332))).operator_isNotEqual (operand_13199->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332))) ;
                                                if (cond_15101.isBuiltAndTrue ()) {
                                                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_13175->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (333)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_13199->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (334)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (335)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_13175 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13175) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_13199 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13199) ;
                                                if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                                  const GGS_bool cond_15445 = (operand_13175->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338))).operator_isNotEqual (operand_13199->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338))) ;
                                                  if (cond_15445.isBuiltAndTrue ()) {
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_13175->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (339)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_13199->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (340)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (341)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_13175 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13175) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_13199 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13199) ;
                                                  if ((operand_13175 != NULL) && (operand_13199 != NULL)) {
                                                    const GGS_bool cond_15789 = (operand_13175->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345))).operator_isNotEqual (operand_13199->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (345))) ;
                                                    if (cond_15789.isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_13175->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (346)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_13199->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (347)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (348)) ;
                                                    }
                                                  }else{
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (350)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (351)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (352)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_16556 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16580 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_16556 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16556) ;
    cPtr_typeGalgas_stringset * operand_16580 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16580) ;
    if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_16556 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16556) ;
      cPtr_typeGalgas_bool * operand_16580 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16580) ;
      if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_16556 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16556) ;
        cPtr_typeGalgas_char * operand_16580 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16580) ;
        if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_16556 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16556) ;
          cPtr_typeGalgas_uint * operand_16580 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16580) ;
          if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_16556 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16556) ;
            cPtr_typeGalgas_sint * operand_16580 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16580) ;
            if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_16556 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16556) ;
              cPtr_typeGalgas_uint64 * operand_16580 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16580) ;
              if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_16556 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16556) ;
                cPtr_typeGalgas_sint64 * operand_16580 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16580) ;
                if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_16556 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16556) ;
                  cPtr_typeGalgas_double * operand_16580 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16580) ;
                  if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_16556 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16556) ;
                    cPtr_typeGalgas_string * operand_16580 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16580) ;
                    if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_16556 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16556) ;
                      cPtr_typeGalgas_enum * operand_16580 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16580) ;
                      if ((operand_16556 != NULL) && (operand_16580 != NULL)) {
                        const GGS_bool cond_17436 = (operand_16556->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376))).operator_isNotEqual (operand_16580->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (376))) ;
                        if (cond_17436.isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_16556->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (377)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_16580->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (378)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (379)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (381)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (382)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (383)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_18225 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18249 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18225 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18225) ;
    cPtr_typeGalgas_uint * operand_18249 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18249) ;
    if ((operand_18225 != NULL) && (operand_18249 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18225 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18225) ;
      cPtr_typeGalgas_uint * operand_18249 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18249) ;
      if ((operand_18225 != NULL) && (operand_18249 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18225 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18225) ;
        cPtr_typeGalgas_uint * operand_18249 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18249) ;
        if ((operand_18225 != NULL) && (operand_18249 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18225 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18225) ;
          cPtr_typeGalgas_uint * operand_18249 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18249) ;
          if ((operand_18225 != NULL) && (operand_18249 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18225 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18225) ;
            cPtr_typeGalgas_uint * operand_18249 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18249) ;
            if ((operand_18225 != NULL) && (operand_18249 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (409)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (410)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (413)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19242 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19266 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_19242 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_19242) ;
    cPtr_typeGalgas_uint * operand_19266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19266) ;
    if ((operand_19242 != NULL) && (operand_19266 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_19242 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19242) ;
      cPtr_typeGalgas_uint * operand_19266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19266) ;
      if ((operand_19242 != NULL) && (operand_19266 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_19242 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19242) ;
        cPtr_typeGalgas_uint * operand_19266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19266) ;
        if ((operand_19242 != NULL) && (operand_19266 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_19242 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19242) ;
          cPtr_typeGalgas_uint * operand_19266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19266) ;
          if ((operand_19242 != NULL) && (operand_19266 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_19242 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19242) ;
            cPtr_typeGalgas_uint * operand_19266 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19266) ;
            if ((operand_19242 != NULL) && (operand_19266 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (435)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (436)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (439)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20568 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20592 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20568 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20568) ;
    cPtr_typeGalgas_uint * operand_20592 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20592) ;
    if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20568 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20568) ;
      cPtr_typeGalgas_sint * operand_20592 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20592) ;
      if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20568 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20568) ;
        cPtr_typeGalgas_uint64 * operand_20592 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20592) ;
        if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20568 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20568) ;
          cPtr_typeGalgas_sint64 * operand_20592 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20592) ;
          if ((operand_20568 != NULL) && (operand_20592 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (463)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (464)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (467)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_21804 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21828 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21804 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21804) ;
    cPtr_typeGalgas_uint * operand_21828 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21828) ;
    if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21804 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21804) ;
      cPtr_typeGalgas_sint * operand_21828 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21828) ;
      if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21804 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21804) ;
        cPtr_typeGalgas_uint64 * operand_21828 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21828) ;
        if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21804 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21804) ;
          cPtr_typeGalgas_sint64 * operand_21828 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21828) ;
          if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21804 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21804) ;
            cPtr_typeGalgas_stringset * operand_21828 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21828) ;
            if ((operand_21804 != NULL) && (operand_21828 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (493)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (494)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (497)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_23146 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23170 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23146 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23146) ;
    cPtr_typeGalgas_uint * operand_23170 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23170) ;
    if ((operand_23146 != NULL) && (operand_23170 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23146 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23146) ;
      cPtr_typeGalgas_sint * operand_23170 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23170) ;
      if ((operand_23146 != NULL) && (operand_23170 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23146 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23146) ;
        cPtr_typeGalgas_uint64 * operand_23170 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23170) ;
        if ((operand_23146 != NULL) && (operand_23170 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23146 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23146) ;
          cPtr_typeGalgas_sint64 * operand_23170 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23170) ;
          if ((operand_23146 != NULL) && (operand_23170 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (521)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (522)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (525)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_24382 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24406 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24382 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24382) ;
    cPtr_typeGalgas_uint * operand_24406 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24406) ;
    if ((operand_24382 != NULL) && (operand_24406 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24382 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24382) ;
      cPtr_typeGalgas_sint * operand_24406 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24406) ;
      if ((operand_24382 != NULL) && (operand_24406 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24382 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24382) ;
        cPtr_typeGalgas_uint64 * operand_24406 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24406) ;
        if ((operand_24382 != NULL) && (operand_24406 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24382 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24382) ;
          cPtr_typeGalgas_sint64 * operand_24406 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24406) ;
          if ((operand_24382 != NULL) && (operand_24406 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (549)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (550)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (553)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_25612 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25636 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25612 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25612) ;
    cPtr_typeGalgas_uint * operand_25636 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25636) ;
    if ((operand_25612 != NULL) && (operand_25636 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25612 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25612) ;
      cPtr_typeGalgas_sint * operand_25636 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25636) ;
      if ((operand_25612 != NULL) && (operand_25636 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25612 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25612) ;
        cPtr_typeGalgas_uint64 * operand_25636 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25636) ;
        if ((operand_25612 != NULL) && (operand_25636 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25612 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25612) ;
          cPtr_typeGalgas_sint64 * operand_25636 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25636) ;
          if ((operand_25612 != NULL) && (operand_25636 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (577)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (578)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (581)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "unary_minus_type_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_27076 = var_cas_inExpressionType ; // CAST instruction
    if (_var_27076.getPtr () != NULL) {
      macroValidPointer (_var_27076.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_27076.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_27076.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (600)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (604)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_613_17_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchConcatOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (646)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_613_17_parse (galgasTemplateScanner & inLexique) {
  nt_concatenation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          nt_concatenation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_concatenation_term_templateExpressionParser_660_25_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (693)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (714)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_concatenation_term_templateExpressionParser_660_25_parse (galgasTemplateScanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_728_20_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_templateExpressionParser_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (761)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_728_20_parse (galgasTemplateScanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_templateExpressionParser_2 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_775_22_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_templateExpressionParser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (806)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (824)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (842)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (860)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (878)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (896)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_775_22_parse (galgasTemplateScanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_templateExpressionParser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_908_24_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (940)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (957)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (974)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (991)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_908_24_parse (galgasTemplateScanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_1002_11_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_templateExpressionParser_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1034)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1051)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1068)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_1002_11_parse (galgasTemplateScanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_templateExpressionParser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1079_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_checkForTemplate (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1099)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1079_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1109_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_44485_0 ;
  nt_read_access_ (inLexique, automatic_var_44485_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_inTemplateVariableMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1109_13_parse (galgasTemplateScanner & inLexique) {
  nt_read_access_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1128_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1128_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1154_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1175)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1154_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1184_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1205)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1184_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1214_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1214_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1233_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1233_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1252_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1252_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1272_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1272_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1292_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1292_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1312_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1312_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1332_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1332_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1352_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression ::constructor_new (inLexique, var_cas_literalChar COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1352_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_char) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1371_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1383))) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, var_cas_literalStringList COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1371_13_parse (galgasTemplateScanner & inLexique) {
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_string) COMMA_HERE) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1402_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_template) COMMA_HERE) ;
      GGS_typeExpression  var_cas_callingExpression ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_callingExpression, var_cas_expressionType) ;
      GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_expressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1429))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1429))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1429)) COMMA_HERE) ;
      GGS_L_EXsignature  var_cas_signature ;
      GGS_categoryMethodKind automatic_var_57613_0 ;
      const GGS_EXcategoryTemplateMap  temp_57593 = var_cas_inSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1431)) ;
      if (temp_57593.isBuilt ()) {
        temp_57593 (HERE)->method_searchKey (inLexique, var_cas_key, automatic_var_57613_0, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (1431)) ;
      }
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_L_EXsignature::cEnumerator enumerator_57706 (var_cas_signature, true) ;
        const GGS_L_EXsignature::cElement * operand_57706 = NULL ;
        while (((operand_57706 = enumerator_57706.nextObject ()))) {
          macroValidPointer (operand_57706) ;
          var_cas_formalAttributeList.addAssign_operation (operand_57706->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
        }
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeCategoryTemplateCall ::constructor_new (inLexique, var_cas_callingExpression, var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)), var_cas_templateName, var_cas_expressionList COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      inLexique.assignFromAttribute_tokenString (var_cas_className) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      const GGS_M_semanticsEntitiesForUse  temp_58437 = var_cas_inEntitiesMap ;
      if (temp_58437.isBuilt ()) {
        temp_58437 (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1458)) ;
      }
      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1459)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      GGS_lstring  var_cas_mClassMethodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      const GGS_AC_galgasType  temp_58779 = var_cas_type ;
      if (temp_58779.isBuilt ()) {
        temp_58779 (HERE)->method_handleConstructorInvocation (inLexique, var_cas_mClassMethodName, var_cas_formalAttributeList, var_cas_hasLexiqueAndLocationArguments, var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_type, var_cas_mClassMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1478)), var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_HERE) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      GGS_M_regularFiles  var_cas_regularFileMap ;
      GGS_filewrapperTemplateMapEX  var_cas_templateMap ;
      const GGS_M_filewrappers  temp_59571 = var_cas_inSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (1489)) ;
      if (temp_59571.isBuilt ()) {
        temp_59571 (HERE)->method_searchKey (inLexique, var_cas_filewrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (1489)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
      const GGS_filewrapperTemplateMapEX  temp_59807 = var_cas_templateMap ;
      if (temp_59807.isBuilt ()) {
        temp_59807 (HERE)->method_searchKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (1496)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeFileWrapperTemplateCall ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      GGS_string var_cas_conversionMethod ;
      GGS_string var_cas_categoryReaderClassBaseName ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_inSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1532)),  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod,  var_cas_categoryReaderClassBaseName,  var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1530)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod, var_cas_categoryReaderClassBaseName, var_cas_hasLexiqueAndLocationArguments COMMA_HERE) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          const GGS_bool cond_61890 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1566))).operator_isEqual (GGS_string ("value")) ;
          if (cond_61890.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
          }else if (cond_61890.isBuiltAndFalse ()) {
            const GGS_bool cond_61987 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1568))).operator_isEqual (GGS_string ("char")) ;
            if (cond_61987.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_HERE) ;
            }else if (cond_61987.isBuiltAndFalse ()) {
              const GGS_bool cond_62088 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1570))).operator_isEqual (GGS_string ("string")) ;
              if (cond_62088.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
              }else if (cond_62088.isBuiltAndFalse ()) {
                const GGS_bool cond_62189 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1572))).operator_isEqual (GGS_string ("comment")) ;
                if (cond_62189.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
                }else if (cond_62189.isBuiltAndFalse ()) {
                  var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1576)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
          var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, GGS_string ("galgas_cli_options"), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          const GGS_M_optionComponents  temp_62642 = var_cas_inOptionsComponentsMapForUse ;
          if (temp_62642.isBuilt ()) {
            temp_62642 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1583)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          const GGS_bool cond_63415 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1587))).operator_isEqual (GGS_string ("value")) ;
          if (cond_63415.isBuiltAndTrue ()) {
            const GGS_bool cond_62984 = var_cas_boolOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1588))) ;
            if (cond_62984.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
            }else if (cond_62984.isBuiltAndFalse ()) {
              const GGS_bool cond_63100 = var_cas_uintOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1590))) ;
              if (cond_63100.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
              }else if (cond_63100.isBuiltAndFalse ()) {
                const GGS_bool cond_63219 = var_cas_stringOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1592))) ;
                if (cond_63219.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
                }else if (cond_63219.isBuiltAndFalse ()) {
                  var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1595)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1595)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1597)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }else if (cond_63415.isBuiltAndFalse ()) {
            const GGS_bool cond_63512 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1598))).operator_isEqual (GGS_string ("char")) ;
            if (cond_63512.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_HERE) ;
            }else if (cond_63512.isBuiltAndFalse ()) {
              const GGS_bool cond_63613 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1600))).operator_isEqual (GGS_string ("string")) ;
              if (cond_63613.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
              }else if (cond_63613.isBuiltAndFalse ()) {
                const GGS_bool cond_63714 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1602))).operator_isEqual (GGS_string ("comment")) ;
                if (cond_63714.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
                }else if (cond_63714.isBuiltAndFalse ()) {
                  var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1606)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
          var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1402_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_template) COMMA_HERE) ;
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_filewrapper) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      } break ;
    case 4 : {
      nt_expression_parse (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
      nt_output_expression_list_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1620_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_64944 = var_cas_inEntitiesMap ;
  if (temp_64944.isBuilt ()) {
    temp_64944 (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1633)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_65524 = var_cas_entite ; // CAST instruction
    if (_var_65524.getPtr () != NULL) {
      macroValidPointer (_var_65524.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_65524.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_65524.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1638)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_65524.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_65524.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1641)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1642)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1646)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1649)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_65692 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_65692 = NULL ;
    while (((operand_65692 = enumerator_65692.nextObject ()))) {
      macroValidPointer (operand_65692) ;
      var_cas_listeAttributsSemantiques.addAssign_operation (operand_65692->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1620_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1675_18_ (galgasTemplateScanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  const GGS_templateVariableMap  temp_66695 = var_cas_inTemplateVariableMap ;
  if (temp_66695.isBuilt ()) {
    temp_66695 (HERE)->method_searchKey (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1682)) ;
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1675_18_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1691_29_ (galgasTemplateScanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_templateExpressionParser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation = GGS_location (inLexique) ;
  const GGS_bool cond_68200 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictInf (var_cas_effectiveTypesList.reader_length ()) ;
  if (cond_68200.isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (1722)) ;
  }else if (cond_68200.isBuiltAndFalse ()) {
    const GGS_bool cond_68340 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictSup (var_cas_effectiveTypesList.reader_length ()) ;
    if (cond_68340.isBuiltAndTrue ()) {
      var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1724)) ;
    }else if (cond_68340.isBuiltAndFalse ()) {
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_68375 (var_cas_inFormalAttributesList, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_68375 = NULL ;
        GGS_typeTypesList::cEnumerator enumerator_68395 (var_cas_effectiveTypesList, true) ;
        const GGS_typeTypesList::cElement * operand_68395 = NULL ;
        while (((operand_68375 = enumerator_68375.nextObject ()))
            && ((operand_68395 = enumerator_68395.nextObject ()))) {
          macroValidPointer (operand_68375) ;
          macroValidPointer (operand_68395) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_68375->mAttributType,  operand_68395->mType,  operand_68395->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1726)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1691_29_parse (galgasTemplateScanner & inLexique) {
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_templateExpressionParser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  GGS_lstring::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

