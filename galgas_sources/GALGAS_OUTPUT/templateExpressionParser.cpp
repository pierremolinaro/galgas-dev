//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'templateExpressionParser.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 24th, 2010, at 21h31'44"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "templateExpressionParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateExpressionParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "matchConcatOperatorForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchConcatOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchConcatOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_5063 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_5087 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_string * operand_5063 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5063) ;
    cPtr_typeGalgas_string * operand_5087 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5087) ;
    if ((operand_5063 != NULL) && (operand_5087 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_string * operand_5063 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_5063) ;
      cPtr_typeGalgas_lstring * operand_5087 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_5087) ;
      if ((operand_5063 != NULL) && (operand_5087 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgasUndefinedListType * operand_5063 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_5063) ;
        cPtr_typeGalgasUndefinedListType * operand_5087 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_5087) ;
        if ((operand_5063 != NULL) && (operand_5087 != NULL)) {
          const GGS_bool cond_5644 = (operand_5063->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129))).operator_isNotEqual (operand_5087->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (129))) ;
          if (cond_5644.isBuiltAndTrue ()) {
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: lists should have the same type (here '@")).operator_concat (operand_5063->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_5087->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (132)) ;
          }
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgasListmapType * operand_5063 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_5063) ;
          cPtr_typeGalgasListmapType * operand_5087 = dynamic_cast <cPtr_typeGalgasListmapType *> (ptr_5087) ;
          if ((operand_5063 != NULL) && (operand_5087 != NULL)) {
            const GGS_bool cond_6048 = (operand_5063->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))).operator_isNotEqual (operand_5087->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
            if (cond_6048.isBuiltAndTrue ()) {
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: listmaps should have the same type (here '@")).operator_concat (operand_5063->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string ("' is different from '@"))).operator_concat (operand_5087->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (138)) ;
            }
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("concatenation operator error: @")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (141)))).operator_concat (GGS_string (" and @"))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_concat (GGS_string (" objects cannot be concatened")) COMMA_SOURCE_FILE_AT_LINE (144)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchConcatOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_6931 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6955 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6931 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6931) ;
    cPtr_typeGalgas_binaryset * operand_6955 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6955) ;
    if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6931 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6931) ;
      cPtr_typeGalgas_bool * operand_6955 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6955) ;
      if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6931 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6931) ;
        cPtr_typeGalgas_uint * operand_6955 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6955) ;
        if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6931 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6931) ;
          cPtr_typeGalgas_uint64 * operand_6955 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6955) ;
          if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_6931 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6931) ;
            cPtr_typeGalgas_stringset * operand_6955 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6955) ;
            if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_6931 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6931) ;
              cPtr_typeGalgas_sint * operand_6955 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6955) ;
              if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_6931 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6931) ;
                cPtr_typeGalgas_sint64 * operand_6955 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6955) ;
                if ((operand_6931 != NULL) && (operand_6955 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (174)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (175)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (177)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_8462 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_8486 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_8462 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8462) ;
    cPtr_typeGalgas_binaryset * operand_8486 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_8486) ;
    if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_8462 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8462) ;
      cPtr_typeGalgas_bool * operand_8486 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8486) ;
      if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_8462 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8462) ;
        cPtr_typeGalgas_uint * operand_8486 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8486) ;
        if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_8462 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8462) ;
          cPtr_typeGalgas_uint64 * operand_8486 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_8486) ;
          if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_8462 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8462) ;
            cPtr_typeGalgas_sint * operand_8486 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8486) ;
            if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_8462 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8462) ;
              cPtr_typeGalgas_sint64 * operand_8486 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_8486) ;
              if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_8462 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_8462) ;
                cPtr_typeGalgas_stringset * operand_8486 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_8486) ;
                if ((operand_8462 != NULL) && (operand_8486 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (207)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (208)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (210)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_9994 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_10018 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_9994 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_9994) ;
    cPtr_typeGalgas_binaryset * operand_10018 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10018) ;
    if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_9994 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_9994) ;
      cPtr_typeGalgas_bool * operand_10018 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10018) ;
      if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_9994 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_9994) ;
        cPtr_typeGalgas_uint * operand_10018 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10018) ;
        if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_9994 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_9994) ;
          cPtr_typeGalgas_uint64 * operand_10018 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10018) ;
          if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_9994 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_9994) ;
            cPtr_typeGalgas_sint * operand_10018 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10018) ;
            if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_9994 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_9994) ;
              cPtr_typeGalgas_sint64 * operand_10018 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10018) ;
              if ((operand_9994 != NULL) && (operand_10018 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (238)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (239)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (241)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (254)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkLogicalNegateOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_12492 = var_cas_inOperandType ; // CAST instruction
    if (_var_12492.getPtr () != NULL) {
      macroValidPointer (_var_12492.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_12492.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_12492.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_12492.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_12492.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_12492.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (283)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_13062 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_13086 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_13062 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13062) ;
    cPtr_typeGalgas_binaryset * operand_13086 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_13086) ;
    if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_13062 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13062) ;
      cPtr_typeGalgas_stringset * operand_13086 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_13086) ;
      if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_13062 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13062) ;
        cPtr_typeGalgas_bool * operand_13086 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_13086) ;
        if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_13062 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13062) ;
          cPtr_typeGalgas_char * operand_13086 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_13086) ;
          if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_13062 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13062) ;
            cPtr_typeGalgas_uint * operand_13086 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_13086) ;
            if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_13062 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13062) ;
              cPtr_typeGalgas_sint * operand_13086 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_13086) ;
              if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_13062 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13062) ;
                cPtr_typeGalgas_uint64 * operand_13086 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_13086) ;
                if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_13062 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13062) ;
                  cPtr_typeGalgas_sint64 * operand_13086 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_13086) ;
                  if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_13062 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13062) ;
                    cPtr_typeGalgas_double * operand_13086 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_13086) ;
                    if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_13062 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13062) ;
                      cPtr_typeGalgas_string * operand_13086 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_13086) ;
                      if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_13062 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13062) ;
                        cPtr_typeGalgas_lbool * operand_13086 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_13086) ;
                        if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_13062 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13062) ;
                          cPtr_typeGalgas_lchar * operand_13086 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_13086) ;
                          if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_13062 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13062) ;
                            cPtr_typeGalgas_luint * operand_13086 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_13086) ;
                            if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_13062 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13062) ;
                              cPtr_typeGalgas_lsint * operand_13086 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_13086) ;
                              if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_13062 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13062) ;
                                cPtr_typeGalgas_luint64 * operand_13086 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_13086) ;
                                if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_13062 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13062) ;
                                  cPtr_typeGalgas_lsint64 * operand_13086 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_13086) ;
                                  if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_13062 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13062) ;
                                    cPtr_typeGalgas_ldouble * operand_13086 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_13086) ;
                                    if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_13062 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13062) ;
                                      cPtr_typeGalgas_lstring * operand_13086 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_13086) ;
                                      if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_13062 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13062) ;
                                        cPtr_typeGalgas_location * operand_13086 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_13086) ;
                                        if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_13062 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13062) ;
                                          cPtr_typeGalgas_filewrapper * operand_13086 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_13086) ;
                                          if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_13062 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13062) ;
                                            cPtr_typeGalgas_enum * operand_13086 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_13086) ;
                                            if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                              const GGS_bool cond_14641 = (operand_13062->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (318))).operator_isNotEqual (operand_13086->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (318))) ;
                                              if (cond_14641.isBuiltAndTrue ()) {
                                                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_13062->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (319)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_13086->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (320)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (321)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_13062 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13062) ;
                                              cPtr_typeGalgasUndefinedListType * operand_13086 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_13086) ;
                                              if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                                const GGS_bool cond_14988 = (operand_13062->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (323))).operator_isNotEqual (operand_13086->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (323))) ;
                                                if (cond_14988.isBuiltAndTrue ()) {
                                                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_13062->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (324)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_13086->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (325)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (326)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_13062 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13062) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_13086 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_13086) ;
                                                if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                                  const GGS_bool cond_15332 = (operand_13062->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))).operator_isNotEqual (operand_13086->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (329))) ;
                                                  if (cond_15332.isBuiltAndTrue ()) {
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_13062->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_13086->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (331)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (332)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_13062 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13062) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_13086 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_13086) ;
                                                  if ((operand_13062 != NULL) && (operand_13086 != NULL)) {
                                                    const GGS_bool cond_15676 = (operand_13062->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (336))).operator_isNotEqual (operand_13086->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (336))) ;
                                                    if (cond_15676.isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_13062->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (337)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_13086->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (338)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (339)) ;
                                                    }
                                                  }else{
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (341)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (342)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (343)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_16443 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_16467 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_16443 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16443) ;
    cPtr_typeGalgas_stringset * operand_16467 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_16467) ;
    if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_16443 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16443) ;
      cPtr_typeGalgas_bool * operand_16467 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_16467) ;
      if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_16443 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16443) ;
        cPtr_typeGalgas_char * operand_16467 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_16467) ;
        if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_16443 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16443) ;
          cPtr_typeGalgas_uint * operand_16467 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16467) ;
          if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_16443 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16443) ;
            cPtr_typeGalgas_sint * operand_16467 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16467) ;
            if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_16443 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16443) ;
              cPtr_typeGalgas_uint64 * operand_16467 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16467) ;
              if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_16443 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16443) ;
                cPtr_typeGalgas_sint64 * operand_16467 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16467) ;
                if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_16443 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16443) ;
                  cPtr_typeGalgas_double * operand_16467 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_16467) ;
                  if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_16443 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16443) ;
                    cPtr_typeGalgas_string * operand_16467 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_16467) ;
                    if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_16443 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16443) ;
                      cPtr_typeGalgas_enum * operand_16467 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_16467) ;
                      if ((operand_16443 != NULL) && (operand_16467 != NULL)) {
                        const GGS_bool cond_17323 = (operand_16443->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367))).operator_isNotEqual (operand_16467->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (367))) ;
                        if (cond_17323.isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_16443->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (368)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_16467->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (369)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (370)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (372)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (373)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (374)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_18112 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18136 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_18112 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_18112) ;
    cPtr_typeGalgas_uint * operand_18136 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18136) ;
    if ((operand_18112 != NULL) && (operand_18136 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_18112 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18112) ;
      cPtr_typeGalgas_uint * operand_18136 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18136) ;
      if ((operand_18112 != NULL) && (operand_18136 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_18112 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18112) ;
        cPtr_typeGalgas_uint * operand_18136 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18136) ;
        if ((operand_18112 != NULL) && (operand_18136 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_18112 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18112) ;
          cPtr_typeGalgas_uint * operand_18136 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18136) ;
          if ((operand_18112 != NULL) && (operand_18136 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_18112 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18112) ;
            cPtr_typeGalgas_uint * operand_18136 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18136) ;
            if ((operand_18112 != NULL) && (operand_18136 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (400)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (401)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (404)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19128 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19152 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_19128 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_19128) ;
    cPtr_typeGalgas_uint * operand_19152 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19152) ;
    if ((operand_19128 != NULL) && (operand_19152 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_19128 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19128) ;
      cPtr_typeGalgas_uint * operand_19152 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19152) ;
      if ((operand_19128 != NULL) && (operand_19152 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_19128 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19128) ;
        cPtr_typeGalgas_uint * operand_19152 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19152) ;
        if ((operand_19128 != NULL) && (operand_19152 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_19128 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19128) ;
          cPtr_typeGalgas_uint * operand_19152 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19152) ;
          if ((operand_19128 != NULL) && (operand_19152 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_19128 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19128) ;
            cPtr_typeGalgas_uint * operand_19152 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19152) ;
            if ((operand_19128 != NULL) && (operand_19152 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (426)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (427)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (430)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20453 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20477 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20453 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20453) ;
    cPtr_typeGalgas_uint * operand_20477 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20477) ;
    if ((operand_20453 != NULL) && (operand_20477 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20453 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20453) ;
      cPtr_typeGalgas_sint * operand_20477 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20477) ;
      if ((operand_20453 != NULL) && (operand_20477 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20453 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20453) ;
        cPtr_typeGalgas_uint64 * operand_20477 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20477) ;
        if ((operand_20453 != NULL) && (operand_20477 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20453 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20453) ;
          cPtr_typeGalgas_sint64 * operand_20477 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20477) ;
          if ((operand_20453 != NULL) && (operand_20477 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (454)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (455)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (458)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_21688 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_21712 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_21688 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21688) ;
    cPtr_typeGalgas_uint * operand_21712 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_21712) ;
    if ((operand_21688 != NULL) && (operand_21712 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_21688 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21688) ;
      cPtr_typeGalgas_sint * operand_21712 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_21712) ;
      if ((operand_21688 != NULL) && (operand_21712 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_21688 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21688) ;
        cPtr_typeGalgas_uint64 * operand_21712 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_21712) ;
        if ((operand_21688 != NULL) && (operand_21712 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_21688 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21688) ;
          cPtr_typeGalgas_sint64 * operand_21712 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_21712) ;
          if ((operand_21688 != NULL) && (operand_21712 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_21688 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21688) ;
            cPtr_typeGalgas_stringset * operand_21712 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_21712) ;
            if ((operand_21688 != NULL) && (operand_21712 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (484)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (485)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (488)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_23029 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23053 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23029 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23029) ;
    cPtr_typeGalgas_uint * operand_23053 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23053) ;
    if ((operand_23029 != NULL) && (operand_23053 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23029 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23029) ;
      cPtr_typeGalgas_sint * operand_23053 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23053) ;
      if ((operand_23029 != NULL) && (operand_23053 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23029 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23029) ;
        cPtr_typeGalgas_uint64 * operand_23053 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23053) ;
        if ((operand_23029 != NULL) && (operand_23053 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23029 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23029) ;
          cPtr_typeGalgas_sint64 * operand_23053 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23053) ;
          if ((operand_23029 != NULL) && (operand_23053 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (512)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (513)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (516)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_24264 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_24288 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_24264 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24264) ;
    cPtr_typeGalgas_uint * operand_24288 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_24288) ;
    if ((operand_24264 != NULL) && (operand_24288 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_24264 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24264) ;
      cPtr_typeGalgas_sint * operand_24288 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_24288) ;
      if ((operand_24264 != NULL) && (operand_24288 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_24264 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24264) ;
        cPtr_typeGalgas_uint64 * operand_24288 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_24288) ;
        if ((operand_24264 != NULL) && (operand_24288 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_24264 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24264) ;
          cPtr_typeGalgas_sint64 * operand_24288 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_24288) ;
          if ((operand_24264 != NULL) && (operand_24288 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (540)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (541)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (544)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_25493 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_25517 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_25493 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25493) ;
    cPtr_typeGalgas_uint * operand_25517 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_25517) ;
    if ((operand_25493 != NULL) && (operand_25517 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_25493 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25493) ;
      cPtr_typeGalgas_sint * operand_25517 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_25517) ;
      if ((operand_25493 != NULL) && (operand_25517 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_25493 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25493) ;
        cPtr_typeGalgas_uint64 * operand_25517 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_25517) ;
        if ((operand_25493 != NULL) && (operand_25517 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_25493 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25493) ;
          cPtr_typeGalgas_sint64 * operand_25517 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_25517) ;
          if ((operand_25493 != NULL) && (operand_25517 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (568)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (569)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (572)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "unary_minus_type_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_26955 = var_cas_inExpressionType ; // CAST instruction
    if (_var_26955.getPtr () != NULL) {
      macroValidPointer (_var_26955.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_26955.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_26955.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (591)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (595)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_expression_i0_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_concatenation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_concatenation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeConcatOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (636)) ;
          ::routine_matchConcatOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (637)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_concatenation_5F_term_i1_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (683)) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (684)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (704)) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (705)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_relation_5F_term_i2_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_5F_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_templateExpressionParser_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_5F_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (751)) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (752)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_relation_5F_factor_i3_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_templateExpressionParser_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (797)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (798)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (799)) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (815)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (816)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (833)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (834)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (835)) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (851)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (852)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (853)) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (869)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (870)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (871)) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_5F_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (887)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (888)) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_simple_5F_expression_i4_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (931)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (932)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (948)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (949)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (965)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (966)) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (982)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (983)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_term_i5_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_templateExpressionParser_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1025)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1026)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1042)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1043)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1059)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1060)) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i6_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_checkForTemplate (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1090)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1091)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i7_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_44364_0 ;
  nt_read_5F_access_ (inLexique, automatic_var_44364_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_inTemplateVariableMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (1110)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i8_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_outExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i9_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (1165)) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1166)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i10_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (1195)) ;
  ::routine_checkLogicalNegateOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1196)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i11_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1214)) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1215)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i12_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1233)) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i13_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1253)) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i14_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1273)) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1274)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i15_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1293)) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1294)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i16_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (1313)) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1314)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i17_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_SOURCE_FILE_AT_LINE (1333)) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1334)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i18_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralCharExpression ::constructor_new (inLexique, var_cas_literalChar COMMA_SOURCE_FILE_AT_LINE (1352)) ;
  var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1353)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i19_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXsemanticContext /* var_cas_inSemanticContext */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                const GGS_templateVariableMap  /* var_cas_inTemplateVariableMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1374))) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_typeLiteralStringExpression ::constructor_new (inLexique, var_cas_literalStringList COMMA_SOURCE_FILE_AT_LINE (1377)) ;
  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1378)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i20_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_template) COMMA_HERE) ;
      GGS_typeExpression  var_cas_callingExpression ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_callingExpression, var_cas_expressionType) ;
      GGS_typeGalgasClassType  var_cas_classType = GGS_typeGalgasClassType::castFrom (inLexique, var_cas_expressionType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1416)) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_lstring  var_cas_key = GGS_lstring ::constructor_new (inLexique, ((var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1420))).operator_concat (GGS_string (":"))).operator_concat (var_cas_templateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1420))), var_cas_templateName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1420)) COMMA_SOURCE_FILE_AT_LINE (1420)) ;
      GGS_L_EXsignature  var_cas_signature ;
      GGS_categoryMethodKind automatic_var_57492_0 ;
      const GGS_EXcategoryTemplateMap  temp_57472 = var_cas_inSemanticContext.reader_mCategoryTemplateMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1422)) ;
      if (temp_57472.isBuilt ()) {
        temp_57472 (HERE)->method_searchKey (inLexique, var_cas_key, automatic_var_57492_0, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (1422)) ;
      }
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
      {
        GGS_L_EXsignature::cEnumerator enumerator_57585 (var_cas_signature, true) ;
        const GGS_L_EXsignature::cElement * operand_57585 = NULL ;
        while (((operand_57585 = enumerator_57585.nextObject ()))) {
          macroValidPointer (operand_57585) ;
          var_cas_formalAttributeList.addAssign_operation (operand_57585->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1425))) ;
        }
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeCategoryTemplateCall ::constructor_new (inLexique, var_cas_callingExpression, var_cas_classType.reader_mClassTypeName (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1439)), var_cas_templateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1437)) ;
      var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1443)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_className ;
      inLexique.assignFromAttribute_tokenString (var_cas_className) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_type_5F_name) COMMA_HERE) ;
      GGS_AC_semanticsEntity  var_cas_e ;
      if (var_cas_inEntitiesMap.isBuilt ()) {
        var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_className, var_cas_e COMMA_SOURCE_FILE_AT_LINE (1449)) ;
      }
      GGS_AC_galgasType  var_cas_type = GGS_typeEntiteType::castFrom (inLexique, var_cas_e.getPtr (), true, var_cas_className COMMA_SOURCE_FILE_AT_LINE (1450)).reader_aDefType (inLexique COMMA_SOURCE_FILE_AT_LINE (1450)) ;
      GGS_lstring  var_cas_mClassMethodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_mClassMethodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      if (var_cas_type.isBuilt ()) {
        var_cas_type (HERE)->method_handleConstructorInvocation (inLexique, var_cas_mClassMethodName, var_cas_formalAttributeList, var_cas_hasLexiqueAndLocationArguments, var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1456)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeConstructorExpression ::constructor_new (inLexique, var_cas_type, var_cas_mClassMethodName, var_cas_hasLexiqueAndLocationArguments, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1467)) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_M_regularFilesEX  var_cas_regularFileMap ;
      GGS_filewrapperTemplateMapEX  var_cas_templateMap ;
      const GGS_M_filewrappersEX  temp_59443 = var_cas_inSemanticContext.reader_mFilewrappers (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)) ;
      if (temp_59443.isBuilt ()) {
        temp_59443 (HERE)->method_searchKey (inLexique, var_cas_filewrapperName, var_cas_regularFileMap, var_cas_templateMap COMMA_SOURCE_FILE_AT_LINE (1480)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_formalAttributeList ;
      if (var_cas_templateMap.isBuilt ()) {
        var_cas_templateMap (HERE)->method_searchKey (inLexique, var_cas_templateName, var_cas_formalAttributeList COMMA_SOURCE_FILE_AT_LINE (1487)) ;
      }
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_formalAttributeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeFileWrapperTemplateCall ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1499)) ;
      var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1500)) ;
      } break ;
    case 4 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expressionValue, var_cas_expressionType) ;
      GGS_lstring  var_cas_methodName ;
      inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
      GGS_string var_cas_conversionMethod ;
      GGS_string var_cas_categoryReaderClassBaseName ;
      GGS_bool var_cas_hasLexiqueAndLocationArguments ;
      ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_inSemanticContext.reader_mCategoryReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1523)),  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod,  var_cas_categoryReaderClassBaseName,  var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1521)) ;
      GGS_typeExpressionList  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
      var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod, var_cas_categoryReaderClassBaseName, var_cas_hasLexiqueAndLocationArguments COMMA_SOURCE_FILE_AT_LINE (1542)) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          const GGS_bool cond_61762 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1557))).operator_isEqual (GGS_string ("value")) ;
          if (cond_61762.isBuiltAndTrue ()) {
            var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1558)) ;
          }else if (cond_61762.isBuiltAndFalse ()) {
            const GGS_bool cond_61859 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1559))).operator_isEqual (GGS_string ("char")) ;
            if (cond_61859.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)) ;
            }else if (cond_61859.isBuiltAndFalse ()) {
              const GGS_bool cond_61960 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1561))).operator_isEqual (GGS_string ("string")) ;
              if (cond_61960.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1562)) ;
              }else if (cond_61960.isBuiltAndFalse ()) {
                const GGS_bool cond_62061 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1563))).operator_isEqual (GGS_string ("comment")) ;
                if (cond_62061.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1564)) ;
                }else if (cond_62061.isBuiltAndFalse ()) {
                  var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1567)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
          var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, GGS_string ("galgas_cli_options"), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1568)) COMMA_SOURCE_FILE_AT_LINE (1568)) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          if (var_cas_inOptionsComponentsMapForUse.isBuilt ()) {
            var_cas_inOptionsComponentsMapForUse (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1574)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          const GGS_bool cond_63285 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1578))).operator_isEqual (GGS_string ("value")) ;
          if (cond_63285.isBuiltAndTrue ()) {
            const GGS_bool cond_62855 = var_cas_boolOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1579))) ;
            if (cond_62855.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)) ;
            }else if (cond_62855.isBuiltAndFalse ()) {
              const GGS_bool cond_62971 = var_cas_uintOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1581))) ;
              if (cond_62971.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1582)) ;
              }else if (cond_62971.isBuiltAndFalse ()) {
                const GGS_bool cond_63090 = var_cas_stringOptionsMap.reader_hasKey (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1583))) ;
                if (cond_63090.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1584)) ;
                }else if (cond_63090.isBuiltAndFalse ()) {
                  var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1586)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1586)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1588)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }else if (cond_63285.isBuiltAndFalse ()) {
            const GGS_bool cond_63382 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1589))).operator_isEqual (GGS_string ("char")) ;
            if (cond_63382.isBuiltAndTrue ()) {
              var_cas_outResultType = GGS_typeGalgas_char ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1590)) ;
            }else if (cond_63382.isBuiltAndFalse ()) {
              const GGS_bool cond_63483 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1591))).operator_isEqual (GGS_string ("string")) ;
              if (cond_63483.isBuiltAndTrue ()) {
                var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1592)) ;
              }else if (cond_63483.isBuiltAndFalse ()) {
                const GGS_bool cond_63584 = (var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1593))).operator_isEqual (GGS_string ("comment")) ;
                if (cond_63584.isBuiltAndTrue ()) {
                  var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (1594)) ;
                }else if (cond_63584.isBuiltAndFalse ()) {
                  var_cas_readerName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined") COMMA_SOURCE_FILE_AT_LINE (1597)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
          var_cas_outExpression = GGS_typeOptionAccess ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)), var_cas_optionName, var_cas_readerName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1598)) COMMA_SOURCE_FILE_AT_LINE (1598)) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_factor_i21_ (C_Lexique_galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  if (var_cas_inEntitiesMap.isBuilt ()) {
    var_cas_inEntitiesMap (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1624)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_65392 = var_cas_entite ; // CAST instruction
    if (_var_65392.getPtr () != NULL) {
      macroValidPointer (_var_65392.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_65392.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_65392.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1628)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1629)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_65392.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_65392.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1632)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1637)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1640)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_65560 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_65560 = NULL ;
    while (((operand_65560 = enumerator_65560.nextObject ()))) {
      macroValidPointer (operand_65560) ;
      var_cas_listeAttributsSemantiques.addAssign_operation (operand_65560->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1645))) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5B_) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList, var_cas_inSemanticContext, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5D_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (1657)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_read_5F_access_i22_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
  if (var_cas_inTemplateVariableMap.isBuilt ()) {
    var_cas_inTemplateVariableMap (HERE)->method_searchKey (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1673)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::rule_templateExpressionParser_output_5F_expression_5F_list_i23_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_EXsemanticContext var_cas_inSemanticContext,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                const GGS_templateVariableMap  var_cas_inTemplateVariableMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_templateExpressionParser_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inSemanticContext, var_cas_inOptionsComponentsMapForUse, var_cas_inTemplateVariableMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation = GGS_location (inLexique) ;
  const GGS_bool cond_68068 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictInf (var_cas_effectiveTypesList.reader_length ()) ;
  if (cond_68068.isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (1713)) ;
  }else if (cond_68068.isBuiltAndFalse ()) {
    const GGS_bool cond_68208 = (var_cas_inFormalAttributesList.reader_length ()).operator_strictSup (var_cas_effectiveTypesList.reader_length ()) ;
    if (cond_68208.isBuiltAndTrue ()) {
      var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1715)) ;
    }else if (cond_68208.isBuiltAndFalse ()) {
      {
        GGS_typeListeAttributsSemantiques::cEnumerator enumerator_68243 (var_cas_inFormalAttributesList, true) ;
        const GGS_typeListeAttributsSemantiques::cElement * operand_68243 = NULL ;
        GGS_typeTypesList::cEnumerator enumerator_68263 (var_cas_effectiveTypesList, true) ;
        const GGS_typeTypesList::cElement * operand_68263 = NULL ;
        while (((operand_68243 = enumerator_68243.nextObject ()))
            && ((operand_68263 = enumerator_68263.nextObject ()))) {
          macroValidPointer (operand_68243) ;
          macroValidPointer (operand_68263) ;
          ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_68243->mAttributType,  operand_68263->mType,  operand_68263->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1717)) ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

