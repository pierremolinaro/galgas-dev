//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'templateExpressionParser.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 12th, 2009, at 22h29'17"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "templateExpressionParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateExpressionParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchAndOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchAndOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchAndOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_4777 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_4801 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_4777 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4777) ;
    cPtr_typeGalgas_binaryset * operand_4801 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_4801) ;
    if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_4777 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4777) ;
      cPtr_typeGalgas_bool * operand_4801 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4801) ;
      if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_4777 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4777) ;
        cPtr_typeGalgas_uint * operand_4801 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_4801) ;
        if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_4777 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4777) ;
          cPtr_typeGalgas_uint64 * operand_4801 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_4801) ;
          if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_4777 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4777) ;
            cPtr_typeGalgas_stringset * operand_4801 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_4801) ;
            if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint * operand_4777 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4777) ;
              cPtr_typeGalgas_sint * operand_4801 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_4801) ;
              if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_sint64 * operand_4777 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4777) ;
                cPtr_typeGalgas_sint64 * operand_4801 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_4801) ;
                if ((operand_4777 != NULL) && (operand_4801 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (137)))).operator_concat (GGS_string (" & "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (138)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (140)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchAndOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "matchOrOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchOrOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchOrOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_6309 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_6333 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_6309 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6309) ;
    cPtr_typeGalgas_binaryset * operand_6333 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_6333) ;
    if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_6309 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6309) ;
      cPtr_typeGalgas_bool * operand_6333 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_6333) ;
      if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_6309 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6309) ;
        cPtr_typeGalgas_uint * operand_6333 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_6333) ;
        if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_6309 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6309) ;
          cPtr_typeGalgas_uint64 * operand_6333 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_6333) ;
          if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_6309 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6309) ;
            cPtr_typeGalgas_sint * operand_6333 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_6333) ;
            if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_6309 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6309) ;
              cPtr_typeGalgas_sint64 * operand_6333 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_6333) ;
              if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                cPtr_typeGalgas_stringset * operand_6309 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6309) ;
                cPtr_typeGalgas_stringset * operand_6333 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_6333) ;
                if ((operand_6309 != NULL) && (operand_6333 != NULL)) {
                  var_cas_outResultType = var_cas_inLeftExpressionType ;
                }else{
                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (170)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (171)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (173)) ;
                  var_cas_outResultType.drop () ;
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchOrOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "matchXorOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_matchXorOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_matchXorOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_7842 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_7866 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_7842 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7842) ;
    cPtr_typeGalgas_binaryset * operand_7866 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_7866) ;
    if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_bool * operand_7842 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7842) ;
      cPtr_typeGalgas_bool * operand_7866 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_7866) ;
      if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint * operand_7842 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7842) ;
        cPtr_typeGalgas_uint * operand_7866 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_7866) ;
        if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_7842 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7842) ;
          cPtr_typeGalgas_uint64 * operand_7866 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_7866) ;
          if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint * operand_7842 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7842) ;
            cPtr_typeGalgas_sint * operand_7866 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_7866) ;
            if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              cPtr_typeGalgas_sint64 * operand_7842 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7842) ;
              cPtr_typeGalgas_sint64 * operand_7866 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_7866) ;
              if ((operand_7842 != NULL) && (operand_7866 != NULL)) {
                var_cas_outResultType = var_cas_inLeftExpressionType ;
              }else{
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand type error : (")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (201)))).operator_concat (GGS_string (" | "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string (") is not valid")) COMMA_SOURCE_FILE_AT_LINE (204)) ;
                var_cas_outResultType.drop () ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_matchXorOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "checkNotOperatorForTemplate"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkNotOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkNotOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeGalgas_bool  var_cas_gb ;
  var_cas_gb = GGS_typeGalgas_bool::castFrom (inLexique, var_cas_inOperandType.getPtr (), true, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (217)) ;
  var_cas_outResultType = var_cas_inOperandType ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkNotOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "checkLogicalNegateOperatorForTemplate"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkLogicalNegateOperatorForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inOperandType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkLogicalNegateOperatorForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_10342 = var_cas_inOperandType ; // CAST instruction
    if (_var_10342.getPtr () != NULL) {
      macroValidPointer (_var_10342.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_binaryset *> (_var_10342.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint *> (_var_10342.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_10342.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_uint64 *> (_var_10342.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_10342.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inOperandType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the ~ operator is not defined for an ")).operator_concat (var_cas_inOperandType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (244)))).operator_concat (GGS_string (" object")) COMMA_SOURCE_FILE_AT_LINE (246)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkLogicalNegateOperatorForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "comparison_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_10912 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_10936 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_10912 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10912) ;
    cPtr_typeGalgas_binaryset * operand_10936 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_10936) ;
    if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
    }else{
      cPtr_typeGalgas_stringset * operand_10912 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_10912) ;
      cPtr_typeGalgas_stringset * operand_10936 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_10936) ;
      if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
      }else{
        cPtr_typeGalgas_bool * operand_10912 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10912) ;
        cPtr_typeGalgas_bool * operand_10936 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_10936) ;
        if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
        }else{
          cPtr_typeGalgas_char * operand_10912 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_10912) ;
          cPtr_typeGalgas_char * operand_10936 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_10936) ;
          if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
          }else{
            cPtr_typeGalgas_uint * operand_10912 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10912) ;
            cPtr_typeGalgas_uint * operand_10936 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_10936) ;
            if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
            }else{
              cPtr_typeGalgas_sint * operand_10912 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10912) ;
              cPtr_typeGalgas_sint * operand_10936 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_10936) ;
              if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
              }else{
                cPtr_typeGalgas_uint64 * operand_10912 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10912) ;
                cPtr_typeGalgas_uint64 * operand_10936 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_10936) ;
                if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                }else{
                  cPtr_typeGalgas_sint64 * operand_10912 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10912) ;
                  cPtr_typeGalgas_sint64 * operand_10936 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_10936) ;
                  if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                  }else{
                    cPtr_typeGalgas_double * operand_10912 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_10912) ;
                    cPtr_typeGalgas_double * operand_10936 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_10936) ;
                    if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                    }else{
                      cPtr_typeGalgas_string * operand_10912 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10912) ;
                      cPtr_typeGalgas_string * operand_10936 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_10936) ;
                      if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                      }else{
                        cPtr_typeGalgas_lbool * operand_10912 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_10912) ;
                        cPtr_typeGalgas_lbool * operand_10936 = dynamic_cast <cPtr_typeGalgas_lbool *> (ptr_10936) ;
                        if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                        }else{
                          cPtr_typeGalgas_lchar * operand_10912 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_10912) ;
                          cPtr_typeGalgas_lchar * operand_10936 = dynamic_cast <cPtr_typeGalgas_lchar *> (ptr_10936) ;
                          if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                          }else{
                            cPtr_typeGalgas_luint * operand_10912 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_10912) ;
                            cPtr_typeGalgas_luint * operand_10936 = dynamic_cast <cPtr_typeGalgas_luint *> (ptr_10936) ;
                            if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                            }else{
                              cPtr_typeGalgas_lsint * operand_10912 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_10912) ;
                              cPtr_typeGalgas_lsint * operand_10936 = dynamic_cast <cPtr_typeGalgas_lsint *> (ptr_10936) ;
                              if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                              }else{
                                cPtr_typeGalgas_luint64 * operand_10912 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_10912) ;
                                cPtr_typeGalgas_luint64 * operand_10936 = dynamic_cast <cPtr_typeGalgas_luint64 *> (ptr_10936) ;
                                if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                }else{
                                  cPtr_typeGalgas_lsint64 * operand_10912 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_10912) ;
                                  cPtr_typeGalgas_lsint64 * operand_10936 = dynamic_cast <cPtr_typeGalgas_lsint64 *> (ptr_10936) ;
                                  if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                  }else{
                                    cPtr_typeGalgas_ldouble * operand_10912 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_10912) ;
                                    cPtr_typeGalgas_ldouble * operand_10936 = dynamic_cast <cPtr_typeGalgas_ldouble *> (ptr_10936) ;
                                    if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                    }else{
                                      cPtr_typeGalgas_lstring * operand_10912 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_10912) ;
                                      cPtr_typeGalgas_lstring * operand_10936 = dynamic_cast <cPtr_typeGalgas_lstring *> (ptr_10936) ;
                                      if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                      }else{
                                        cPtr_typeGalgas_location * operand_10912 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_10912) ;
                                        cPtr_typeGalgas_location * operand_10936 = dynamic_cast <cPtr_typeGalgas_location *> (ptr_10936) ;
                                        if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                        }else{
                                          cPtr_typeGalgas_filewrapper * operand_10912 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_10912) ;
                                          cPtr_typeGalgas_filewrapper * operand_10936 = dynamic_cast <cPtr_typeGalgas_filewrapper *> (ptr_10936) ;
                                          if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                          }else{
                                            cPtr_typeGalgas_enum * operand_10912 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_10912) ;
                                            cPtr_typeGalgas_enum * operand_10936 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_10936) ;
                                            if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                              if (((operand_10912->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281))).operator_isNotEqual (operand_10936->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (281)))).isBuiltAndTrue ()) {
                                                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_10912->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_10936->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (283)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (284)) ;
                                              }
                                            }else{
                                              cPtr_typeGalgasUndefinedListType * operand_10912 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10912) ;
                                              cPtr_typeGalgasUndefinedListType * operand_10936 = dynamic_cast <cPtr_typeGalgasUndefinedListType *> (ptr_10936) ;
                                              if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                                if (((operand_10912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (286))).operator_isNotEqual (operand_10936->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (286)))).isBuiltAndTrue ()) {
                                                  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the list type '@")).operator_concat (operand_10912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (287)))).operator_concat (GGS_string ("', I have got the list type '@"))).operator_concat (operand_10936->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (288)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (289)) ;
                                                }
                                              }else{
                                                cPtr_typeGalgasUndefinedMapType * operand_10912 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_10912) ;
                                                cPtr_typeGalgasUndefinedMapType * operand_10936 = dynamic_cast <cPtr_typeGalgasUndefinedMapType *> (ptr_10936) ;
                                                if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                                  if (((operand_10912->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292))).operator_isNotEqual (operand_10936->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (292)))).isBuiltAndTrue ()) {
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the map type '@")).operator_concat (operand_10912->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293)))).operator_concat (GGS_string ("', I have got the map type '@"))).operator_concat (operand_10936->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (294)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (295)) ;
                                                  }
                                                }else{
                                                  cPtr_typeGalgasUndefinedClassType * operand_10912 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_10912) ;
                                                  cPtr_typeGalgasUndefinedClassType * operand_10936 = dynamic_cast <cPtr_typeGalgasUndefinedClassType *> (ptr_10936) ;
                                                  if ((operand_10912 != NULL) && (operand_10936 != NULL)) {
                                                    if (((operand_10912->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (299))).operator_isNotEqual (operand_10936->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (299)))).isBuiltAndTrue ()) {
                                                      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("I was expecting the class type '@")).operator_concat (operand_10912->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300)))).operator_concat (GGS_string ("', I have got the class type '@"))).operator_concat (operand_10936->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (301)))).operator_concat (GGS_string ("\"")) COMMA_SOURCE_FILE_AT_LINE (302)) ;
                                                    }
                                                  }else{
                                                    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (304)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (305)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (306)) ;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
// Implementation of routine "magnitude_comparison_types_checkForTemplate"   *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_magnitude_comparison_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_magnitude_comparison_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_14293 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_14317 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_stringset * operand_14293 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_14293) ;
    cPtr_typeGalgas_stringset * operand_14317 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_14317) ;
    if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
    }else{
      cPtr_typeGalgas_bool * operand_14293 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_14293) ;
      cPtr_typeGalgas_bool * operand_14317 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_14317) ;
      if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
      }else{
        cPtr_typeGalgas_char * operand_14293 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_14293) ;
        cPtr_typeGalgas_char * operand_14317 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_14317) ;
        if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
        }else{
          cPtr_typeGalgas_uint * operand_14293 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_14293) ;
          cPtr_typeGalgas_uint * operand_14317 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_14317) ;
          if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
          }else{
            cPtr_typeGalgas_sint * operand_14293 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_14293) ;
            cPtr_typeGalgas_sint * operand_14317 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_14317) ;
            if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
            }else{
              cPtr_typeGalgas_uint64 * operand_14293 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_14293) ;
              cPtr_typeGalgas_uint64 * operand_14317 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_14317) ;
              if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
              }else{
                cPtr_typeGalgas_sint64 * operand_14293 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_14293) ;
                cPtr_typeGalgas_sint64 * operand_14317 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_14317) ;
                if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
                }else{
                  cPtr_typeGalgas_double * operand_14293 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_14293) ;
                  cPtr_typeGalgas_double * operand_14317 = dynamic_cast <cPtr_typeGalgas_double *> (ptr_14317) ;
                  if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
                  }else{
                    cPtr_typeGalgas_string * operand_14293 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_14293) ;
                    cPtr_typeGalgas_string * operand_14317 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_14317) ;
                    if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
                    }else{
                      cPtr_typeGalgas_enum * operand_14293 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_14293) ;
                      cPtr_typeGalgas_enum * operand_14317 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_14317) ;
                      if ((operand_14293 != NULL) && (operand_14317 != NULL)) {
                        if (((operand_14293->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330))).operator_isNotEqual (operand_14317->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (330)))).isBuiltAndTrue ()) {
                          GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between an '@")).operator_concat (operand_14293->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (331)))).operator_concat (GGS_string ("' enumeration and an '@"))).operator_concat (operand_14317->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (332)))).operator_concat (GGS_string ("' enumeration is not valid")) COMMA_SOURCE_FILE_AT_LINE (333)) ;
                        }
                      }else{
                        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("comparison between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (335)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (336)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (337)) ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_magnitude_comparison_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "left_shift_types_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_left_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_left_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_15962 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_15986 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_15962 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_15962) ;
    cPtr_typeGalgas_uint * operand_15986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15986) ;
    if ((operand_15962 != NULL) && (operand_15986 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_15962 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15962) ;
      cPtr_typeGalgas_uint * operand_15986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15986) ;
      if ((operand_15962 != NULL) && (operand_15986 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_15962 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_15962) ;
        cPtr_typeGalgas_uint * operand_15986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15986) ;
        if ((operand_15962 != NULL) && (operand_15986 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_15962 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_15962) ;
          cPtr_typeGalgas_uint * operand_15986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15986) ;
          if ((operand_15962 != NULL) && (operand_15986 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_15962 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_15962) ;
            cPtr_typeGalgas_uint * operand_15986 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_15986) ;
            if ((operand_15962 != NULL) && (operand_15986 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (363)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (364)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (367)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_left_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "right_shift_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_right_shift_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_right_shift_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_16979 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_17003 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_binaryset * operand_16979 = dynamic_cast <cPtr_typeGalgas_binaryset *> (ptr_16979) ;
    cPtr_typeGalgas_uint * operand_17003 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17003) ;
    if ((operand_16979 != NULL) && (operand_17003 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_uint * operand_16979 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_16979) ;
      cPtr_typeGalgas_uint * operand_17003 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17003) ;
      if ((operand_16979 != NULL) && (operand_17003 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_sint * operand_16979 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_16979) ;
        cPtr_typeGalgas_uint * operand_17003 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17003) ;
        if ((operand_16979 != NULL) && (operand_17003 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_uint64 * operand_16979 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_16979) ;
          cPtr_typeGalgas_uint * operand_17003 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17003) ;
          if ((operand_16979 != NULL) && (operand_17003 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_sint64 * operand_16979 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_16979) ;
            cPtr_typeGalgas_uint * operand_17003 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_17003) ;
            if ((operand_16979 != NULL) && (operand_17003 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("shift between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (389)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (390)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (393)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_right_shift_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "addition_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addition_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addition_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_18305 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_18329 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_18305 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18305) ;
    cPtr_typeGalgas_uint * operand_18329 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_18329) ;
    if ((operand_18305 != NULL) && (operand_18329 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_18305 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18305) ;
      cPtr_typeGalgas_sint * operand_18329 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_18329) ;
      if ((operand_18305 != NULL) && (operand_18329 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_18305 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18305) ;
        cPtr_typeGalgas_uint64 * operand_18329 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_18329) ;
        if ((operand_18305 != NULL) && (operand_18329 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_18305 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18305) ;
          cPtr_typeGalgas_sint64 * operand_18329 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_18329) ;
          if ((operand_18305 != NULL) && (operand_18329 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("addition between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (417)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (418)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (421)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addition_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of routine "substraction_types_checkForTemplate"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_substraction_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_substraction_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_19541 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_19565 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_19541 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19541) ;
    cPtr_typeGalgas_uint * operand_19565 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_19565) ;
    if ((operand_19541 != NULL) && (operand_19565 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_19541 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19541) ;
      cPtr_typeGalgas_sint * operand_19565 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_19565) ;
      if ((operand_19541 != NULL) && (operand_19565 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_19541 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19541) ;
        cPtr_typeGalgas_uint64 * operand_19565 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_19565) ;
        if ((operand_19541 != NULL) && (operand_19565 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_19541 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19541) ;
          cPtr_typeGalgas_sint64 * operand_19565 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_19565) ;
          if ((operand_19541 != NULL) && (operand_19565 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            cPtr_typeGalgas_stringset * operand_19541 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19541) ;
            cPtr_typeGalgas_stringset * operand_19565 = dynamic_cast <cPtr_typeGalgas_stringset *> (ptr_19565) ;
            if ((operand_19541 != NULL) && (operand_19565 != NULL)) {
              var_cas_outResultType = var_cas_inLeftExpressionType ;
            }else{
              GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("substraction between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (447)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (448)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (451)) ;
              var_cas_outResultType.drop () ;
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_substraction_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "multiply_types_checkForTemplate"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_multiply_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_multiply_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_20883 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_20907 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_20883 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20883) ;
    cPtr_typeGalgas_uint * operand_20907 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_20907) ;
    if ((operand_20883 != NULL) && (operand_20907 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_20883 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20883) ;
      cPtr_typeGalgas_sint * operand_20907 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_20907) ;
      if ((operand_20883 != NULL) && (operand_20907 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_20883 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20883) ;
        cPtr_typeGalgas_uint64 * operand_20907 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_20907) ;
        if ((operand_20883 != NULL) && (operand_20907 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_20883 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20883) ;
          cPtr_typeGalgas_sint64 * operand_20907 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_20907) ;
          if ((operand_20883 != NULL) && (operand_20907 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("multiplication between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (475)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (476)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (479)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_multiply_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "divide_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_divide_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_divide_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_22119 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_22143 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_22119 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22119) ;
    cPtr_typeGalgas_uint * operand_22143 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_22143) ;
    if ((operand_22119 != NULL) && (operand_22143 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_22119 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22119) ;
      cPtr_typeGalgas_sint * operand_22143 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_22143) ;
      if ((operand_22119 != NULL) && (operand_22143 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_22119 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22119) ;
        cPtr_typeGalgas_uint64 * operand_22143 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_22143) ;
        if ((operand_22119 != NULL) && (operand_22143 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_22119 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22119) ;
          cPtr_typeGalgas_sint64 * operand_22143 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_22143) ;
          if ((operand_22119 != NULL) && (operand_22143 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("division between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (503)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (504)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (507)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_divide_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "modulo_types_checkForTemplate"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_modulo_types_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inLeftExpressionType,
                                const GGS_AC_galgasType   var_cas_inRightExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_modulo_types_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {
    cPtr_AC_galgasType * ptr_23349 = var_cas_inLeftExpressionType (HERE) ;
    cPtr_AC_galgasType * ptr_23373 = var_cas_inRightExpressionType (HERE) ;
    cPtr_typeGalgas_uint * operand_23349 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23349) ;
    cPtr_typeGalgas_uint * operand_23373 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_23373) ;
    if ((operand_23349 != NULL) && (operand_23373 != NULL)) {
      var_cas_outResultType = var_cas_inLeftExpressionType ;
    }else{
      cPtr_typeGalgas_sint * operand_23349 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23349) ;
      cPtr_typeGalgas_sint * operand_23373 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_23373) ;
      if ((operand_23349 != NULL) && (operand_23373 != NULL)) {
        var_cas_outResultType = var_cas_inLeftExpressionType ;
      }else{
        cPtr_typeGalgas_uint64 * operand_23349 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23349) ;
        cPtr_typeGalgas_uint64 * operand_23373 = dynamic_cast <cPtr_typeGalgas_uint64 *> (ptr_23373) ;
        if ((operand_23349 != NULL) && (operand_23373 != NULL)) {
          var_cas_outResultType = var_cas_inLeftExpressionType ;
        }else{
          cPtr_typeGalgas_sint64 * operand_23349 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23349) ;
          cPtr_typeGalgas_sint64 * operand_23373 = dynamic_cast <cPtr_typeGalgas_sint64 *> (ptr_23373) ;
          if ((operand_23349 != NULL) && (operand_23373 != NULL)) {
            var_cas_outResultType = var_cas_inLeftExpressionType ;
          }else{
            GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("modulo between ")).operator_concat (var_cas_inLeftExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (531)))).operator_concat (GGS_string (" and "))).operator_concat (var_cas_inRightExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (532)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (535)) ;
            var_cas_outResultType.drop () ;
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_modulo_types_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "unary_minus_type_checkForTemplate"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_unary_minus_type_checkForTemplate (C_Compiler & inLexique,
                                const GGS_AC_galgasType   var_cas_inExpressionType,
                                GGS_AC_galgasType  & var_cas_outResultType COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_unary_minus_type_checkForTemplate at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  { const GGS_AC_galgasType _var_24813 = var_cas_inExpressionType ; // CAST instruction
    if (_var_24813.getPtr () != NULL) {
      macroValidPointer (_var_24813.getPtr ()) ;
      if (dynamic_cast <cPtr_typeGalgas_sint *> (_var_24813.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else if (dynamic_cast <cPtr_typeGalgas_sint64 *> (_var_24813.getPtr ()) != NULL) {
        var_cas_outResultType = var_cas_inExpressionType ;
      }else{
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("unary minus for ")).operator_concat (var_cas_inExpressionType.reader_messageGalgasType (inLexique COMMA_SOURCE_FILE_AT_LINE (554)))).operator_concat (GGS_string (" is not valid")) COMMA_SOURCE_FILE_AT_LINE (558)) ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_unary_minus_type_checkForTemplate\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_567_17_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeOrOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchOrOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (600)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeXorOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchXorOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (621)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_expression_templateExpressionParser_567_17_parse (galgasTemplateScanner & inLexique) {
  nt_relation_term_parse (inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_templateExpressionParser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7C_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5E_) COMMA_HERE) ;
          nt_relation_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_635_20_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftOperand ;
          var_cas_leftOperand = var_cas_outExpression ;
          GGS_typeExpression  var_cas_rightOperand ;
          GGS_AC_galgasType  var_cas_firstOperandType ;
          var_cas_firstOperandType = var_cas_outResultType ;
          GGS_AC_galgasType  var_cas_secondOperandType ;
          nt_relation_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;
          var_cas_outExpression = GGS_typeAndOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_HERE) ;
          ::routine_matchAndOperatorForTemplate (inLexique,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (668)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_term_templateExpressionParser_635_20_parse (galgasTemplateScanner & inLexique) {
  nt_relation_factor_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_templateExpressionParser_1 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__26_) COMMA_HERE) ;
          nt_relation_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_682_22_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  switch (select_templateExpressionParser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (713)) ;
      var_cas_outExpression = GGS_typeEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (731)) ;
      var_cas_outExpression = GGS_typeNonEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (749)) ;
      var_cas_outExpression = GGS_typeInfOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (767)) ;
      var_cas_outExpression = GGS_typeSupOrEqualTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (785)) ;
      var_cas_outExpression = GGS_typeStrictSupTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation ;
      var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      GGS_typeExpression  var_cas_leftExpression ;
      var_cas_leftExpression = var_cas_outExpression ;
      GGS_AC_galgasType  var_cas_leftType ;
      var_cas_leftType = var_cas_outResultType ;
      GGS_typeExpression  var_cas_rightExpression ;
      GGS_AC_galgasType  var_cas_rightType ;
      nt_simple_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
      ::routine_magnitude_comparison_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType COMMA_SOURCE_FILE_AT_LINE (803)) ;
      var_cas_outExpression = GGS_typeStrictInfTest ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
      var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_relation_factor_templateExpressionParser_682_22_parse (galgasTemplateScanner & inLexique) {
  nt_simple_expression_parse (inLexique) ;
  switch (select_templateExpressionParser_2 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3D__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 4 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3D_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 6 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    case 7 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C_) COMMA_HERE) ;
      nt_simple_expression_parse (inLexique) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_815_24_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_templateExpressionParser_3 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_left_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (847)) ;
          var_cas_outExpression = GGS_typeLeftShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_right_shift_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (864)) ;
          var_cas_outExpression = GGS_typeRightShiftOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_addition_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (881)) ;
          var_cas_outExpression = GGS_typeAddOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_term_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_substraction_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (898)) ;
          var_cas_outExpression = GGS_typeSubOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_simple_expression_templateExpressionParser_815_24_parse (galgasTemplateScanner & inLexique) {
  nt_term_parse (inLexique) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_templateExpressionParser_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3C__3C_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__3E__3E_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2B_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
          nt_term_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_909_11_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_multiply_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (941)) ;
          var_cas_outExpression = GGS_typeMultiplyOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_divide_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (958)) ;
          var_cas_outExpression = GGS_typeDivideOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation ;
          var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          GGS_typeExpression  var_cas_leftExpression ;
          var_cas_leftExpression = var_cas_outExpression ;
          GGS_AC_galgasType  var_cas_leftType ;
          var_cas_leftType = var_cas_outResultType ;
          GGS_typeExpression  var_cas_rightExpression ;
          GGS_AC_galgasType  var_cas_rightType ;
          nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;
          ::routine_modulo_types_checkForTemplate (inLexique,  var_cas_leftType,  var_cas_rightType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (975)) ;
          var_cas_outExpression = GGS_typeModuloOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_term_templateExpressionParser_909_11_parse (galgasTemplateScanner & inLexique) {
  nt_factor_parse (inLexique) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_repeat_templateExpressionParser_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2A_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2F_) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_mod) COMMA_HERE) ;
          nt_factor_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_986_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_expression ;
  GGS_AC_galgasType  var_cas_type ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_type) ;
  ::routine_unary_minus_type_checkForTemplate (inLexique,  var_cas_type,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1006)) ;
  var_cas_outExpression = GGS_typeUnaryMinusOperation ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_986_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2D_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1016_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;
  GGS_lstring  automatic_var_0 ;
  nt_read_access_ (inLexique, automatic_var_0, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;
  var_cas_outExpression = GGS_typeVarInExpression ::constructor_new (inLexique, var_cas_nomCppEntite1, GGS_lstringlist ::constructor_emptyList () COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1016_13_parse (galgasTemplateScanner & inLexique) {
  nt_read_access_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1035_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1035_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_expression_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1061_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeTestComplement ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkNotOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1082)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1061_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_not) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1091_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_location  var_cas_operatorLocation ;
  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  GGS_typeExpression  var_cas_ifCondition ;
  GGS_AC_galgasType  var_cas_operandType ;
  nt_factor_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;
  var_cas_outExpression = GGS_typeLogicalNegate ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_HERE) ;
  ::routine_checkLogicalNegateOperatorForTemplate (inLexique,  var_cas_operandType,  var_cas_outResultType COMMA_SOURCE_FILE_AT_LINE (1112)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1091_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__7E_) COMMA_HERE) ;
  nt_factor_parse (inLexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1121_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeTrueBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1121_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_true) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1140_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFalseBool ::constructor_new (inLexique COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1140_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_false) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1159_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1159_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1179_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint32value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSIntExpression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1179_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1199_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralUInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_uint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1199_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1219_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint64value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralSInt64Expression ::constructor_new (inLexique, var_cas_literalInt COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_sint64 ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1219_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1239_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inEntitiesMap */,
                                const GGS_EXcategoryReaderMap  /* var_cas_inCategoryReaderMap */,
                                const GGS_M_optionComponents  /* var_cas_inOptionsComponentsMapForUse */,
                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeLiteralDoubleExpression ::constructor_new (inLexique, var_cas_literalDouble COMMA_HERE) ;
  var_cas_outResultType = GGS_typeGalgas_double ::constructor_new (inLexique COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1239_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_literal_5F_double) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1262_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_5 (inLexique)) {
    case 1 : {
      GGS_typeExpression  var_cas_expressionValue ;
      GGS_AC_galgasType  var_cas_expressionType ;
      nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_description) COMMA_HERE) ;
          var_cas_outExpression = GGS_typeDescriptionInExpression ::constructor_new (inLexique, var_cas_expressionValue, GGS_location (inLexique) COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_methodName ;
          inLexique.assignFromAttribute_tokenString (var_cas_methodName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;
          GGS_string var_cas_conversionMethod ;
          GGS_string var_cas_categoryReaderClassBaseName ;
          ::routine_handleReaderCall (inLexique,  var_cas_inEntitiesMap,  var_cas_inCategoryReaderMap,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType,  var_cas_conversionMethod,  var_cas_categoryReaderClassBaseName COMMA_SOURCE_FILE_AT_LINE (1295)) ;
          GGS_typeExpressionList  var_cas_expressionList ;
          nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inCategoryReaderMap, var_cas_accessorsTypeList, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
          var_cas_outExpression = GGS_typeReaderCallInExpression ::constructor_new (inLexique, var_cas_expressionValue, var_cas_methodName, var_cas_expressionList, var_cas_conversionMethod, var_cas_categoryReaderClassBaseName COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          if (((var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1323))).operator_isNotEqual (GGS_string ("verbose_output"))).isBuiltAndTrue ()) {
            var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this option name does not correspond to a builtin option") COMMA_SOURCE_FILE_AT_LINE (1325)) ;
          }
          var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, GGS_string ("generic_galgas_cli_options"), var_cas_optionName COMMA_HERE) ;
          var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_M_cli_options  var_cas_boolOptionsMap ;
          GGS_M_cli_options  var_cas_uintOptionsMap ;
          GGS_M_cli_options  var_cas_stringOptionsMap ;
          const GGS_M_optionComponents  temp_52722 = var_cas_inOptionsComponentsMapForUse ;
          if (temp_52722.isBuilt ()) {
            temp_52722 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (1334)) ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          if ((var_cas_boolOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1338)) COMMA_SOURCE_FILE_AT_LINE (1338))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeBoolOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_bool ::constructor_new (inLexique COMMA_HERE) ;
          }else if ((var_cas_uintOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1341)) COMMA_SOURCE_FILE_AT_LINE (1341))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeUIntOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_uint ::constructor_new (inLexique COMMA_HERE) ;
          }else if ((var_cas_stringOptionsMap.reader_hasKey (inLexique, var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) COMMA_SOURCE_FILE_AT_LINE (1344))).isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_typeStringOption ::constructor_new (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1345)), var_cas_optionName COMMA_HERE) ;
            var_cas_outResultType = GGS_typeGalgas_string ::constructor_new (inLexique COMMA_HERE) ;
          }else{
            var_cas_optionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)))).operator_concat (GGS_string ("' option component has no '"))).operator_concat (var_cas_optionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)))).operator_concat (GGS_string ("' option")) COMMA_SOURCE_FILE_AT_LINE (1350)) ;
            var_cas_outExpression.drop () ;
            var_cas_outResultType.drop () ;
          }
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1262_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5B_) COMMA_HERE) ;
  switch (select_templateExpressionParser_5 (inLexique)) {
    case 1 : {
      nt_expression_parse (inLexique) ;
      switch (select_templateExpressionParser_6 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_description) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          nt_output_expression_list_parse (inLexique) ;
          } break ;
        default :
          break ;
      }
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_option) COMMA_HERE) ;
      switch (select_templateExpressionParser_7 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__2E_) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1363_13_ (galgasTemplateScanner & inLexique,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,
                                GGS_typeExpression  &var_cas_outExpression,
                                GGS_AC_galgasType  &var_cas_outResultType) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  GGS_L_EXsignature  var_cas_signatureRoutine ;
  GGS_AC_semanticsEntity  var_cas_entite ;
  const GGS_M_semanticsEntitiesForUse  temp_54668 = var_cas_inEntitiesMap ;
  if (temp_54668.isBuilt ()) {
    temp_54668 (HERE)->method_searchKey (inLexique, var_cas_functionName, var_cas_entite COMMA_SOURCE_FILE_AT_LINE (1376)) ;
  }
  GGS_bool var_cas_isExternActionCall ;
  { const GGS_AC_semanticsEntity _var_55248 = var_cas_entite ; // CAST instruction
    if (_var_55248.getPtr () != NULL) {
      macroValidPointer (_var_55248.getPtr ()) ;
      if (dynamic_cast <cPtr_typeEntiteFonction *> (_var_55248.getPtr ()) != NULL) {
        const GGS_typeEntiteFonction var_cas_r (_var_55248.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_r.reader_aListeArgumentsFormels (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)) ;
        var_cas_outResultType = var_cas_r.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1381)) ;
        var_cas_isExternActionCall = GGS_bool (false) ;
      }else if (dynamic_cast <cPtr_typeEntiteFonctionExterne *> (_var_55248.getPtr ()) != NULL) {
        const GGS_typeEntiteFonctionExterne var_cas_ae (_var_55248.getPtr ()) ;
        var_cas_signatureRoutine = var_cas_ae.reader_aSignature (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)) ;
        var_cas_outResultType = var_cas_ae.reader_mReturnedType (inLexique COMMA_SOURCE_FILE_AT_LINE (1385)) ;
        var_cas_isExternActionCall = GGS_bool (true) ;
      }else{
        var_cas_functionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("'")).operator_concat (var_cas_functionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1389)))).operator_concat (GGS_string ("' should name a function or an extern function")) COMMA_SOURCE_FILE_AT_LINE (1392)) ;
        var_cas_signatureRoutine.drop () ;
        var_cas_isExternActionCall.drop () ;
        var_cas_outResultType.drop () ;
      }
    }
  }
  GGS_typeExpressionList  var_cas_expressionList ;
  GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;
  var_cas_listeAttributsSemantiques = GGS_typeListeAttributsSemantiques ::constructor_emptyList () ;
  {
    GGS_L_EXsignature::cEnumerator enumerator_55416 (var_cas_signatureRoutine, true) ;
    const GGS_L_EXsignature::cElement * operand_55416 = NULL ;
    while (((operand_55416 = enumerator_55416.nextObject ()))) {
      macroValidPointer (operand_55416) ;
      var_cas_listeAttributsSemantiques._addAssign_operation (operand_55416->mType, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE)) ;
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_output_expression_list_ (inLexique, var_cas_expressionList, var_cas_inCategoryReaderMap, var_cas_listeAttributsSemantiques, var_cas_inEntitiesMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
  var_cas_outExpression = GGS_typeFunctionCall ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_factor_templateExpressionParser_1363_13_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__28_) COMMA_HERE) ;
  nt_output_expression_list_parse (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'read_access'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1418_18_ (galgasTemplateScanner & inLexique,
                                GGS_lstring  &var_cas_nomVariable,
                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,
                                GGS_AC_galgasType  &var_cas_typeEntite,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  inLexique.assignFromAttribute_tokenString (var_cas_nomVariable) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  var_cas_ioVariablesMap.modifier_searchForReadOnlyAccess (inLexique, var_cas_nomVariable, var_cas_typeEntite, var_cas_nomCppEntite COMMA_SOURCE_FILE_AT_LINE (1425)) ;
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_read_access_templateExpressionParser_1418_18_parse (galgasTemplateScanner & inLexique) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1434_29_ (galgasTemplateScanner & inLexique,
                                GGS_typeExpressionList  &var_cas_outExpressionList,
                                const GGS_EXcategoryReaderMap  var_cas_inCategoryReaderMap,
                                const GGS_typeListeAttributsSemantiques  var_cas_inFormalAttributesList,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inEntitiesMap,
                                const GGS_M_optionComponents  var_cas_inOptionsComponentsMapForUse,
                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {
  GGS_typeTypesList  var_cas_effectiveTypesList ;
  var_cas_effectiveTypesList = GGS_typeTypesList ::constructor_emptyList () ;
  var_cas_outExpressionList = GGS_typeExpressionList ::constructor_emptyList () ;
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_repeat_templateExpressionParser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          GGS_typeExpression  var_cas_expression ;
          GGS_AC_galgasType  var_cas_resultType ;
          nt_expression_ (inLexique, var_cas_inEntitiesMap, var_cas_inCategoryReaderMap, var_cas_inOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;
          GGS_location  var_cas_errorLocation ;
          var_cas_errorLocation = GGS_location (inLexique) ;
          var_cas_effectiveTypesList._addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;
          var_cas_outExpressionList._addAssign_operation (var_cas_expression) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
  GGS_location  var_cas_endOfListLocation ;
  var_cas_endOfListLocation = GGS_location (inLexique) ;
  if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1463))).operator_strictInf (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1463)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("too much expressions") COMMA_SOURCE_FILE_AT_LINE (1465)) ;
  }else if (((var_cas_inFormalAttributesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1465))).operator_strictSup (var_cas_effectiveTypesList.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (1465)))).isBuiltAndTrue ()) {
    var_cas_endOfListLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("one or more expressions missing") COMMA_SOURCE_FILE_AT_LINE (1467)) ;
  }else{
    {
      GGS_typeListeAttributsSemantiques::cEnumerator enumerator_58084 (var_cas_inFormalAttributesList, true) ;
      const GGS_typeListeAttributsSemantiques::cElement * operand_58084 = NULL ;
      GGS_typeTypesList::cEnumerator enumerator_58175 (var_cas_effectiveTypesList, true) ;
      const GGS_typeTypesList::cElement * operand_58175 = NULL ;
      while (((operand_58084 = enumerator_58084.nextObject ()))
          && ((operand_58175 = enumerator_58175.nextObject ()))) {
        macroValidPointer (operand_58084) ;
        macroValidPointer (operand_58175) ;
        ::routine_checkAssignmentTypesCompatibility (inLexique,  operand_58084->mAttributType,  operand_58175->mType,  operand_58175->mEndOfExpressionLocation,  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (1470)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

void templateExpressionParser::
pr_output_expression_list_templateExpressionParser_1434_29_parse (galgasTemplateScanner & inLexique) {
  { bool syntaxRepeat_8 = true ;
    while (syntaxRepeat_8) {
      switch (select_repeat_templateExpressionParser_8 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1__21_) COMMA_HERE) ;
          nt_expression_parse (inLexique) ;
          } break ;
        default :
          syntaxRepeat_8 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

