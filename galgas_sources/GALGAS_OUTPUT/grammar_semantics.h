//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_semantics.h'                         *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 6th, 2006, at 19h21'15"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef grammar_semantics_DEFINED
#define grammar_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

// Include imported semantics
#include "common_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeListeAttributsAxiome ;
class GGS_typeListeChaines ;
class GGS_L_grammarDescriptorForProgram ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     list '@typeListeAttributsAxiome'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeAttributsAxiome ;

class GGS_typeListeAttributsAxiome {
  public : typedef elementOf_GGS_typeListeAttributsAxiome element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeListeAttributsAxiome (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : GGS_typeListeAttributsAxiome (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_typeListeAttributsAxiome (const GGS_typeListeAttributsAxiome &) ; // Copy constructor
  public : void operator = (const GGS_typeListeAttributsAxiome &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeListeAttributsAxiome (void) ;

//--- Constructor 'empty'
  public : static GGS_typeListeAttributsAxiome constructor_empty (LOCATION_ARGS) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         list '@typeListeChaines'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeChaines ;

class GGS_typeListeChaines {
  public : typedef elementOf_GGS_typeListeChaines element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeListeChaines (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : GGS_typeListeChaines (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_typeListeChaines (const GGS_typeListeChaines &) ; // Copy constructor
  public : void operator = (const GGS_typeListeChaines &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeListeChaines (void) ;

//--- Constructor 'empty'
  public : static GGS_typeListeChaines constructor_empty (LOCATION_ARGS) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@L_grammarDescriptorForProgram'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_grammarDescriptorForProgram ;

class GGS_L_grammarDescriptorForProgram {
  public : typedef elementOf_GGS_L_grammarDescriptorForProgram element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_grammarDescriptorForProgram (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : GGS_L_grammarDescriptorForProgram (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_grammarDescriptorForProgram (const GGS_L_grammarDescriptorForProgram &) ; // Copy constructor
  public : void operator = (const GGS_L_grammarDescriptorForProgram &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_grammarDescriptorForProgram (void) ;

//--- Constructor 'empty'
  public : static GGS_L_grammarDescriptorForProgram constructor_empty (LOCATION_ARGS) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_L_signature & argument_2,
                                const GGS_typeListeAttributsAxiome & argument_3,
                                const GGS_lstring & argument_4) ;
  protected : void internalAppendItem (const GGS_string& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_L_signature & argument_2,
                                const GGS_typeListeAttributsAxiome & argument_3,
                                const GGS_lstring & argument_4) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               Element of list '@typeListeAttributsAxiome'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeAttributsAxiome {
  private : elementOf_GGS_typeListeAttributsAxiome * mNextItem ;
    public : GGS_lstring  aAttributAxiome ;
  public : elementOf_GGS_typeListeAttributsAxiome (const GGS_lstring & ) ;

  public : inline elementOf_GGS_typeListeAttributsAxiome * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeAttributsAxiome (const elementOf_GGS_typeListeAttributsAxiome &) ;
  private : void operator = (const elementOf_GGS_typeListeAttributsAxiome &) ;
  public : inline ~elementOf_GGS_typeListeAttributsAxiome (void) {}
  friend class GGS_typeListeAttributsAxiome ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@typeListeChaines'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeChaines {
  private : elementOf_GGS_typeListeChaines * mNextItem ;
    public : GGS_lstring  attributChaine ;
  public : elementOf_GGS_typeListeChaines (const GGS_lstring & ) ;

  public : inline elementOf_GGS_typeListeChaines * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeChaines (const elementOf_GGS_typeListeChaines &) ;
  private : void operator = (const elementOf_GGS_typeListeChaines &) ;
  public : inline ~elementOf_GGS_typeListeChaines (void) {}
  friend class GGS_typeListeChaines ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@L_grammarDescriptorForProgram'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_grammarDescriptorForProgram {
  private : elementOf_GGS_L_grammarDescriptorForProgram * mNextItem ;
    public : GGS_string mGrammarPostfix ;
    public : GGS_lstring  mGrammarName ;
    public : GGS_L_signature  mStartSymbolSignature ;
    public : GGS_typeListeAttributsAxiome  mStartSymbolAttributesList ;
    public : GGS_lstring  mLexiqueClassName ;
  public : elementOf_GGS_L_grammarDescriptorForProgram (const GGS_string& ,
                                const GGS_lstring & ,
                                const GGS_L_signature & ,
                                const GGS_typeListeAttributsAxiome & ,
                                const GGS_lstring & ) ;

  public : inline elementOf_GGS_L_grammarDescriptorForProgram * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_grammarDescriptorForProgram (const elementOf_GGS_L_grammarDescriptorForProgram &) ;
  private : void operator = (const elementOf_GGS_L_grammarDescriptorForProgram &) ;
  public : inline ~elementOf_GGS_L_grammarDescriptorForProgram (void) {}
  friend class GGS_L_grammarDescriptorForProgram ;
} ;

//---------------------------------------------------------------------------*

#endif
