//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsCompilation.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 19th, 2008, at 23h22'6"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "semanticsCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "semanticsSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "constructBuiltinTypeMap"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_constructBuiltinTypeMap (C_Compiler & _inLexique,
                                GGS_typeMap  & var_cas_outTypeMap COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_constructBuiltinTypeMap at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outTypeMap = GGS_typeMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "string"), GGS_location (_inLexique) COMMA_HERE), GGS_stringGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (37)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "char"), GGS_location (_inLexique) COMMA_HERE), GGS_charGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (38)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "bool"), GGS_location (_inLexique) COMMA_HERE), GGS_boolGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (39)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "uint"), GGS_location (_inLexique) COMMA_HERE), GGS_uintGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (40)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sint"), GGS_location (_inLexique) COMMA_HERE), GGS_sintGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (41)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "uint64"), GGS_location (_inLexique) COMMA_HERE), GGS_uint64GalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (42)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "sint64"), GGS_location (_inLexique) COMMA_HERE), GGS_sint64GalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (43)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "double"), GGS_location (_inLexique) COMMA_HERE), GGS_doubleGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (44)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lstring"), GGS_location (_inLexique) COMMA_HERE), GGS_lstringGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (45)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lchar"), GGS_location (_inLexique) COMMA_HERE), GGS_lcharGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (46)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lbool"), GGS_location (_inLexique) COMMA_HERE), GGS_lboolGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (47)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "luint"), GGS_location (_inLexique) COMMA_HERE), GGS_luintGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (48)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lsint"), GGS_location (_inLexique) COMMA_HERE), GGS_lsintGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (49)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "luint64"), GGS_location (_inLexique) COMMA_HERE), GGS_luint64GalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (50)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lsint64"), GGS_location (_inLexique) COMMA_HERE), GGS_lsint64GalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (51)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "ldouble"), GGS_location (_inLexique) COMMA_HERE), GGS_ldoubleGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (52)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "binaryset"), GGS_location (_inLexique) COMMA_HERE), GGS_binarysetGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (53)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "stringset"), GGS_location (_inLexique) COMMA_HERE), GGS_stringsetGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (54)) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "location"), GGS_location (_inLexique) COMMA_HERE), GGS_locationGalgasType ::constructor_new (_inLexique COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_attributeList  var_cas_lstringAttribute ;
  var_cas_lstringAttribute = GGS_attributeList ::constructor_emptyList () ;
  GGS_typeMapIndex  var_cas_lstringIndex ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lstring"), GGS_location (_inLexique) COMMA_HERE), var_cas_outTypeMap, var_cas_lstringIndex COMMA_SOURCE_FILE_AT_LINE (59)) ;
  var_cas_lstringAttribute._addAssign_operation (var_cas_lstringIndex, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "mValue"), GGS_location (_inLexique) COMMA_HERE)) ;
  GGS_lstring  var_cas_lstringlist ;
  var_cas_lstringlist = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "lstringlist"), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, var_cas_lstringlist, GGS_listGalgasType ::constructor_new (_inLexique, var_cas_lstringlist, var_cas_lstringAttribute COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (62)) ;
  GGS_attributeList  var_cas_stringAttribute ;
  var_cas_stringAttribute = GGS_attributeList ::constructor_emptyList () ;
  GGS_typeMapIndex  var_cas_stringIndex ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "string"), GGS_location (_inLexique) COMMA_HERE), var_cas_outTypeMap, var_cas_stringIndex COMMA_SOURCE_FILE_AT_LINE (66)) ;
  var_cas_stringAttribute._addAssign_operation (var_cas_stringIndex, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "mValue"), GGS_location (_inLexique) COMMA_HERE)) ;
  GGS_lstring  var_cas_stringlist ;
  var_cas_stringlist = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "stringlist"), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, var_cas_stringlist, GGS_listGalgasType ::constructor_new (_inLexique, var_cas_stringlist, var_cas_stringAttribute COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (69)) ;
  GGS_attributeList  var_cas_uint64Attribute ;
  var_cas_uint64Attribute = GGS_attributeList ::constructor_emptyList () ;
  GGS_typeMapIndex  var_cas_uint64Index ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "uint64"), GGS_location (_inLexique) COMMA_HERE), var_cas_outTypeMap, var_cas_uint64Index COMMA_SOURCE_FILE_AT_LINE (73)) ;
  var_cas_uint64Attribute._addAssign_operation (var_cas_uint64Index, GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "mValue"), GGS_location (_inLexique) COMMA_HERE)) ;
  GGS_lstring  var_cas_uint64list ;
  var_cas_uint64list = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, "uint64list"), GGS_location (_inLexique) COMMA_HERE) ;
  var_cas_outTypeMap.modifier_insertKey (_inLexique, var_cas_uint64list, GGS_listGalgasType ::constructor_new (_inLexique, var_cas_uint64list, var_cas_uint64Attribute COMMA_HERE) COMMA_SOURCE_FILE_AT_LINE (76)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_constructBuiltinTypeMap\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@semanticDeclaration.enterType'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclaration__enterType> gDispatchTableFor__semanticDeclaration__enterType ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclaration__enterType (typeCategoryMethod__semanticDeclaration__enterType inRoutine,
                     const sint32 inClassID) {
  gDispatchTableFor__semanticDeclaration__enterType.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclaration__enterType
findCategoryMethod__semanticDeclaration__enterType (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__semanticDeclaration__enterType result = gDispatchTableFor__semanticDeclaration__enterType (inClassPtr->slotID () COMMA_HERE) ;
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclaration__enterType (superClassPtr) ;
      gDispatchTableFor__semanticDeclaration__enterType (inClassPtr->slotID () COMMA_HERE) = result ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@mapDeclaration.enterType'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_mapDeclaration * operand_5757,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5757 != NULL) {
    GGS_attributeList  var_cas_attributeList ;
    var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_5885 (operand_5757->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_5885 = NULL ;
      while (((operand_5885 = (GGS_attributeInCollectionList::cElement *) enumerator_5885.nextObject ()))) {
        macroValidPointer (operand_5885) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_5885->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (99)) ;
        var_cas_attributeList._addAssign_operation (var_cas_attributeTypeIndex, operand_5885->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_mapType ::constructor_new (_inLexique, operand_5757->mMapTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_5757->mMapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@mapindexDeclaration.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapindexDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_mapindexDeclaration * operand_6413,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6413 != NULL) {
    GGS_typeMapIndex  var_cas_mapTypeIndex ;
    GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_6413->mMapTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_mapTypeIndex COMMA_SOURCE_FILE_AT_LINE (117)) ;
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_mapindexType ::constructor_new (_inLexique, operand_6413->mMapIndexTypeName, var_cas_mapTypeIndex, operand_6413->mSearchMethodName COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_6413->mMapIndexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (124)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@enumDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_enumDeclaration * operand_6935,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_6935 != NULL) {
    GGS_enumConstructorMap  var_cas_enumConstructorMap ;
    var_cas_enumConstructorMap = GGS_enumConstructorMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
    {
      GGS_lstringlist::cEnumerator enumerator_7072 (operand_6935->mConstructorConstantList, true) ;
      const GGS_lstringlist::cElement * operand_7072 = NULL ;
      while (((operand_7072 = (GGS_lstringlist::cElement *) enumerator_7072.nextObject ()))) {
        macroValidPointer (operand_7072) ;
        var_cas_enumConstructorMap.modifier_insertKey (_inLexique, operand_7072->mValue COMMA_SOURCE_FILE_AT_LINE (135)) ;
      }
    }
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_enumType ::constructor_new (_inLexique, operand_6935->mEnumTypeName, var_cas_enumConstructorMap COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_6935->mEnumTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@filewrapperDeclaration.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_filewrapperDeclaration * operand_7462,
                                GGS_semanticContext & /* var_cas_ioSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7462 != NULL) {
    _inLexique.printMessage (GGS_string (true, "@filewrapperDeclaration.enterType\n") COMMA_SOURCE_FILE_AT_LINE (150)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@categoryMethodDeclaration.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__categoryMethodDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_categoryMethodDeclaration * operand_7695,
                                GGS_semanticContext & /* var_cas_ioSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7695 != NULL) {
    _inLexique.printMessage (GGS_string (true, "@categoryMethodDeclaration.enterType\n") COMMA_SOURCE_FILE_AT_LINE (158)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@sortedListDeclaration.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_sortedListDeclaration * operand_7927,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7927 != NULL) {
    GGS_attributeList  var_cas_attributeList ;
    var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_8055 (operand_7927->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_8055 = NULL ;
      while (((operand_8055 = (GGS_attributeInCollectionList::cElement *) enumerator_8055.nextObject ()))) {
        macroValidPointer (operand_8055) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_8055->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (170)) ;
        var_cas_attributeList._addAssign_operation (var_cas_attributeTypeIndex, operand_8055->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_listGalgasType ::constructor_new (_inLexique, operand_7927->mSortedListTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_7927->mSortedListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (178)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@structDeclaration.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_structDeclaration * operand_8602,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8602 != NULL) {
    GGS_attributeList  var_cas_attributeList ;
    var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_8730 (operand_8602->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_8730 = NULL ;
      while (((operand_8730 = (GGS_attributeInCollectionList::cElement *) enumerator_8730.nextObject ()))) {
        macroValidPointer (operand_8730) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_8730->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (190)) ;
        var_cas_attributeList._addAssign_operation (var_cas_attributeTypeIndex, operand_8730->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_structGalgasType ::constructor_new (_inLexique, operand_8602->mStructTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_8602->mStructTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (198)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@listDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_listDeclaration * operand_9269,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9269 != NULL) {
    GGS_attributeList  var_cas_attributeList ;
    var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_9397 (operand_9269->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_9397 = NULL ;
      while (((operand_9397 = (GGS_attributeInCollectionList::cElement *) enumerator_9397.nextObject ()))) {
        macroValidPointer (operand_9397) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_9397->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (210)) ;
        var_cas_attributeList._addAssign_operation (var_cas_attributeTypeIndex, operand_9397->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_listGalgasType ::constructor_new (_inLexique, operand_9269->mListTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_9269->mListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (218)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@classDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_classDeclaration * operand_9931,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9931 != NULL) {
    GGS_typeMapIndex  var_cas_superClassIndex ;
    if (((operand_9931->mSuperClassName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (228)))._operator_isEqual (GGS_string (true, ""))).isBuiltAndTrue ()) {
      var_cas_superClassIndex = GGS_typeMapIndex ::constructor_null (_inLexique COMMA_HERE) ;
    }else{
      GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_9931->mSuperClassName, var_cas_ioSemanticContext.mTypeMap, var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (231)) ;
    }
    GGS_attributeList  var_cas_attributeList ;
    var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_10324 (operand_9931->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_10324 = NULL ;
      while (((operand_10324 = (GGS_attributeInCollectionList::cElement *) enumerator_10324.nextObject ()))) {
        macroValidPointer (operand_10324) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_10324->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (237)) ;
        var_cas_attributeList._addAssign_operation (var_cas_attributeTypeIndex, operand_10324->mAttributeName) ;
      }
    }
    GGS_classMethodList  var_cas_methodList ;
    var_cas_methodList = GGS_classMethodList ::constructor_emptyList () ;
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_classGalgasType ::constructor_new (_inLexique, operand_9931->mIsAbstract, operand_9931->mClassTypeName, var_cas_superClassIndex, var_cas_attributeList, var_cas_methodList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (_inLexique, operand_9931->mClassTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (250)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@externRoutineDeclaration.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclaration__enterType (C_Compiler & _inLexique,
                                const cPtr_externRoutineDeclaration * operand_10987,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10987 != NULL) {
    GGS_signature  var_cas_routineSignature ;
    var_cas_routineSignature = GGS_signature ::constructor_emptyList () ;
    {
      GGS_formalParameterList::cEnumerator enumerator_11147 (operand_10987->mFormalParameterList, true) ;
      const GGS_formalParameterList::cElement * operand_11147 = NULL ;
      while (((operand_11147 = (GGS_formalParameterList::cElement *) enumerator_11147.nextObject ()))) {
        macroValidPointer (operand_11147) ;
        GGS_typeMapIndex  var_cas_parameterTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, operand_11147->mFormalParameterTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (262)) ;
        var_cas_routineSignature._addAssign_operation (var_cas_parameterTypeIndex, operand_11147->mFormalParameterName, operand_11147->mFormalParameterPassingMode) ;
      }
    }
    var_cas_ioSemanticContext.mRoutineMap.modifier_insertKey (_inLexique, operand_10987->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (266)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildSemanticContext"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSemanticContext (C_Compiler & _inLexique,
                                const GGS_semanticDeclarationList   var_cas_inSemanticDeclarationList,
                                GGS_semanticContext & var_cas_outSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSemanticContext at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeMap  var_cas_typeMap ;
  ::routine_constructBuiltinTypeMap (_inLexique,  var_cas_typeMap COMMA_SOURCE_FILE_AT_LINE (276)) ;
  var_cas_outSemanticContext = GGS_semanticContext::constructor_new (_inLexique, var_cas_typeMap, GGS_routineMap ::constructor_emptyMap (_inLexique COMMA_HERE) COMMA_HERE) ;
  {
    GGS_semanticDeclarationList::cEnumerator enumerator_12011 (var_cas_inSemanticDeclarationList, true) ;
    const GGS_semanticDeclarationList::cElement * operand_12011 = NULL ;
    while (((operand_12011 = (GGS_semanticDeclarationList::cElement *) enumerator_12011.nextObject ()))) {
      macroValidPointer (operand_12011) ;
      const GGS_semanticDeclaration  _temp_12066 = operand_12011->mSemanticDeclaration ;
      if (_temp_12066._isBuilt ()) {
        typeCategoryMethod__semanticDeclaration__enterType _method = findCategoryMethod__semanticDeclaration__enterType (_temp_12066._galgasObjectRunTimeInfo ()) ;
        if (_method != NULL) {
          _method (_inLexique, _temp_12066 (HERE), var_cas_outSemanticContext COMMA_SOURCE_FILE_AT_LINE (285)) ;
        }
      }
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_undefinedClasses ;
    var_cas_undefinedClasses = var_cas_outSemanticContext.reader_mTypeMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)).reader_unsolvedIndexKeyStringList (_inLexique COMMA_SOURCE_FILE_AT_LINE (289)) ;
    if (((var_cas_undefinedClasses.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (290)))._operator_isEqual (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = GGS_string (true, "there is 1 undefined type:") ;
      {
        GGS_stringlist::cEnumerator enumerator_12403 (var_cas_undefinedClasses, true) ;
        const GGS_stringlist::cElement * operand_12403 = NULL ;
        while (((operand_12403 = (GGS_stringlist::cElement *) enumerator_12403.nextObject ()))) {
          macroValidPointer (operand_12403) ;
          var_cas_errorMessage.writeString ("\n"
            "-  @") ;
          var_cas_errorMessage._dotAssign_operation (operand_12403->mValue) ;
        }
      }
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (295)) ;
    }else if (((var_cas_undefinedClasses.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (296)))._operator_strictSup (GGS_uint (true, 1U))).isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage ;
      var_cas_errorMessage = ((GGS_string (true, "there are "))._operator_concat (var_cas_undefinedClasses.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (297)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (297))))._operator_concat (GGS_string (true, " undefined types:")) ;
      {
        GGS_stringlist::cEnumerator enumerator_12684 (var_cas_undefinedClasses, true) ;
        const GGS_stringlist::cElement * operand_12684 = NULL ;
        while (((operand_12684 = (GGS_stringlist::cElement *) enumerator_12684.nextObject ()))) {
          macroValidPointer (operand_12684) ;
          var_cas_errorMessage.writeString ("\n"
            "-  @") ;
          var_cas_errorMessage._dotAssign_operation (operand_12684->mValue) ;
        }
      }
      GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (301)) ;
    }
  }
  if (((GGS_uint ::constructor_errorCount (_inLexique COMMA_HERE))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    {
      GGS_typeMap::cEnumerator enumerator_13011 (var_cas_outSemanticContext.reader_mTypeMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (308)), true) ;
      const GGS_typeMap::cElement * operand_13011 = NULL ;
      while (((operand_13011 = (GGS_typeMap::cElement *) enumerator_13011.nextObject ()))) {
        macroValidPointer (operand_13011) ;
        const GGS_ACGalgasType  _temp_13057 = operand_13011->mInfo.mType ;
        if (_temp_13057._isBuilt ()) {
          _temp_13057 (HERE)->method_checkNoCircularity (_inLexique, var_cas_outSemanticContext.reader_mTypeMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (309)).reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (309)) COMMA_SOURCE_FILE_AT_LINE (309)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSemanticContext\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseSemanticComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseSemanticComponent (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticsComponentRoot  & var_cas_outSemanticsComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (325)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (325)) ;
  GGS_lstring  var_cas_basenameKey ;
  var_cas_basenameKey = GGS_lstring ::constructor_new (_inLexique, var_cas_basename, GGS_location (_inLexique) COMMA_HERE) ;
  if ((var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (327)).reader_hasKey (_inLexique, var_cas_basename COMMA_SOURCE_FILE_AT_LINE (327))).isBuiltAndTrue ()) {
    const GGS_parsedSemanticsComponentMap  _temp_13997 = var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (_inLexique COMMA_SOURCE_FILE_AT_LINE (328)) ;
    if (_temp_13997._isBuilt ()) {
      _temp_13997 (HERE)->method_searchKey (_inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (328)) ;
    }
  }else{
    semanticsSLRgrammar::_performSourceFileParsing_ (_inLexique,
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outSemanticsComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (330)) ;
    var_cas_ioParsedComponentStruct.mParsedSemanticsComponentMap.modifier_insertKey (_inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (331)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "recursivelyImportSemanticComponent"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyImportSemanticComponent (C_Compiler & _inLexique,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticDeclarationList  & var_cas_ioSemanticDeclarationList,
                                GGS_stringset  & var_cas_ioParsedFileSet,
                                const GGS_lstringlist   var_cas_inListOfFilesToParse,
                                const GGS_string  var_cas_inDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyImportSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_14606 (var_cas_inListOfFilesToParse, true) ;
    const GGS_lstringlist::cElement * operand_14606 = NULL ;
    while (((operand_14606 = (GGS_lstringlist::cElement *) enumerator_14606.nextObject ()))) {
      macroValidPointer (operand_14606) ;
      if (((var_cas_ioParsedFileSet.reader_hasKey (_inLexique, operand_14606->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (345)) COMMA_SOURCE_FILE_AT_LINE (345)))._operator_not ()).isBuiltAndTrue ()) {
        var_cas_ioParsedFileSet._addAssign_operation (operand_14606->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (346))) ;
        GGS_string var_cas_extension ;
        var_cas_extension = operand_14606->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)).reader_pathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (347)) ;
        if (((var_cas_extension)._operator_isEqual (GGS_string (true, "gSemantics"))).isBuiltAndTrue ()) {
          GGS_lstring  var_cas_filePath ;
          var_cas_filePath = GGS_lstring ::constructor_new (_inLexique, operand_14606->mValue.ggs_string ().reader_absolutePathFromPath (_inLexique, var_cas_inDirectory COMMA_SOURCE_FILE_AT_LINE (350)), operand_14606->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (351)) COMMA_HERE) ;
          GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
          ::routine_parseSemanticComponent (_inLexique,  var_cas_filePath,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (353)) ;
          var_cas_ioSemanticDeclarationList = (var_cas_ioSemanticDeclarationList)._operator_concat (var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (_inLexique COMMA_SOURCE_FILE_AT_LINE (359)).reader_mSemanticDeclarationList (_inLexique COMMA_SOURCE_FILE_AT_LINE (359))) ;
          ::routine_recursivelyImportSemanticComponent (_inLexique,  var_cas_ioParsedComponentStruct,  var_cas_ioSemanticDeclarationList,  var_cas_ioParsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (_inLexique COMMA_SOURCE_FILE_AT_LINE (364)),  var_cas_inDirectory COMMA_SOURCE_FILE_AT_LINE (359)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyImportSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileSemanticsComponent"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSemanticsComponent (C_Compiler & _inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSemanticsComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
  ::routine_parseSemanticComponent (_inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (380)) ;
  GGS_string var_cas_basename ;
  var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (387)).reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (387)) ;
  GGS_lstring  var_cas_componentName ;
  var_cas_componentName = var_cas_semanticsComponentRoot.reader_mSemanticsComponentName (_inLexique COMMA_SOURCE_FILE_AT_LINE (388)) ;
  if (((var_cas_componentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (389)))._operator_isNotEqual (var_cas_basename)).isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticWarning (_inLexique, ((((GGS_string (true, "GALGAS checks "
      "the component name ('"))._operator_concat (var_cas_componentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (391))))._operator_concat (GGS_string (true, "') against the source file base name ('")))._operator_concat (var_cas_basename))._operator_concat (GGS_string (true, "'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  }
  GGS_semanticDeclarationList  var_cas_semanticDeclarationList ;
  var_cas_semanticDeclarationList = var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (_inLexique COMMA_SOURCE_FILE_AT_LINE (396)).reader_mSemanticDeclarationList (_inLexique COMMA_SOURCE_FILE_AT_LINE (396)) ;
  GGS_stringset  var_cas_parsedFileSet ;
  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (_inLexique, var_cas_inSourceFile.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_HERE) ;
  ::routine_recursivelyImportSemanticComponent (_inLexique,  var_cas_ioParsedComponentStruct,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (_inLexique COMMA_SOURCE_FILE_AT_LINE (402)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (_inLexique COMMA_SOURCE_FILE_AT_LINE (403)) COMMA_SOURCE_FILE_AT_LINE (397)) ;
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (_inLexique,  var_cas_semanticDeclarationList,  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (406)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSemanticsComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsCompilation (void) {
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__mapDeclaration__enterType, gClassInfoFor__mapDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__mapindexDeclaration__enterType, gClassInfoFor__mapindexDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__enumDeclaration__enterType, gClassInfoFor__enumDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__filewrapperDeclaration__enterType, gClassInfoFor__filewrapperDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__categoryMethodDeclaration__enterType, gClassInfoFor__categoryMethodDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__sortedListDeclaration__enterType, gClassInfoFor__sortedListDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__structDeclaration__enterType, gClassInfoFor__structDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__listDeclaration__enterType, gClassInfoFor__listDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__classDeclaration__enterType, gClassInfoFor__classDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__externRoutineDeclaration__enterType, gClassInfoFor__externRoutineDeclaration.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_semanticsCompilation (prologueRoutineFor_semanticsCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

