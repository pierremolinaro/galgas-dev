//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsCompilation.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       march 15th, 2010, at 12h4'0"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "semanticsSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseSemanticComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseSemanticComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticsComponentAST  & var_cas_outSemanticsComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_HERE) ;
  const GGS_bool cond_2591 = var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (41)).reader_hasKey (var_cas_basename) ;
  if (cond_2591.isBuiltAndTrue ()) {
    const GGS_parsedSemanticsComponentMap  temp_2541 = var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
    if (temp_2541.isBuilt ()) {
      temp_2541 (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (42)) ;
    }
  }else if (cond_2591.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      C_Grammar_semanticsSLRgrammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outSemanticsComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (44)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedSemanticsComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (45)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "recursivelyImportSemanticComponent"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyImportSemanticComponent (C_Compiler & inLexique,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticDeclarationListAST  & var_cas_ioSemanticDeclarationList,
                                GGS_stringset  & var_cas_ioParsedFileSet,
                                const GGS_lstringlist   var_cas_inListOfFilesToParse,
                                const GGS_string  var_cas_inDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyImportSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_3164 (var_cas_inListOfFilesToParse, true) ;
    const GGS_lstringlist::cElement * operand_3164 = NULL ;
    while (((operand_3164 = enumerator_3164.nextObject ()))) {
      macroValidPointer (operand_3164) ;
      const GGS_bool cond_4092 = (var_cas_ioParsedFileSet.reader_hasKey (operand_3164->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59)))).operator_not () ;
      if (cond_4092.isBuiltAndTrue ()) {
        var_cas_ioParsedFileSet.addAssign_operation (operand_3164->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (60))) ;
        GGS_string var_cas_extension = operand_3164->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (61)).reader_pathExtension () ;
        const GGS_bool cond_4079 = (var_cas_extension).operator_isEqual (GGS_string ("gSemantics")) ;
        if (cond_4079.isBuiltAndTrue ()) {
          GGS_lstring  var_cas_filePath = GGS_lstring ::constructor_new (inLexique, operand_3164->mValue.ggs_string ().reader_absolutePathFromPath (var_cas_inDirectory), operand_3164->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (65)) COMMA_HERE) ;
          GGS_semanticsComponentAST  var_cas_semanticsComponentRoot ;
          ::routine_parseSemanticComponent (inLexique,  var_cas_filePath,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (68)) ;
          var_cas_ioSemanticDeclarationList = (var_cas_ioSemanticDeclarationList).operator_concat (var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (73)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (73))) ;
          ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_ioSemanticDeclarationList,  var_cas_ioParsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (78)),  var_cas_inDirectory COMMA_SOURCE_FILE_AT_LINE (74)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyImportSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileSemanticsComponent"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSemanticsComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSemanticsComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticsComponentAST  var_cas_semanticsComponentRoot ;
  ::routine_parseSemanticComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (95)) ;
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_lstring  var_cas_componentName = var_cas_semanticsComponentRoot.reader_mSemanticsComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (102)) ;
  const GGS_bool cond_4982 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (103))).operator_isNotEqual (var_cas_basename) ;
  if (cond_4982.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (105)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (107)) ;
  }
  GGS_semanticDeclarationListAST  var_cas_semanticDeclarationList = var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (110)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (110)) ;
  GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (111))) ;
  ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (116)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (112)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSemanticsComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*

