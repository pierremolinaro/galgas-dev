//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'semanticsCompilation.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    december 13th, 2009, at 19h32'19"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsCompilation.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsCompilation.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//             Include directives generated by grammar includes              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "semanticsSLRgrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Virtual Table for category method '@semanticDeclaration.enterType'     *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclaration__enterType> gDispatchTableForMethod__semanticDeclaration__enterType ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclaration__enterType (typeCategoryMethod__semanticDeclaration__enterType inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclaration__enterType.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclaration__enterType
findCategoryMethod__semanticDeclaration__enterType (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__semanticDeclaration__enterType result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclaration__enterType.count ()) {
    result = gDispatchTableForMethod__semanticDeclaration__enterType (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclaration__enterType (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclaration__enterType.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@mapDeclaration.enterType'                 *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_mapDeclaration * operand_2612,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2612 != NULL) {
    GGS_attributeList  var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_2746 (operand_2612->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_2746 = NULL ;
      while (((operand_2746 = enumerator_2746.nextObject ()))) {
        macroValidPointer (operand_2746) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_2746->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (53)) ;
        var_cas_attributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_2746->mAttributeName) ;
      }
    }
    GGS_mapMethodMap  var_cas_insertMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_mapMethodList::cEnumerator enumerator_3071 (operand_2612->mInsertMethodList, true) ;
      const GGS_mapMethodList::cElement * operand_3071 = NULL ;
      while (((operand_3071 = enumerator_3071.nextObject ()))) {
        macroValidPointer (operand_3071) ;
        const GGS_bool cond_3230 = var_cas_insertMethodMap.reader_hasKey (operand_3071->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (59))) ;
        if (cond_3230.isBuiltAndTrue ()) {
          operand_3071->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_3071->mMethodName)).operator_concat (GGS_string ("' insert method is already declared")) COMMA_SOURCE_FILE_AT_LINE (61)) ;
        }else if (cond_3230.isBuiltAndFalse ()) {
          var_cas_insertMethodMap.modifier_insertKey (inLexique, operand_3071->mMethodName, operand_3071->mErrorMessage COMMA_SOURCE_FILE_AT_LINE (62)) ;
        }
      }
    }
    GGS_mapMethodMap  var_cas_removeMethodMap = GGS_mapMethodMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_mapMethodList::cEnumerator enumerator_3425 (operand_2612->mRemoveMethodList, true) ;
      const GGS_mapMethodList::cElement * operand_3425 = NULL ;
      while (((operand_3425 = enumerator_3425.nextObject ()))) {
        macroValidPointer (operand_3425) ;
        const GGS_bool cond_3585 = var_cas_removeMethodMap.reader_hasKey (operand_3425->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
        if (cond_3585.isBuiltAndTrue ()) {
          operand_3425->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_3425->mMethodName)).operator_concat (GGS_string ("' remove method is already declared")) COMMA_SOURCE_FILE_AT_LINE (70)) ;
        }else if (cond_3585.isBuiltAndFalse ()) {
          const GGS_bool cond_3744 = var_cas_insertMethodMap.reader_hasKey (operand_3425->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (70))) ;
          if (cond_3744.isBuiltAndTrue ()) {
            operand_3425->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_3425->mMethodName)).operator_concat (GGS_string ("' method is already declared as insert method")) COMMA_SOURCE_FILE_AT_LINE (72)) ;
          }else if (cond_3744.isBuiltAndFalse ()) {
            var_cas_removeMethodMap.modifier_insertKey (inLexique, operand_3425->mMethodName, operand_3425->mErrorMessage COMMA_SOURCE_FILE_AT_LINE (73)) ;
          }
        }
      }
    }
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_3956 (operand_2612->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_3956 = NULL ;
      while (((operand_3956 = enumerator_3956.nextObject ()))) {
        macroValidPointer (operand_3956) ;
        const GGS_string var_cas_accessorName = ((GGS_string ("set")).operator_concat (operand_3956->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ())).operator_concat (GGS_string ("ForKey")) ;
        const GGS_bool cond_4271 = var_cas_removeMethodMap.reader_hasKey (var_cas_accessorName) ;
        if (cond_4271.isBuiltAndTrue ()) {
          operand_3956->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_accessorName)).operator_concat (GGS_string ("' remove method name is incompatible with accessor of '"))).operator_concat (operand_3956->mAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (81)) ;
        }else if (cond_4271.isBuiltAndFalse ()) {
          const GGS_bool cond_4467 = var_cas_insertMethodMap.reader_hasKey (var_cas_accessorName) ;
          if (cond_4467.isBuiltAndTrue ()) {
            operand_3956->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_accessorName)).operator_concat (GGS_string ("' insert method name is incompatible with accessor of '"))).operator_concat (operand_3956->mAttributeName)).operator_concat (GGS_string ("' attribute")) COMMA_SOURCE_FILE_AT_LINE (83)) ;
          }
        }
      }
    }
    GGS_ACGalgasType  var_cas_t = GGS_mapType ::constructor_new (inLexique, operand_2612->mMapTypeName, var_cas_attributeList, var_cas_insertMethodMap, var_cas_removeMethodMap COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_2612->mMapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (92)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@mapindexDeclaration.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapindexDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_mapindexDeclaration * operand_4838,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4838 != NULL) {
    GGS_typeMapIndex  var_cas_mapTypeIndex ;
    GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_4838->mMapTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_mapTypeIndex COMMA_SOURCE_FILE_AT_LINE (102)) ;
    GGS_ACGalgasType  var_cas_t = GGS_mapindexType ::constructor_new (inLexique, operand_4838->mMapIndexTypeName, var_cas_mapTypeIndex, operand_4838->mSearchMethodName COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_4838->mMapIndexTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (109)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@enumDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_enumDeclaration * operand_5371,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5371 != NULL) {
    GGS_enumConstructorMap  var_cas_enumConstructorMap = GGS_enumConstructorMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_lstringlist::cEnumerator enumerator_5524 (operand_5371->mConstructorConstantList, true) ;
      const GGS_lstringlist::cElement * operand_5524 = NULL ;
      while (((operand_5524 = enumerator_5524.nextObject ()))) {
        macroValidPointer (operand_5524) ;
        var_cas_enumConstructorMap.modifier_insertKey (inLexique, operand_5524->mValue COMMA_SOURCE_FILE_AT_LINE (120)) ;
      }
    }
    GGS_stringset  var_cas_allConstantSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_lstringlist::cEnumerator enumerator_5702 (operand_5371->mConstructorConstantList, true) ;
      const GGS_lstringlist::cElement * operand_5702 = NULL ;
      while (((operand_5702 = enumerator_5702.nextObject ()))) {
        macroValidPointer (operand_5702) ;
        var_cas_allConstantSet.addAssign_operation (operand_5702->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (125))) ;
      }
    }
    {
      GGS_lstringlist::cEnumerator enumerator_5786 (operand_5371->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_5786 = NULL ;
      while (((operand_5786 = enumerator_5786.nextObject ()))) {
        macroValidPointer (operand_5786) ;
        const GGS_bool cond_5935 = var_cas_allConstantSet.reader_hasKey (operand_5786->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (128))) ;
        if (cond_5935.isBuiltAndTrue ()) {
          operand_5786->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_5786->mValue)).operator_concat (GGS_string ("' is already defined for this enumeration")) COMMA_SOURCE_FILE_AT_LINE (130)) ;
        }
        var_cas_allConstantSet.addAssign_operation (operand_5786->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (131))) ;
      }
    }
    GGS_enumMessageMap  var_cas_enumMessageMap = GGS_enumMessageMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
    {
      GGS_enumMessageList::cEnumerator enumerator_6091 (operand_5371->mEnumMessageList, true) ;
      const GGS_enumMessageList::cElement * operand_6091 = NULL ;
      while (((operand_6091 = enumerator_6091.nextObject ()))) {
        macroValidPointer (operand_6091) ;
        var_cas_enumMessageMap.modifier_insertKey (inLexique, operand_6091->mEnumMessageName COMMA_SOURCE_FILE_AT_LINE (136)) ;
        GGS_stringset  var_cas_messageConstantSet = GGS_stringset ::constructor_emptySet () ;
        {
          GGS_enumMessageAssociationList::cEnumerator enumerator_6294 (operand_6091->mMessageAssociationList, true) ;
          const GGS_enumMessageAssociationList::cElement * operand_6294 = NULL ;
          while (((operand_6294 = enumerator_6294.nextObject ()))) {
            macroValidPointer (operand_6294) ;
            const GGS_bool cond_6481 = var_cas_messageConstantSet.reader_hasKey (operand_6294->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (140))) ;
            if (cond_6481.isBuiltAndTrue ()) {
              operand_6294->mConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_6294->mConstantName)).operator_concat (GGS_string ("' is already named for this message definition")) COMMA_SOURCE_FILE_AT_LINE (142)) ;
            }else if (cond_6481.isBuiltAndFalse ()) {
              const GGS_bool cond_6612 = (var_cas_allConstantSet.reader_hasKey (operand_6294->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (142)))).operator_not () ;
              if (cond_6612.isBuiltAndTrue ()) {
                operand_6294->mConstantName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this constant is not declared") COMMA_SOURCE_FILE_AT_LINE (144)) ;
              }
            }
            var_cas_messageConstantSet.addAssign_operation (operand_6294->mConstantName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (145))) ;
          }
        }
        {
          GGS_stringset::cEnumerator enumerator_6779 (var_cas_messageConstantSet, true) ;
          while (enumerator_6779.hasCurrentObject ()) {
            const GGS_bool cond_6940 = (var_cas_allConstantSet.reader_hasKey (enumerator_6779._key (HERE))).operator_not () ;
            if (cond_6940.isBuiltAndTrue ()) {
              operand_6091->mEnumMessageName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("this message definition does not name the '")).operator_concat (enumerator_6779._key (HERE))).operator_concat (GGS_string ("' constant")) COMMA_SOURCE_FILE_AT_LINE (151)) ;
            }
            enumerator_6779.next () ;
          }
        }
      }
    }
    GGS_ACGalgasType  var_cas_t = GGS_enumType ::constructor_new (inLexique, operand_5371->mEnumTypeName, var_cas_enumConstructorMap, var_cas_enumMessageMap COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_5371->mEnumTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@filewrapperDeclaration.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclaration * operand_7318,
                                GGS_semanticContext & /* var_cas_ioSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7318 != NULL) {
    inLexique.printMessage (GGS_string ("@filewrapperDeclaration.enterType [in semanticCompilation.gSemantics]\n") COMMA_SOURCE_FILE_AT_LINE (168)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@sortedListDeclaration.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_sortedListDeclaration * operand_7594,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7594 != NULL) {
    GGS_attributeList  var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_7728 (operand_7594->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_7728 = NULL ;
      while (((operand_7728 = enumerator_7728.nextObject ()))) {
        macroValidPointer (operand_7728) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_7728->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (180)) ;
        var_cas_attributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_7728->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t = GGS_listGalgasType ::constructor_new (inLexique, operand_7594->mSortedListTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_7594->mSortedListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@structDeclaration.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_structDeclaration * operand_8280,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8280 != NULL) {
    GGS_attributeList  var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_8414 (operand_8280->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_8414 = NULL ;
      while (((operand_8414 = enumerator_8414.nextObject ()))) {
        macroValidPointer (operand_8414) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_8414->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (200)) ;
        var_cas_attributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_8414->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t = GGS_structGalgasType ::constructor_new (inLexique, operand_8280->mStructTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_8280->mStructTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (208)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Category method '@listDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_listDeclaration * operand_8958,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8958 != NULL) {
    GGS_attributeList  var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_9092 (operand_8958->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_9092 = NULL ;
      while (((operand_9092 = enumerator_9092.nextObject ()))) {
        macroValidPointer (operand_9092) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_9092->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (220)) ;
        var_cas_attributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_9092->mAttributeName) ;
      }
    }
    GGS_ACGalgasType  var_cas_t = GGS_listGalgasType ::constructor_new (inLexique, operand_8958->mListTypeName, var_cas_attributeList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_8958->mListTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (228)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@classDeclaration.enterType'                *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_classDeclaration * operand_9631,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9631 != NULL) {
    GGS_typeMapIndex  var_cas_superClassIndex ;
    const GGS_bool cond_9824 = (operand_9631->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (238))).operator_isEqual (GGS_string ("")) ;
    if (cond_9824.isBuiltAndTrue ()) {
      var_cas_superClassIndex = GGS_typeMapIndex ::constructor_null (inLexique COMMA_HERE) ;
    }else if (cond_9824.isBuiltAndFalse ()) {
      GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_9631->mSuperClassName, var_cas_ioSemanticContext.mTypeMap, var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (241)) ;
      GGS_typeMapIndex  var_cas_classIndex ;
      GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_9631->mClassTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_classIndex COMMA_SOURCE_FILE_AT_LINE (244)) ;
      var_cas_ioSemanticContext.mDescendantClassListMap.addAssign_operation (operand_9631->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (245)), var_cas_classIndex) ;
    }
    GGS_attributeList  var_cas_attributeList = GGS_attributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionList::cEnumerator enumerator_10287 (operand_9631->mAttributeList, true) ;
      const GGS_attributeInCollectionList::cElement * operand_10287 = NULL ;
      while (((operand_10287 = enumerator_10287.nextObject ()))) {
        macroValidPointer (operand_10287) ;
        GGS_typeMapIndex  var_cas_attributeTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_10287->mAttributeTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (251)) ;
        var_cas_attributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_10287->mAttributeName) ;
      }
    }
    GGS_classMethodList  var_cas_methodList = GGS_classMethodList ::constructor_emptyList () ;
    GGS_classGalgasType  var_cas_t = GGS_classGalgasType ::constructor_new (inLexique, operand_9631->mIsAbstract, operand_9631->mClassTypeName, var_cas_superClassIndex, var_cas_attributeList, var_cas_methodList COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_9631->mClassTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (264)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@externRoutineDeclaration.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_externRoutineDeclaration * operand_10958,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10958 != NULL) {
    GGS_signature  var_cas_routineSignature = GGS_signature ::constructor_emptyList () ;
    {
      GGS_formalParameterList::cEnumerator enumerator_11130 (operand_10958->mFormalParameterList, true) ;
      const GGS_formalParameterList::cElement * operand_11130 = NULL ;
      while (((operand_11130 = enumerator_11130.nextObject ()))) {
        macroValidPointer (operand_11130) ;
        GGS_typeMapIndex  var_cas_parameterTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_11130->mFormalParameterTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (276)) ;
        var_cas_routineSignature.addAssign_operation (var_cas_parameterTypeIndex, operand_11130->mFormalParameterName, operand_11130->mFormalParameterPassingMode) ;
      }
    }
    var_cas_ioSemanticContext.mRoutineMap.modifier_insertKey (inLexique, operand_10958->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (280)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@externFunctionDeclaration.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_externFunctionDeclaration * operand_11659,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11659 != NULL) {
    GGS_signature  var_cas_functionSignature = GGS_signature ::constructor_emptyList () ;
    {
      GGS_formalParameterList::cEnumerator enumerator_11833 (operand_11659->mFormalParameterList, true) ;
      const GGS_formalParameterList::cElement * operand_11833 = NULL ;
      while (((operand_11833 = enumerator_11833.nextObject ()))) {
        macroValidPointer (operand_11833) ;
        GGS_typeMapIndex  var_cas_parameterTypeIndex ;
        GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_11833->mFormalParameterTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (292)) ;
        var_cas_functionSignature.addAssign_operation (var_cas_parameterTypeIndex, operand_11833->mFormalParameterName, operand_11833->mFormalParameterPassingMode) ;
      }
    }
    GGS_typeMapIndex  var_cas_resultTypeIndex ;
    GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_11659->mResultTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (297)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_11659->mFunctionName, var_cas_functionSignature, var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (299)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@onceFunctionDeclaration.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_onceFunctionDeclaration * operand_12533,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12533 != NULL) {
    GGS_typeMapIndex  var_cas_resultTypeIndex ;
    GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_12533->mResultTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (309)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_12533->mFunctionName, GGS_signature ::constructor_emptyList (), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (311)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@listmapDeclaration.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclaration__enterType (C_Compiler & inLexique,
                                const cPtr_listmapDeclaration * operand_13004,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13004 != NULL) {
    GGS_typeMapIndex  var_cas_associatedListTypeIndex ;
    GGS_typeMapIndex::class_method_makeRegularIndex (inLexique, operand_13004->mAssociatedListTypeName, var_cas_ioSemanticContext.mTypeMap, var_cas_associatedListTypeIndex COMMA_SOURCE_FILE_AT_LINE (320)) ;
    GGS_ACGalgasType  var_cas_t = GGS_listmapGalgasType ::constructor_new (inLexique, operand_13004->mListmapTypeName, var_cas_associatedListTypeIndex COMMA_HERE) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_13004->mListmapTypeName, var_cas_t COMMA_SOURCE_FILE_AT_LINE (326)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildSemanticContext"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSemanticContext (C_Compiler & inLexique,
                                const GGS_semanticDeclarationList   var_cas_inSemanticDeclarationList,
                                const GGS_location   var_cas_inEndOfSourceFile,
                                GGS_semanticContext & var_cas_outSemanticContext COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSemanticContext at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_typeMap  var_cas_typeMap = function_constructBuiltinTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (337)) ;
  var_cas_outSemanticContext = GGS_semanticContext::constructor_new (var_cas_typeMap, GGS_routineMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_functionMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_descendantClassListMap::constructor_emptyMap ()) ;
  {
    GGS_semanticDeclarationList::cEnumerator enumerator_13989 (var_cas_inSemanticDeclarationList, true) ;
    const GGS_semanticDeclarationList::cElement * operand_13989 = NULL ;
    while (((operand_13989 = enumerator_13989.nextObject ()))) {
      macroValidPointer (operand_13989) ;
      const GGS_semanticDeclaration  temp_14028 = operand_13989->mSemanticDeclaration ;
      if (temp_14028.isBuilt ()) {
        typeCategoryMethod__semanticDeclaration__enterType method = findCategoryMethod__semanticDeclaration__enterType (temp_14028.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_14028 (HERE), var_cas_outSemanticContext COMMA_SOURCE_FILE_AT_LINE (347)) ;
        }
      }
    }
  }
  const GGS_bool cond_14799 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_14799.isBuiltAndTrue ()) {
    GGS_stringlist  var_cas_undefinedClasses = var_cas_outSemanticContext.reader_mTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (351)).reader_unsolvedIndexKeyStringList (inLexique COMMA_SOURCE_FILE_AT_LINE (351)) ;
    const GGS_bool cond_14496 = (var_cas_undefinedClasses.reader_length ()).operator_isEqual (GGS_uint (1U)) ;
    if (cond_14496.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = GGS_string ("there is 1 undefined type:") ;
      {
        GGS_stringlist::cEnumerator enumerator_14372 (var_cas_undefinedClasses, true) ;
        const GGS_stringlist::cElement * operand_14372 = NULL ;
        while (((operand_14372 = enumerator_14372.nextObject ()))) {
          macroValidPointer (operand_14372) ;
          var_cas_errorMessage.appendCString ("\n"
            "-  @") ;
          var_cas_errorMessage.dotAssign_operation (operand_14372->mValue) ;
        }
      }
      var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (358)) ;
    }else if (cond_14496.isBuiltAndFalse ()) {
      const GGS_bool cond_14788 = (var_cas_undefinedClasses.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
      if (cond_14788.isBuiltAndTrue ()) {
        GGS_string var_cas_errorMessage = ((GGS_string ("there are ")).operator_concat (var_cas_undefinedClasses.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (359)))).operator_concat (GGS_string (" undefined types:")) ;
        {
          GGS_stringlist::cEnumerator enumerator_14666 (var_cas_undefinedClasses, true) ;
          const GGS_stringlist::cElement * operand_14666 = NULL ;
          while (((operand_14666 = enumerator_14666.nextObject ()))) {
            macroValidPointer (operand_14666) ;
            var_cas_errorMessage.appendCString ("\n"
              "-  @") ;
            var_cas_errorMessage.dotAssign_operation (operand_14666->mValue) ;
          }
        }
        var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (364)) ;
      }
    }
  }
  const GGS_bool cond_15173 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_15173.isBuiltAndTrue ()) {
    {
      GGS_typeMap::cEnumerator enumerator_15038 (var_cas_outSemanticContext.reader_mTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (371)), true) ;
      const GGS_typeMap::cElement * operand_15038 = NULL ;
      while (((operand_15038 = enumerator_15038.nextObject ()))) {
        macroValidPointer (operand_15038) ;
        const GGS_ACGalgasType  temp_15107 = operand_15038->mInfo.mType ;
        if (temp_15107.isBuilt ()) {
          temp_15107 (HERE)->method_checkTypeCrossReferences (inLexique, var_cas_outSemanticContext.reader_mTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (372)).reader_count () COMMA_SOURCE_FILE_AT_LINE (372)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSemanticContext\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticInstruction.semanticAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticInstruction__semanticAnalysis> gDispatchTableForMethod__semanticInstruction__semanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticInstruction__semanticAnalysis (typeCategoryMethod__semanticInstruction__semanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticInstruction__semanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticInstruction__semanticAnalysis
findCategoryMethod__semanticInstruction__semanticAnalysis (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__semanticInstruction__semanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticInstruction__semanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticInstruction__semanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticInstruction__semanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticInstruction__semanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@localVariableDeclaration.semanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_localVariableDeclaration * operand_15825,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15825 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationWithInitialization.semanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationWithInitialization__semanticAnalysis (C_Compiler &,
                                const cPtr_localVariableDeclarationWithInitialization * operand_16043,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16043 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localVariableDeclarationWithAssignment.semanticAnalysis' *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localVariableDeclarationWithAssignment__semanticAnalysis (C_Compiler &,
                                const cPtr_localVariableDeclarationWithAssignment * operand_16257,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16257 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localConstantDeclarationWithSourceExpression.semanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localConstantDeclarationWithSourceExpression__semanticAnalysis (C_Compiler &,
                                const cPtr_localConstantDeclarationWithSourceExpression * operand_16478,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16478 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@localConstantDeclarationWithConstructorCall.semanticAnalysis'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__localConstantDeclarationWithConstructorCall__semanticAnalysis (C_Compiler &,
                                const cPtr_localConstantDeclarationWithConstructorCall * operand_16697,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16697 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@assignmentInstruction.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__assignmentInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_assignmentInstruction * operand_16894,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16894 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@appendInstruction.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__appendInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_appendInstruction * operand_17087,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17087 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@sendInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sendInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_sendInstruction * operand_17278,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17278 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@foreachInstruction.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__foreachInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_foreachInstruction * operand_17472,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17472 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@ifInstruction.semanticAnalysis'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_ifInstruction * operand_17661,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17661 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@methodCallInstruction.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__methodCallInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_methodCallInstruction * operand_17858,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17858 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@modifierCallInstruction.semanticAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__modifierCallInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_modifierCallInstruction * operand_18057,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18057 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@errorInstruction.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__errorInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_errorInstruction * operand_18249,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18249 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@warningInstruction.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__warningInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_warningInstruction * operand_18443,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18443 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@routineCallInstruction.semanticAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineCallInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_routineCallInstruction * operand_18641,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18641 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@matchInstruction.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__matchInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_matchInstruction * operand_18833,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18833 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@castInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_castInstruction * operand_19024,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19024 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@addInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_addInstruction * operand_19214,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19214 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@removeInstruction.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__removeInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_removeInstruction * operand_19407,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19407 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@incrementInstruction.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__incrementInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_incrementInstruction * operand_19603,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19603 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@decrementInstruction.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__decrementInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_decrementInstruction * operand_19799,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19799 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@loopInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__loopInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_loopInstruction * operand_19990,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19990 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@messageInstruction.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__messageInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_messageInstruction * operand_20184,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20184 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@logInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__logInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_logInstruction * operand_20374,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20374 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@grammarInstruction.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__grammarInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_grammarInstruction * operand_20568,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20568 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@withInstruction.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__withInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_withInstruction * operand_20759,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20759 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@switchInstruction.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__switchInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_switchInstruction * operand_20952,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20952 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@typeMethodInstruction.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__typeMethodInstruction__semanticAnalysis (C_Compiler &,
                                const cPtr_typeMethodInstruction * operand_21149,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21149 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclaration.semanticAnalysis'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclaration__semanticAnalysis> gDispatchTableForMethod__semanticDeclaration__semanticAnalysis ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclaration__semanticAnalysis (typeCategoryMethod__semanticDeclaration__semanticAnalysis inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclaration__semanticAnalysis.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclaration__semanticAnalysis
findCategoryMethod__semanticDeclaration__semanticAnalysis (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__semanticDeclaration__semanticAnalysis result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclaration__semanticAnalysis.count ()) {
    result = gDispatchTableForMethod__semanticDeclaration__semanticAnalysis (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclaration__semanticAnalysis (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclaration__semanticAnalysis.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@mapDeclaration.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_mapDeclaration * operand_21833,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21833 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@mapindexDeclaration.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapindexDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_mapindexDeclaration * operand_22028,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22028 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@enumDeclaration.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_enumDeclaration * operand_22219,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22219 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@filewrapperDeclaration.semanticAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclaration__semanticAnalysis (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclaration * operand_22417,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22417 != NULL) {
    inLexique.printMessage (GGS_string ("@filewrapperDeclaration.semanticAnalysis [in semanticCompilation.gSemantics]\n") COMMA_SOURCE_FILE_AT_LINE (620)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@sortedListDeclaration.semanticAnalysis'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_sortedListDeclaration * operand_22707,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22707 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@structDeclaration.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_structDeclaration * operand_22900,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22900 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@listDeclaration.semanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_listDeclaration * operand_23091,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23091 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@classDeclaration.semanticAnalysis'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_classDeclaration * operand_23283,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23283 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@externRoutineDeclaration.semanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_externRoutineDeclaration * operand_23483,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23483 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@routineDeclaration.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__routineDeclaration__semanticAnalysis (C_Compiler & inLexique,
                                const cPtr_routineDeclaration * operand_23677,
                                const GGS_semanticContext  var_cas_inSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23677 != NULL) {
    {
      GGS_semanticInstructionList::cEnumerator enumerator_23752 (operand_23677->mRoutineInstructionList, true) ;
      const GGS_semanticInstructionList::cElement * operand_23752 = NULL ;
      while (((operand_23752 = enumerator_23752.nextObject ()))) {
        macroValidPointer (operand_23752) ;
        const GGS_semanticInstruction  temp_23790 = operand_23752->mInstruction ;
        if (temp_23790.isBuilt ()) {
          typeCategoryMethod__semanticInstruction__semanticAnalysis method = findCategoryMethod__semanticInstruction__semanticAnalysis (temp_23790.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_23790 (HERE), var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (664)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@externFunctionDeclaration.semanticAnalysis'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_externFunctionDeclaration * operand_23981,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23981 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@functionDeclaration.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionDeclaration__semanticAnalysis (C_Compiler & inLexique,
                                const cPtr_functionDeclaration * operand_24176,
                                const GGS_semanticContext  var_cas_inSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24176 != NULL) {
    {
      GGS_semanticInstructionList::cEnumerator enumerator_24252 (operand_24176->mFunctionInstructionList, true) ;
      const GGS_semanticInstructionList::cElement * operand_24252 = NULL ;
      while (((operand_24252 = enumerator_24252.nextObject ()))) {
        macroValidPointer (operand_24252) ;
        const GGS_semanticInstruction  temp_24290 = operand_24252->mInstruction ;
        if (temp_24290.isBuilt ()) {
          typeCategoryMethod__semanticInstruction__semanticAnalysis method = findCategoryMethod__semanticInstruction__semanticAnalysis (temp_24290.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, temp_24290 (HERE), var_cas_inSemanticContext COMMA_SOURCE_FILE_AT_LINE (681)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@onceFunctionDeclaration.semanticAnalysis'         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_onceFunctionDeclaration * operand_24479,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24479 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@listmapDeclaration.semanticAnalysis'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclaration__semanticAnalysis (C_Compiler &,
                                const cPtr_listmapDeclaration * operand_24673,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24673 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "parseSemanticComponent"             *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_parseSemanticComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticsComponentRoot  & var_cas_outSemanticsComponentRoot COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_parseSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  GGS_lstring  var_cas_basenameKey = GGS_lstring ::constructor_new (inLexique, var_cas_basename, GGS_location (inLexique) COMMA_HERE) ;
  const GGS_bool cond_25630 = var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (712)).reader_hasKey (var_cas_basename) ;
  if (cond_25630.isBuiltAndTrue ()) {
    const GGS_parsedSemanticsComponentMap  temp_25580 = var_cas_ioParsedComponentStruct.reader_mParsedSemanticsComponentMap (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) ;
    if (temp_25580.isBuilt ()) {
      temp_25580 (HERE)->method_searchKey (inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (713)) ;
    }
  }else if (cond_25630.isBuiltAndFalse ()) {
    const GGS_string _depExtension = GGS_string ("") ;
    const GGS_string _depPath = GGS_string ("") ;
    if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
      semanticsSLRgrammar::_performSourceFileParsing_ (inLexique,
                                    _depExtension.string (),
                                    _depPath.string (),
                                    NULL,
                                    var_cas_inSourceFile,
                                    var_cas_outSemanticsComponentRoot
                                    COMMA_SOURCE_FILE_AT_LINE (715)) ;
    }
    var_cas_ioParsedComponentStruct.mParsedSemanticsComponentMap.modifier_insertKey (inLexique, var_cas_basenameKey, var_cas_outSemanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (716)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_parseSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "recursivelyImportSemanticComponent"       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_recursivelyImportSemanticComponent (C_Compiler & inLexique,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct,
                                GGS_semanticDeclarationList  & var_cas_ioSemanticDeclarationList,
                                GGS_stringset  & var_cas_ioParsedFileSet,
                                const GGS_lstringlist   var_cas_inListOfFilesToParse,
                                const GGS_string  var_cas_inDirectory COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_recursivelyImportSemanticComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_lstringlist::cEnumerator enumerator_26200 (var_cas_inListOfFilesToParse, true) ;
    const GGS_lstringlist::cElement * operand_26200 = NULL ;
    while (((operand_26200 = enumerator_26200.nextObject ()))) {
      macroValidPointer (operand_26200) ;
      const GGS_bool cond_27129 = (var_cas_ioParsedFileSet.reader_hasKey (operand_26200->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (730)))).operator_not () ;
      if (cond_27129.isBuiltAndTrue ()) {
        var_cas_ioParsedFileSet.addAssign_operation (operand_26200->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (731))) ;
        GGS_string var_cas_extension = operand_26200->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (732)).reader_pathExtension () ;
        const GGS_bool cond_27116 = (var_cas_extension).operator_isEqual (GGS_string ("gSemantics")) ;
        if (cond_27116.isBuiltAndTrue ()) {
          GGS_lstring  var_cas_filePath = GGS_lstring ::constructor_new (inLexique, operand_26200->mValue.ggs_string ().reader_absolutePathFromPath (var_cas_inDirectory), operand_26200->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (736)) COMMA_HERE) ;
          GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
          ::routine_parseSemanticComponent (inLexique,  var_cas_filePath,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (739)) ;
          var_cas_ioSemanticDeclarationList = (var_cas_ioSemanticDeclarationList).operator_concat (var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (744)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (744))) ;
          ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_ioSemanticDeclarationList,  var_cas_ioParsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (749)),  var_cas_inDirectory COMMA_SOURCE_FILE_AT_LINE (745)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_recursivelyImportSemanticComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "compileSemanticsComponent"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_compileSemanticsComponent (C_Compiler & inLexique,
                                const GGS_lstring   var_cas_inSourceFile,
                                const GGS_string  /* var_cas_inOutputDirectory */,
                                GGS_parsedComponentStruct & var_cas_ioParsedComponentStruct COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_compileSemanticsComponent at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
  ::routine_parseSemanticComponent (inLexique,  var_cas_inSourceFile,  var_cas_ioParsedComponentStruct,  var_cas_semanticsComponentRoot COMMA_SOURCE_FILE_AT_LINE (766)) ;
  const GGS_string var_cas_basename = var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_lstring  var_cas_componentName = var_cas_semanticsComponentRoot.reader_mSemanticsComponentName (inLexique COMMA_SOURCE_FILE_AT_LINE (773)) ;
  const GGS_bool cond_28027 = (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (774))).operator_isNotEqual (var_cas_basename) ;
  if (cond_28027.isBuiltAndTrue ()) {
    var_cas_componentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, ((((GGS_string ("GALGAS checks "
      "the component name ('")).operator_concat (var_cas_componentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (776)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (778)) ;
  }
  GGS_semanticDeclarationList  var_cas_semanticDeclarationList = var_cas_semanticsComponentRoot.reader_mSemanticDeclarations (inLexique COMMA_SOURCE_FILE_AT_LINE (781)).reader_mSemanticDeclarationList (inLexique COMMA_SOURCE_FILE_AT_LINE (781)) ;
  GGS_stringset  var_cas_parsedFileSet = GGS_stringset ::constructor_setWithString (var_cas_inSourceFile.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (782))) ;
  ::routine_recursivelyImportSemanticComponent (inLexique,  var_cas_ioParsedComponentStruct,  var_cas_semanticDeclarationList,  var_cas_parsedFileSet,  var_cas_semanticsComponentRoot.reader_mImportedComponentFileNameList (inLexique COMMA_SOURCE_FILE_AT_LINE (787)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (783)) ;
  GGS_semanticContext var_cas_semanticContext ;
  ::routine_buildSemanticContext (inLexique,  var_cas_semanticDeclarationList,  var_cas_semanticsComponentRoot.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (792)),  var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (792)) ;
  const GGS_bool cond_28985 = (GGS_uint ::constructor_errorCount (inLexique COMMA_HERE)).operator_isEqual (GGS_uint (0U)) ;
  if (cond_28985.isBuiltAndTrue ()) {
    {
      GGS_typeMap::cEnumerator enumerator_28762 (var_cas_semanticContext.reader_mTypeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (795)), true) ;
      const GGS_typeMap::cElement * operand_28762 = NULL ;
      while (((operand_28762 = enumerator_28762.nextObject ()))) {
        macroValidPointer (operand_28762) ;
        GGS_constructorMap  var_cas_constructorMap = (findCategoryReader__ACGalgasType__constructorMap (operand_28762->mInfo.mType (HERE)->galgasRTTI ()) (inLexique, operand_28762->mInfo.mType.getPtr () COMMA_SOURCE_FILE_AT_LINE (796))) ;
        GGS_readerMap  var_cas_readerMap = (findCategoryReader__ACGalgasType__readerMap (operand_28762->mInfo.mType (HERE)->galgasRTTI ()) (inLexique, operand_28762->mInfo.mType.getPtr () COMMA_SOURCE_FILE_AT_LINE (797))) ;
        GGS_modifierMap  var_cas_modifierMap = (findCategoryReader__ACGalgasType__modifierMap (operand_28762->mInfo.mType (HERE)->galgasRTTI ()) (inLexique, operand_28762->mInfo.mType.getPtr () COMMA_SOURCE_FILE_AT_LINE (798))) ;
      }
    }
  }
  {
    GGS_semanticDeclarationList::cEnumerator enumerator_29055 (var_cas_semanticDeclarationList, true) ;
    const GGS_semanticDeclarationList::cElement * operand_29055 = NULL ;
    while (((operand_29055 = enumerator_29055.nextObject ()))) {
      macroValidPointer (operand_29055) ;
      const GGS_semanticDeclaration  temp_29101 = operand_29055->mSemanticDeclaration ;
      if (temp_29101.isBuilt ()) {
        typeCategoryMethod__semanticDeclaration__semanticAnalysis method = findCategoryMethod__semanticDeclaration__semanticAnalysis (temp_29101.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_29101 (HERE), var_cas_semanticContext COMMA_SOURCE_FILE_AT_LINE (803)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_compileSemanticsComponent\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticsCompilation (void) {
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__mapDeclaration__enterType, gClassInfoFor__mapDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__mapindexDeclaration__enterType, gClassInfoFor__mapindexDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__enumDeclaration__enterType, gClassInfoFor__enumDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__filewrapperDeclaration__enterType, gClassInfoFor__filewrapperDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__sortedListDeclaration__enterType, gClassInfoFor__sortedListDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__structDeclaration__enterType, gClassInfoFor__structDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__listDeclaration__enterType, gClassInfoFor__listDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__classDeclaration__enterType, gClassInfoFor__classDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__externRoutineDeclaration__enterType, gClassInfoFor__externRoutineDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__externFunctionDeclaration__enterType, gClassInfoFor__externFunctionDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__onceFunctionDeclaration__enterType, gClassInfoFor__onceFunctionDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__enterType ((typeCategoryMethod__semanticDeclaration__enterType) category_method__listmapDeclaration__enterType, gClassInfoFor__listmapDeclaration.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__localVariableDeclaration__semanticAnalysis, gClassInfoFor__localVariableDeclaration.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__localVariableDeclarationWithInitialization__semanticAnalysis, gClassInfoFor__localVariableDeclarationWithInitialization.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__localVariableDeclarationWithAssignment__semanticAnalysis, gClassInfoFor__localVariableDeclarationWithAssignment.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__localConstantDeclarationWithSourceExpression__semanticAnalysis, gClassInfoFor__localConstantDeclarationWithSourceExpression.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__localConstantDeclarationWithConstructorCall__semanticAnalysis, gClassInfoFor__localConstantDeclarationWithConstructorCall.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__assignmentInstruction__semanticAnalysis, gClassInfoFor__assignmentInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__appendInstruction__semanticAnalysis, gClassInfoFor__appendInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__sendInstruction__semanticAnalysis, gClassInfoFor__sendInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__foreachInstruction__semanticAnalysis, gClassInfoFor__foreachInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__ifInstruction__semanticAnalysis, gClassInfoFor__ifInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__methodCallInstruction__semanticAnalysis, gClassInfoFor__methodCallInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__modifierCallInstruction__semanticAnalysis, gClassInfoFor__modifierCallInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__errorInstruction__semanticAnalysis, gClassInfoFor__errorInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__warningInstruction__semanticAnalysis, gClassInfoFor__warningInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__routineCallInstruction__semanticAnalysis, gClassInfoFor__routineCallInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__matchInstruction__semanticAnalysis, gClassInfoFor__matchInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__castInstruction__semanticAnalysis, gClassInfoFor__castInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__addInstruction__semanticAnalysis, gClassInfoFor__addInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__removeInstruction__semanticAnalysis, gClassInfoFor__removeInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__incrementInstruction__semanticAnalysis, gClassInfoFor__incrementInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__decrementInstruction__semanticAnalysis, gClassInfoFor__decrementInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__loopInstruction__semanticAnalysis, gClassInfoFor__loopInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__messageInstruction__semanticAnalysis, gClassInfoFor__messageInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__logInstruction__semanticAnalysis, gClassInfoFor__logInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__grammarInstruction__semanticAnalysis, gClassInfoFor__grammarInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__withInstruction__semanticAnalysis, gClassInfoFor__withInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__switchInstruction__semanticAnalysis, gClassInfoFor__switchInstruction.slotID ()) ;
 enterCategoryMethod__semanticInstruction__semanticAnalysis ((typeCategoryMethod__semanticInstruction__semanticAnalysis) category_method__typeMethodInstruction__semanticAnalysis, gClassInfoFor__typeMethodInstruction.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__mapDeclaration__semanticAnalysis, gClassInfoFor__mapDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__mapindexDeclaration__semanticAnalysis, gClassInfoFor__mapindexDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__enumDeclaration__semanticAnalysis, gClassInfoFor__enumDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__filewrapperDeclaration__semanticAnalysis, gClassInfoFor__filewrapperDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__sortedListDeclaration__semanticAnalysis, gClassInfoFor__sortedListDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__structDeclaration__semanticAnalysis, gClassInfoFor__structDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__listDeclaration__semanticAnalysis, gClassInfoFor__listDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__classDeclaration__semanticAnalysis, gClassInfoFor__classDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__externRoutineDeclaration__semanticAnalysis, gClassInfoFor__externRoutineDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__routineDeclaration__semanticAnalysis, gClassInfoFor__routineDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__externFunctionDeclaration__semanticAnalysis, gClassInfoFor__externFunctionDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__functionDeclaration__semanticAnalysis, gClassInfoFor__functionDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__onceFunctionDeclaration__semanticAnalysis, gClassInfoFor__onceFunctionDeclaration.slotID ()) ;
 enterCategoryMethod__semanticDeclaration__semanticAnalysis ((typeCategoryMethod__semanticDeclaration__semanticAnalysis) category_method__listmapDeclaration__semanticAnalysis, gClassInfoFor__listmapDeclaration.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticsCompilation (prologueRoutineFor_semanticsCompilation,
                                   NULL) ;

//---------------------------------------------------------------------------*

