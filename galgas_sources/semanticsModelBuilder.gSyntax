#---------------------------------------------------------------------------*
#                                                                           *
#  'syntax' component parser, as model builder                              *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticsModelBuilder :
import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;
import semantics instructionMetamodel in "instructionMetamodel.gSemantics" ;
import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <semantics_component_start_symbol>
  !@semanticsComponentRoot outSemanticsComponentRoot
;

nonterminal <formal_parameter_list> !@formalParameterList outFormalParameterList ;

nonterminal <actual_parameter_list> !@actualParameterList outActualParameterList ;

nonterminal <semantic_instruction_list> !@semanticInstructionList outInstructionsList ;

nonterminal <semantic_instruction> !@semanticInstruction outInstruction ;

nonterminal <output_expression_list> !@outExpressionList outExpressionList ;

nonterminal <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
;

nonterminal <formal_input_parameter_list> !@formalInputParameterList outFormalInputParameterList ;

#---------------------------------------------------------------------------*

nonterminal <obsolete_declaration> ;

rule <semantics_component_start_symbol>
  !@semanticsComponentRoot outSemanticsComponentRoot
:
  $semantics$ ;
#--- Semantics Component Name
  $identifier$ ? @lstring mSemanticsComponentName ;
  $:$ ;
#--- Loop on import and semantics declarations
  @lstringlist mImportedComponentFileNameList [emptyList] ;
  @semanticDeclarationStruct mSemanticDeclarations [new
    ![@semanticDeclarationList emptyList]
    ![@abstractCategoryMethodListMap emptyMap]
    ![@categoryMethodListMap emptyMap]
    ![@overridingCategoryMethodListMap emptyMap]
  ] ;
  repeat
  while
    $import$ ;
    select
      $literal_string$ ? @lstring importedComponentFileName ;
      mImportedComponentFileNameList += !importedComponentFileName ;
    or
      $semantics$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $grammar$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $option$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    end select ;
    $;$ ;
  while
    <semantic_declaration> !?mSemanticDeclarations ;
  while
    <obsolete_declaration> ;
  end repeat ;
#--- end
  $end$ ;
  @location endOfSourceFile := here ;
  $semantics$ ;
  $;$ ;
  outSemanticsComponentRoot := [@semanticsComponentRoot new
    !mSemanticsComponentName
    !mImportedComponentFileNameList
    !mSemanticDeclarations
    !endOfSourceFile
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A T T R I B U T E    I N    C O L L E C T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <attribute_declaration> ?!@attributeInCollectionList ioAttributeInCollectionList ;

#---------------------------------------------------------------------------*

rule <attribute_declaration> ?!@attributeInCollectionList ioAttributeInCollectionList :
  $type_name$ ? @lstring mAttributeTypeName ;
  $identifier$ ? @lstring mAttributeName ;
  @lstringlist featureList [emptyList] ;
  select
  or
    $feature$ ;
    repeat
      $identifier$ ? @lstring featureName ;
      featureList += !featureName ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $;$ ;
  ioAttributeInCollectionList += !mAttributeTypeName !mAttributeName !featureList ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T M A P    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $listmap$ ;
#--- Map type name
  $type_name$ ? @lstring mListmapTypeName ;
  $($ ;
  $type_name$ ? @lstring mAssociatedListTypeName ;
  $)$ ;
  $;$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@listmapDeclaration new
    !mListmapTypeName
    !mAssociatedListTypeName
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $map$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <map_method_declaration> ?!@mapMethodList ioMapMethodList ;

#---------------------------------------------------------------------------*

rule <map_method_declaration> ?!@mapMethodList ioMapMethodList :
  $identifier$ ? @lstring mMethodName ;
  $error$ ;
  $message$ ;
  $literal_string$ ? @lstring mErrorMessage ;
  @lstring mShadowErrorMessage ;
  select
    mShadowErrorMessage := [@lstring new !"" !here] ;
  or
    $,$ ;
    $literal_string$ ? mShadowErrorMessage ;
  end select ;
  $;$ ;
  ioMapMethodList +=
    !mMethodName
    !mErrorMessage
    !mShadowErrorMessage
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $map$ ;
#--- Map type name
  $type_name$ ? @lstring mMapTypeName ;
#--- Enum type name
  @lstring mAssociatedEnumTypeName ; # Empty if no associated enum type
  @lstring mAssociatedTerminaisonMethodName ; # Empty if no associated enum type
  select
    mAssociatedEnumTypeName := [@lstring new !"" !here] ;
    mAssociatedTerminaisonMethodName := [@lstring new !"" !here] ;
  or
    $($ ;
    $type_name$ ? mAssociatedEnumTypeName ;
    $:$ ;
    $identifier$ ? mAssociatedTerminaisonMethodName ;
    $)$ ;
  end select ;
#--- Map properties
  ${$ ;
  @attributeInCollectionList mAttributeList [emptyList] ;
  @mapMethodList mInsertMethodList [emptyList] ;
  @mapMethodList mSearchMethodList [emptyList] ;
  @mapMethodList mRemoveMethodList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  while
    $insert$ ;
    <map_method_declaration> !? mInsertMethodList ;
  while
    $search$ ;
    <map_method_declaration> !? mSearchMethodList ;
  while
    $remove$ ;
    <map_method_declaration> !? mRemoveMethodList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@mapDeclaration new
    !mMapTypeName
    !mAssociatedEnumTypeName
    !mAssociatedTerminaisonMethodName
    !mAttributeList
    !mInsertMethodList
    !mSearchMethodList
    !mRemoveMethodList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $mapindex$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $mapindex$ ;
  $type_name$ ?@lstring mMapIndexName ;
  $($ ;
  $type_name$ ? @lstring mMapTypeName ;
  $)$ ;
  ${$ ;
  $search$ ;
  $identifier$ ? @lstring mSearchMethodName ;
  $error$ ;
  $message$ ;
  $literal_string$ ? @lstring mSearchMethodErrorMessage ;
  $;$ ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@mapindexDeclaration new
    !mMapIndexName
    !mMapTypeName
    !mSearchMethodName
    !mSearchMethodErrorMessage
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $map$ ;
  $type_name$ ?* ;
  $class$ ;
  $identifier$ ?* ;
  $;$ ;
  repeat
  while
    $insert$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $search$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $type_name$ ?* ;
    $identifier$ ?* ;
    $;$ ;
  while
    $block$ ;
    $identifier$ ?* ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $;$ ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_message_declaration> ?!@classMessageDefinitionList ioClassMessageDefinitionList ;

#---------------------------------------------------------------------------*

rule <class_message_declaration> ?!@classMessageDefinitionList ioClassMessageDefinitionList :
  $message$ ;
  $identifier$ ? @lstring mMessageName ;
  $literal_string$ ? @lstring mMessageValue ;
  $;$ ;
  ioClassMessageDefinitionList += !mMessageName !mMessageValue ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_abstract_method_declaration>
  ?!@abstractMethodDefinitionList ioAbstractMethodDefinitionList
;

#---------------------------------------------------------------------------*

rule <class_abstract_method_declaration>
  ?!@abstractMethodDefinitionList ioAbstractMethodDefinitionList
:
  $abstract$ ;
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mSignature ;
  <formal_parameter_list> ? mSignature ;
  $;$ ;
  ioAbstractMethodDefinitionList += !mMethodName !mSignature ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_overriden_method_declaration>
  ?!@overridenMethodDefinitionList ioOverridenMethodDefinitionList
;

#---------------------------------------------------------------------------*

rule <class_overriden_method_declaration>
  ?!@overridenMethodDefinitionList ioOverridenMethodDefinitionList
:
  $override$ ;
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mSignature ;
  <formal_parameter_list> ? mSignature ;
  $:$ ;
  @semanticInstructionList mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioOverridenMethodDefinitionList +=
    !mMethodName
    !mSignature
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_method_declaration> ?!@methodDefinitionList ioMethodDefinitionList ;

#---------------------------------------------------------------------------*

rule <class_method_declaration> ?!@methodDefinitionList ioMethodDefinitionList :
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mSignature ;
  <formal_parameter_list> ? mSignature ;
  $:$ ;
  @semanticInstructionList mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioMethodDefinitionList +=
    !mMethodName
    !mSignature
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <lazy_attribute_declaration> ?!@lazyAttributeList ioLazyAttributeList ;

#---------------------------------------------------------------------------*

rule <lazy_attribute_declaration> ?!@lazyAttributeList ioLazyAttributeList :
  $lazy$ ;
  @attributeInCollectionList attributeTypeAndNameList [emptyList] ;
  repeat
    $type_name$ ?@lstring  attributeTypeName ;
    $identifier$ ? @lstring attributeName ;
    attributeTypeAndNameList += !attributeTypeName !attributeName ![@lstringlist emptyList] ;
  while
  end repeat ;
  $:$ ;
  @semanticInstructionList mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $lazy$ ;
  $;$ ;
  ioLazyAttributeList +=
    !here
    !attributeTypeAndNameList
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  @bool mIsAbstract ;
  select
    mIsAbstract := false ;
  or
    $abstract$ ;
    mIsAbstract := true ;
  end select ;
  $class$ ;
  $type_name$ ?@lstring mClassTypeName ;
  @lstring mSuperClassName ; # Empty if no super class
  select
    mSuperClassName := [@lstring new !"" !here] ;
  or
    $extends$ ;
    $type_name$ ? mSuperClassName ;
  end select ;
  ${$ ;
  @string mClassMessage := "" ;
#--- Class properties
  @attributeInCollectionList mAttributeList [emptyList] ;
  @abstractMethodDefinitionList mAbstractMethodList [emptyList] ;
  @overridenMethodDefinitionList mOverridenMethodList [emptyList] ;
  @methodDefinitionList mMethodList [emptyList] ;
  @classMessageDefinitionList mMessageList [emptyList] ;
  @lazyAttributeList mLazyAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  while
    <class_abstract_method_declaration> !? mAbstractMethodList ;
  while
    <class_overriden_method_declaration> !? mOverridenMethodList ;
  while
    <class_method_declaration> !? mMethodList ;
  while
    <class_message_declaration> !? mMessageList ;
  while
    <lazy_attribute_declaration> !? mLazyAttributeList ;
  while
    $message$ ;
    if [mClassMessage length] > 0 then
      error here: "the class message is already defined" ;
    end if ;
    @lstring classMessage ;
    $literal_string$ ? classMessage ;
    if [classMessage length] == 0 then
      error classMessage: "the class message string should be not empty" ;
    end if ;
    mClassMessage := [classMessage string] ;
    $;$ ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@classDeclaration new
    !mIsAbstract
    !mClassTypeName
    !mSuperClassName # Empty if no super class
    !mAttributeList
    !mAbstractMethodList
    !mOverridenMethodList
    !mMethodList
    !mMessageList
    !mLazyAttributeList
    !mClassMessage
  ] ;
end rule ;


#---------------------------------------------------------------------------*
#                                                                           *
#    S T R U C T    D E C L A R A T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $struct$ ;
  $type_name$ ?@lstring mListTypeName ;
  ${$ ;
  @attributeInCollectionList mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@structDeclaration new
    !mListTypeName
    !mAttributeList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $list$ ;
  $type_name$ ?@lstring mListTypeName ;
  ${$ ;
  @attributeInCollectionList mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@listDeclaration new
    !mListTypeName
    !mAttributeList
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $list$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $sortedlist$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorList ioSortedListSortDescriptorList ;

#---------------------------------------------------------------------------*

rule <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorList ioSortedListSortDescriptorList :
  $identifier$ ? @lstring mSortedAttributeName ;
  @bool mAscending ;
  select
    $<$ ;
    mAscending := true ;
  or
    $>$ ;
    mAscending := false ;
  end select ;
  ioSortedListSortDescriptorList += !mSortedAttributeName !mAscending ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $sortedlist$ ;
  $type_name$ ?@lstring mSortedListTypeName ;
  ${$ ;
  @attributeInCollectionList mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ${$ ;
  @sortedListSortDescriptorList mSortDescriptorList[emptyList] ;
  repeat
    <sortedlist_sort_descriptor> !? mSortDescriptorList ;
  while
    $,$ ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@sortedListDeclaration new
    !mSortedListTypeName
    !mAttributeList
    !mSortDescriptorList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <enum_message_declaration> ?!@enumMessageList ioEnumMessageList ;

#---------------------------------------------------------------------------*

rule <enum_message_declaration> ?!@enumMessageList ioEnumMessageList :
  $reader$ ;
  $identifier$ ?@lstring mEnumMessageName ;
  $:$ ;
  @enumMessageAssociationList mMessageAssociationList [emptyList] ;
  repeat
    $identifier$ ? @lstring mConstantName ;
    $->$ ;
    $literal_string$ ? @lstring mMessage ;
    $;$ ;
    mMessageAssociationList += !mConstantName !mMessage ;
  while
  end repeat ;
  $end$ ;
  $reader$ ;
  $;$ ;
  ioEnumMessageList +=
    !mEnumMessageName
    !mMessageAssociationList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <enum_case_message> !@enumCaseMessage outCaseMessage ;

#---------------------------------------------------------------------------*

rule <enum_case_message> !@enumCaseMessage outCaseMessage :
  select
    outCaseMessage := [@enumCaseMessage new] ;
  or
    $error$ ;
    $identifier$ ? @lstring mLocationParameterName ;
    $:$ ;
    $literal_string$ ? @lstring mMessage ;
    outCaseMessage := [@enumCaseErrorMessage new !mLocationParameterName !mMessage] ;
  or
    $warning$ ;
    $identifier$ ? @lstring mLocationParameterName ;
    $:$ ;
    $literal_string$ ?@lstring mMessage ;
    outCaseMessage := [@enumCaseWarningMessage new !mLocationParameterName !mMessage] ;
  end select ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <enum_modifier> ?!@enumModifierList ioEnumModifierList ;

#---------------------------------------------------------------------------*

rule <enum_modifier> ?!@enumModifierList ioEnumModifierList :
  $modifier$ ;
  $identifier$ ? @lstring mModifierName ;
  $??$ ;
  $type_name$ ? @lstring typeName ;
  if [typeName string] != "location" then
    error typeName: "only '@location' type is allowed here" ;
  end if ;
  $identifier$ ? @lstring mLocationFormalArgumentName ;
  ${$ ;
  @enumModifierCaseList mEnumModifierCaseList [emptyList] ;
  repeat
    $identifier$ ? @lstring mSourceConstantName ;
    $->$ ;
    $identifier$ ?@lstring mTargetConstantName ;
    @enumCaseMessage mEnumModifierCaseMessage ;
    <enum_case_message> ? mEnumModifierCaseMessage ;
    $;$ ;
    mEnumModifierCaseList += !mSourceConstantName !mTargetConstantName !mEnumModifierCaseMessage ;
  while
  end repeat ;
  $}$ ;
  ioEnumModifierList +=
    !mModifierName
    !mLocationFormalArgumentName
    !mEnumModifierCaseList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <enum_method> ?!@enumMethodList ioEnumMethodList ;

#---------------------------------------------------------------------------*

rule <enum_method> ?!@enumMethodList ioEnumMethodList :
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  $??$ ;
  $type_name$ ? @lstring typeName ;
  if [typeName string] != "location" then
    error typeName: "only '@location' type is allowed here" ;
  end if ;
  $identifier$ ? @lstring mLocationFormalArgumentName ;
  ${$ ;
  @enumMethodCaseList mEnumMethodCaseList [emptyList] ;
  repeat
    $identifier$ ? @lstring mConstantName ;
    @enumCaseMessage caseMessage ;
    <enum_case_message> ? caseMessage ;
    $;$ ;
    mEnumMethodCaseList += !mConstantName !caseMessage ;
  while
  end repeat ;
  $}$ ;
  ioEnumMethodList +=
    !mMethodName
    !mLocationFormalArgumentName
    !mEnumMethodCaseList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <enum_operator> ?!@enumOperatorList ioEnumOperatorList ;

#---------------------------------------------------------------------------*

rule <enum_operator> ?!@enumOperatorList ioEnumOperatorList :
  $operator$ ;
  $identifier$ ? @lstring mOperatorName ;
  $??$ ;
  $type_name$ ? @lstring typeName ;
  if [typeName string] != "location" then
    error typeName: "only '@location' type is allowed here" ;
  end if ;
  $identifier$ ? @lstring mLocationFormalArgumentName ;
  ${$ ;
  @enumOperatorCaseList mEnumOperatorCaseList [emptyList] ;
  repeat
    $identifier$ ? @lstring mLeftConstantName ;
    $,$ ;
    $identifier$ ? @lstring mRightConstantName ;
    $->$ ;
    $identifier$ ? @lstring mResultConstantName ;
    @enumCaseMessage caseMessage ;
    <enum_case_message> ? caseMessage ;
    $;$ ;
    mEnumOperatorCaseList +=
     !mLeftConstantName
     !mRightConstantName
     !mResultConstantName
     !caseMessage
    ;
  while
  end repeat ;
  $}$ ;
  ioEnumOperatorList +=
    !mOperatorName
    !mLocationFormalArgumentName
    !mEnumOperatorCaseList
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $enum$ ;
  $type_name$ ? @lstring mEnumTypeName ;
  ${$ ;
  @lstringlist mConstructorConstantList [emptyList] ;
  @lstringlist mConstantList [emptyList] ;
  repeat
    select
      repeat
        @lstring constantName ;
        $identifier$ ? constantName ;
        mConstantList += !constantName ;
      while
       $,$ ;
      end repeat ;
    or
      $constructor$ ;
      repeat
        @lstring constantName ;
        $identifier$ ? constantName ;
        mConstructorConstantList += !constantName ;
      while
       $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  while
  end repeat ;
  $}$ ;
  ${$ ;
  @enumMessageList mEnumMessageList [emptyList] ;
  @enumModifierList mEnumModifierList [emptyList] ;
  @enumMethodList mEnumMethodList [emptyList] ;
  @enumOperatorList mEnumOperatorList [emptyList] ;
  repeat
  while
    <enum_message_declaration> !? mEnumMessageList ;
  while
    <enum_modifier> !? mEnumModifierList ;
  while
    <enum_method> !? mEnumMethodList ;
  while
    <enum_operator> !? mEnumOperatorList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@enumDeclaration new
    !mEnumTypeName
    !mConstructorConstantList
    !mConstantList
    !mEnumMessageList
    !mEnumModifierList
    !mEnumMethodList
    !mEnumOperatorList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    F I L E W R A P P E R    D E C L A R A T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $filewrapper$ ;
  $identifier$ ? @lstring mFilewrapperName ;
  $in$ ;
  $literal_string$ ? @lstring mFilewrapperPath ;
  ${$ ;
  @lstringlist mFilewrapperExtensionList [emptyList] ;
  select
  or
    repeat
      @lstring extension ;
      $literal_string$ ? extension ;
      mFilewrapperExtensionList += !extension ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $}$ ;
  ${$ ;
  @filewrapperTemplateList mFilewrapperTemplateList [emptyList] ;
  repeat
  while
    $template$ ;
    $identifier$ ? @lstring mFilewrapperTemplateName ;
    $literal_string$ ? @lstring mFilewrapperTemplatePath ;
    @formalInputParameterList mFilewrapperTemplateFormalInputParameters ;
    <formal_input_parameter_list> ? mFilewrapperTemplateFormalInputParameters ;
    $;$ ;
    mFilewrapperTemplateList +=
      !mFilewrapperTemplateName
      !mFilewrapperTemplatePath
      !mFilewrapperTemplateFormalInputParameters
    ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@filewrapperDeclaration new
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !mFilewrapperTemplateList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#A B S T R A C T    C A T E G O R Y    M E T H O D    D E C L A R A T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $abstract$ ;
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $;$ ;
  ioSemanticDeclarations.mAbstractCategoryMethodListMap += ![mClassName string] !mMethodName !mFormalParameterList ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M E T H O D    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $:$ ;
  @semanticInstructionList mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioSemanticDeclarations.mCategoryMethodListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalParameterList
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#O V E R R I D I N G   C A T E G O R Y   M E T H O D   D E C L A R A T I O N*
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
:
  $override$ ;
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterList mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $:$ ;
  @semanticInstructionList mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioSemanticDeclarations.mOverridingCategoryMethodListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalParameterList
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;