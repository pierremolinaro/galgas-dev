#---------------------------------------------------------------------------*
#                                                                           *
#  'syntax' component parser, as model builder                              *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticsModelBuilder :
with "galgas_scanner.gLexique" ;

import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;
import semantics instructionMetamodel in "instructionMetamodel.gSemantics" ;
import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <semantics_component_start_symbol>
  !@semanticsComponentRoot outSemanticsComponentRoot
;

nonterminal <semantic_declaration>
 ?!@semanticDeclarationStruct ioSemanticDeclarations
;

nonterminal <obsolete_declaration> ;

#---------------------------------------------------------------------------*

rule <semantics_component_start_symbol>
  !@semanticsComponentRoot outSemanticsComponentRoot
:
  $semantics$ ;
#--- Semantics Component Name
  $identifier$ ? @lstring mSemanticsComponentName ;
  $:$ ;
#--- Loop on import and semantics declarations
  @lstringlist mImportedComponentFileNameList [emptyList] ;
  @semanticDeclarationStruct mSemanticDeclarations [new
    ![@semanticDeclarationList emptyList]
    ![@abstractCategoryMethodListMap emptyMap]
    ![@categoryMethodListMap emptyMap]
    ![@overridingCategoryMethodListMap emptyMap]
    ![@abstractCategoryReaderListMap emptyMap]
    ![@categoryReaderListMap emptyMap]
    ![@overridingCategoryReaderListMap emptyMap]
  ] ;
  repeat
  while
    $import$ ;
    select
      $literal_string$ ? @lstring importedComponentFileName ;
      mImportedComponentFileNameList += !importedComponentFileName ;
    or
      $semantics$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $grammar$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $option$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    end select ;
    $;$ ;
  while
    <semantic_declaration> !?mSemanticDeclarations ;
  while
    <obsolete_declaration> ;
  end repeat ;
#--- end
  $end$ ;
  @location endOfSourceFile := here ;
  $semantics$ ;
  $;$ ;
  outSemanticsComponentRoot := [@semanticsComponentRoot new
    !mSemanticsComponentName
    !mImportedComponentFileNameList
    !mSemanticDeclarations
    !endOfSourceFile
  ] ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;