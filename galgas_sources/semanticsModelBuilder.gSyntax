#---------------------------------------------------------------------------*
#                                                                           *
#  'syntax' component parser, as model builder                              *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticsModelBuilder :
import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import metamodel expressionMetamodel in "expressionMetamodel.gMetamodel" ;
import metamodel parameterArgumentMetamodel in "parameterArgumentMetamodel.gMetamodel" ;
import metamodel instructionMetamodel in "instructionMetamodel.gMetamodel" ;
import metamodel semanticsMetamodel in "semanticsMetamodel.gMetamodel" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;

#---------------------------------------------------------------------------*

nonterminal <semantics_component_start_symbol> !@location outEndOfSourceFile -> @semanticsComponentRoot ;

nonterminal <semantic_declaration> -> @semanticDeclaration ;

nonterminal <attribute_declaration> -> @attributeInCollection ;

nonterminal <map_method_declaration> -> @mapMethod ;

nonterminal <class_abstract_method_declaration> -> @abstractMethodDefinition ;

nonterminal <class_method_declaration> -> @methodDefinition ;

nonterminal <class_overriden_method_declaration> -> @overridenMethodDefinition ;

nonterminal <class_message_declaration> -> @classMessageDefinition ;

nonterminal <formal_parameter_list> -> @formalParameters ;

nonterminal <enum_message_declaration> -> @enumMessage ;

nonterminal <enum_message_association> -> @enumMessageAssociation ;

nonterminal <semantic_instruction_list> -> @semanticInstructions ;

nonterminal <sortedlist_sort_descriptor> -> @sortedListSortDescriptor ;

nonterminal <obsolete_declaration> ;

#---------------------------------------------------------------------------*

rule <semantics_component_start_symbol> !@location outEndOfSourceFile -> @semanticsComponentRoot :
  $semantics$ ;
#--- Semantics Component Name
  $identifier$ ? mSemanticsComponentName ;
#--- Imported semantics components
  mImportedSemanticsComponentSet := [@stringset emptySet] ;
  select
  or
    $extends$ ;
    repeat
      @lstring importedSemanticsComponentName ;
      $identifier$ ? importedSemanticsComponentName ;
      if [mImportedSemanticsComponentSet hasKey ![importedSemanticsComponentName string]] then
        warning importedSemanticsComponentName: "this component is already named" ;
      end if ;
      mImportedSemanticsComponentSet += ![importedSemanticsComponentName string] ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $:$ ;
#--- Loop on import and semantics declarations
  mImportedComponentFileNameList := [@lstringlist emptyList] ;
  repeat
  while
    $import$ ;
    select
      @lstring importedComponentFileName ;
      $literal_string$ ? importedComponentFileName ;
      mImportedComponentFileNameList += !importedComponentFileName ;
    or
      $semantics$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $metamodel$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $treewalking$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $grammar$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    end select ;
    $;$ ;
  while
    <semantic_declaration> +> mSemanticDeclarationList ;
  while
    <obsolete_declaration> ;
  end repeat ;
#--- end
  $end$ ;
  outEndOfSourceFile := here ;
  $semantics$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A T T R I B U T E    I N    C O L L E C T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

rule <attribute_declaration> -> @attributeInCollection :
  $type_name$ ? mAttributeTypeName ;
  $identifier$ ? mAttributeName ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @mapDeclaration :
  $map$ ;
#--- Map type name
  $type_name$ ? mMapTypeName ;
  ${$ ;
#--- Map properties
  repeat
  while
    <attribute_declaration> +> mAttributeList ;
  while
    $insert$ ;
    <map_method_declaration> +> mInsertMethodList ;
  while
    $search$ ;
    <map_method_declaration> +> mSearchMethodList ;
  while
    $remove$ ;
    <map_method_declaration> +> mRemoveMethodList ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <map_method_declaration> -> @mapMethod :
  $identifier$ ? mMethodName ;
  select
    mGetIDMethodName := [@lstring new !"" !here] ;
  or
    $,$ ;
    $identifier$ ? mGetIDMethodName ;
  end select ;
  $error$ ;
  $message$ ;
  $literal_string$ ? mErrorMessage ;
  select
    mShadowErrorMessage := [@lstring new !"" !here] ;
  or
    $,$ ;
    $literal_string$ ? mShadowErrorMessage ;
  end select ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $mapindex$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @mapindexDeclaration :
  $mapindex$ ;
  $type_name$ ? mMapIndexName ;
  $($ ;
  $type_name$ ? mMapTypeName ;
  $)$ ;
  ${$ ;
  $search$ ;
  $identifier$ ? mSearchMethodName ;
  $error$ ;
  $message$ ;
  $literal_string$ ? mSearchMethodErrorMessage ;
  $;$ ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @classDeclaration :
  select
    mIsAbstract := false ;
  or
    $abstract$ ;
    mIsAbstract := true ;
  end select ;
  $class$ ;
  $type_name$ ? mClassTypeName ;
  select
    mSuperClassName := [@lstring new !"" !here] ;
  or
    $extends$ ;
    $type_name$ ? mSuperClassName ;
  end select ;
  ${$ ;
  mClassMessage := "" ;
#--- Class properties
  repeat
  while
    <attribute_declaration> +> mAttributeList ;
  while
    <class_abstract_method_declaration> +> mAbstractMethodList ;
  while
    <class_overriden_method_declaration> +> mOverridenMethodList ;
  while
    <class_method_declaration> +> mMethodList ;
  while
    <class_message_declaration> +> mMessageList ;
  while
    $message$ ;
    if [mClassMessage length] > 0 then
      error here: "the class message is already defined" ;
    end if ;
    @lstring classMessage ;
    $literal_string$ ? classMessage ;
    if [classMessage length] == 0 then
      error classMessage: "the class message string should be not empty" ;
    end if ;
    mClassMessage := [classMessage string] ;
    $;$ ;
  end repeat ;
  $}$ ;
end rule ;


#---------------------------------------------------------------------------*

rule <class_message_declaration> -> @classMessageDefinition :
  $message$ ;
  $identifier$ ? mMessageName ;
  $literal_string$ ? mMessageValue ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <class_abstract_method_declaration> -> @abstractMethodDefinition :
  $abstract$ ;
  $method$ ;
  $identifier$ ? mMethodName ;
  <formal_parameter_list> -> mSignature ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <class_overriden_method_declaration> -> @overridenMethodDefinition :
  $override$ ;
  $method$ ;
  $identifier$ ? mMethodName ;
  <formal_parameter_list> -> mSignature ;
  $:$ ;
  <semantic_instruction_list> -> mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <class_method_declaration> -> @methodDefinition :
  $method$ ;
  $identifier$ ? mMethodName ;
  <formal_parameter_list> -> mSignature ;
  $:$ ;
  <semantic_instruction_list> -> mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $map$ ;
  $type_name$ ?* ;
  $class$ ;
  $identifier$ ?* ;
  $;$ ;
  repeat
  while
    $insert$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $search$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $type_name$ ?* ;
    $identifier$ ?* ;
    $;$ ;
  while
    $block$ ;
    $identifier$ ?* ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $;$ ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @listDeclaration :
  $list$ ;
  $type_name$ ? mListTypeName ;
  ${$ ;
  repeat
  while
    <attribute_declaration> +> mAttributeList ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $list$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

rule <sortedlist_sort_descriptor> -> @sortedListSortDescriptor :
  $identifier$ ? mSortedAttributeName ;
  select
    $<$ ;
    mAscending := true ;
  or
    $>$ ;
    mAscending := false ;
  end select ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @sortedListDeclaration :
  $sortedlist$ ;
  $type_name$ ? mSortedListTypeName ;
  ${$ ;
  repeat
  while
    <attribute_declaration> +> mAttributeList ;
  end repeat ;
  $}$ ;
  ${$ ;
  repeat
    <sortedlist_sort_descriptor> +> mSortDescriptorList ;
  while
    $,$ ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration> -> @enumDeclaration :
  $enum$ ;
  $type_name$ ? mEnumTypeName ;
  ${$ ;
  mConstantList := [@lstringlist emptyList] ;
  repeat
    @lstring constantName ;
    $identifier$ ? constantName ;
    mConstantList += !constantName ;
  while
    $,$ ;
  end repeat ;
  $}$ ;
  ${$ ;
  repeat
  while
    <enum_message_declaration> +> mEnumMessageList ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <enum_message_declaration> -> @enumMessage :
  $message$ ;
  $identifier$ ? mEnumMessageName ;
  $:$ ;
  repeat
    <enum_message_association> +> mMessageAssociationList ;
  while
  end repeat ;
  $end$ ;
  $message$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <enum_message_association> -> @enumMessageAssociation :
  $identifier$ ? mConstantName ;
  $->$ ;
  $literal_string$ ? mMessage ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;