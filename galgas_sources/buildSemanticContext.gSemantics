#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics buildSemanticContext :
  import "semanticsClassMethods.gSemantics" ;
  import "semanticsInstanceMethods.gSemantics" ;
  import "semanticsModifiers.gSemantics" ;
  import "semanticsReaders.gSemantics" ;
  import "semanticsConstructors.gSemantics" ;

  import semantics semanticsClassMethods in "semanticsClassMethods.gSemantics" ;
  import semantics semanticsInstanceMethods in "semanticsInstanceMethods.gSemantics" ;
  import semantics semanticsModifiers in "semanticsModifiers.gSemantics" ;
  import semantics semanticsReaders in "semanticsReaders.gSemantics" ;
  import semantics semanticsConstructors in "semanticsConstructors.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  A S T   C L A S S E S    F O R    P R E D E F I N E D   T Y P E S        *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @predefinedTypeAST extends @semanticDeclarationAST {
  @string mPredefinedTypeName ;
}

class @binarysetPredefinedTypeAST extends @predefinedTypeAST {}

class @boolPredefinedTypeAST extends @predefinedTypeAST {}

class @uintPredefinedTypeAST extends @predefinedTypeAST {}

class @uint64PredefinedTypeAST extends @predefinedTypeAST {}

class @sintPredefinedTypeAST extends @predefinedTypeAST {}

class @sint64PredefinedTypeAST extends @predefinedTypeAST {}

class @charPredefinedTypeAST extends @predefinedTypeAST {}

class @doublePredefinedTypeAST extends @predefinedTypeAST {}

class @stringPredefinedTypeAST extends @predefinedTypeAST {}

class @lboolPredefinedTypeAST extends @predefinedTypeAST {}

class @luintPredefinedTypeAST extends @predefinedTypeAST {}

class @luint64PredefinedTypeAST extends @predefinedTypeAST {}

class @lsintPredefinedTypeAST extends @predefinedTypeAST {}

class @lsint64PredefinedTypeAST extends @predefinedTypeAST {}

class @lcharPredefinedTypeAST extends @predefinedTypeAST {}

class @ldoublePredefinedTypeAST extends @predefinedTypeAST {}

class @lstringPredefinedTypeAST extends @predefinedTypeAST {}

class @locationPredefinedTypeAST extends @predefinedTypeAST {}

class @stringsetPredefinedTypeAST extends @predefinedTypeAST {}

class @objectPredefinedTypeAST extends @predefinedTypeAST {}

class @functionPredefinedTypeAST extends @predefinedTypeAST {}

class @typePredefinedTypeAST extends @predefinedTypeAST {}

#---------------------------------------------------------------------------*

routine appendPredefinedListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ??@string inElementTypeName
:
  @attributeInCollectionListAST attributeList [emptyList] ;
  attributeList +=
    ![@lstring new !inElementTypeName !here]
    ![@lstring new !"mValue" !here]
  ;
  ioDeclarationListASTs += ![@listDeclarationAST new
    ![@lstring new !inElementTypeName . "list" !here]
    !attributeList
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine appendPredefinedTypesASTs
  ?!@semanticDeclarationListAST ioDeclarationListASTs
:
  ioDeclarationListASTs += ![@boolPredefinedTypeAST new !"bool"] ;
  ioDeclarationListASTs += ![@uintPredefinedTypeAST new !"uint"] ;
  ioDeclarationListASTs += ![@uint64PredefinedTypeAST new !"uint64"] ;
  ioDeclarationListASTs += ![@sintPredefinedTypeAST new !"sint"] ;
  ioDeclarationListASTs += ![@sint64PredefinedTypeAST new !"sint64"] ;
  ioDeclarationListASTs += ![@charPredefinedTypeAST new !"char"] ;
  ioDeclarationListASTs += ![@doublePredefinedTypeAST new !"double"] ;
  ioDeclarationListASTs += ![@stringPredefinedTypeAST new !"string"] ;
  ioDeclarationListASTs += ![@lboolPredefinedTypeAST new !"lbool"] ;
  ioDeclarationListASTs += ![@luintPredefinedTypeAST new !"luint"] ;
  ioDeclarationListASTs += ![@luint64PredefinedTypeAST new !"luint64"] ;
  ioDeclarationListASTs += ![@lsintPredefinedTypeAST new !"lsint"] ;
  ioDeclarationListASTs += ![@lsint64PredefinedTypeAST new !"lsint64"] ;
  ioDeclarationListASTs += ![@lcharPredefinedTypeAST new !"lchar"] ;
  ioDeclarationListASTs += ![@ldoublePredefinedTypeAST new !"ldouble"] ;
  ioDeclarationListASTs += ![@lstringPredefinedTypeAST new !"lstring"] ;
  ioDeclarationListASTs += ![@locationPredefinedTypeAST new !"location"] ;
  ioDeclarationListASTs += ![@stringsetPredefinedTypeAST new !"stringset"] ;
  ioDeclarationListASTs += ![@objectPredefinedTypeAST new !"object"] ;
  ioDeclarationListASTs += ![@functionPredefinedTypeAST new !"function"] ;
  ioDeclarationListASTs += ![@typePredefinedTypeAST new !"type"] ;
  ioDeclarationListASTs += ![@binarysetPredefinedTypeAST new !"binaryset"] ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"uint" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"uint64" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"sint" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"sint64" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"object" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"function" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"string" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"lstring" ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @formalParameterSignature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @unifiedTypeMapIndexList mFunctionSignature ;
  @unifiedTypeMapIndex mResultTypeIndex ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @unifiedTypeMapIndexList mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D E S C E N D A N T    C L A S S    L I S T M A P                      *
#                                                                           *
#---------------------------------------------------------------------------*

listmap @descendantClassListMap (@unifiedTypeMapIndexList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @unifiedTypeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @descendantClassListMap mDescendantClassListMap ;
  @filewrapperMap mFilewrapperMap ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C O L L E C T    T Y P E S                                             *
#                                                                           *
#---------------------------------------------------------------------------*

map @collectedTypeMap {
  insert insertKey error message "the '%K' type has been already defined" ;
  search searchKey error message "the '%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapindex @collectedTypeMapIndex (@collectedTypeMap) ;

#---------------------------------------------------------------------------*

routine collectAttributeTypes
  ??@attributeInCollectionListAST inAttributeList
  ?!@collectedTypeMap ioCollectedTypeMap
:
  foreach inAttributeList do
    @collectedTypeMapIndex attributeTypeIndex ;
    [@collectedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioCollectedTypeMap ?attributeTypeIndex] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

method @semanticDeclarationAST collectType
  ?!@collectedTypeMap unused ioCollectedTypeMap
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey ![@lstring new !mPredefinedTypeName !here]] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mMapTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mMapIndexTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mEnumTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mSortedListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mStructTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mClassTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST collectType
  ?!@collectedTypeMap ioCollectedTypeMap
:
  [!?ioCollectedTypeMap insertKey !mListmapTypeName] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N T E R    T Y P E S                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterType
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @uintPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap [emptyMap];
  @readerMap readerMap  [emptyMap] ;
  constructorMapFor_uint !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_uint !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @uint64PredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_uint64 !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_uint64 !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sintPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_sint !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_sint !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sint64PredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_sint64 !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_sint64 !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @charPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_char !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_char !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @doublePredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @readerMap readerMap ;
  readerMapFor_double !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    ![@constructorMap emptyMap]
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_string !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_string !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_string !?ioSemanticContext.mTypeMap ?modifierMap ;
  instanceMethodMapFor_string !?ioSemanticContext.mTypeMap ?instanceMethodMap ;
  classMethodMapFor_string !?ioSemanticContext.mTypeMap ?classMethodMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @lboolPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_lbool !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_lbool !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_lbool !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @luintPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_luint !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_luint !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_luint !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @luint64PredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_luint64 !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_luint64 !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_luint64 !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @lsintPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_lsint !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_lsint !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_lsint !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @lsint64PredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_lsint64 !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_lsint64 !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_lsint64 !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @lcharPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_lchar !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_lchar !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_lchar !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @ldoublePredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_ldouble !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_ldouble !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_ldouble !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @lstringPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_lstring !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_lstring !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_lstring !?ioSemanticContext.mTypeMap ?modifierMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @locationPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @readerMap readerMap ;
  readerMapFor_location !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    ![@constructorMap emptyMap]
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_data !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_data !?ioSemanticContext.mTypeMap ?readerMap ;
  modifierMapFor_data !?ioSemanticContext.mTypeMap ?modifierMap ;
  instanceMethodMapFor_data !?ioSemanticContext.mTypeMap ?instanceMethodMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @objectPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @readerMap readerMap ;
  readerMapFor_object !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    ![@constructorMap emptyMap]
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @functionPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  constructorMapFor_function !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_function !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @typePredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Enter "type" builtin type
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_type !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_type !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @binarysetPredefinedTypeAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Enter "type" builtin type
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  constructorMapFor_binaryset !?ioSemanticContext.mTypeMap ?constructorMap ;
  readerMapFor_binaryset !?ioSemanticContext.mTypeMap ?readerMap ;
  [!?ioSemanticContext.mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum primitiveType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    ![@modifierMap emptyMap]
    ![@instanceMethodMap emptyMap]
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
#--- string type index
  @unifiedTypeMapIndex stringTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"string" !here] !?ioSemanticContext.mTypeMap ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapIndex lstringTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"lstring" !here] !?ioSemanticContext.mTypeMap ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapIndex currentMapTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mMapTypeName !?ioSemanticContext.mTypeMap ?currentMapTypeIndex] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext.mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
#--- Readers
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"count" !"uint" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        !insertMethodFormalArgumentList
        !true
      ] ;
    end if ;
  end foreach ;
#--- Handle remove modifiers
  foreach mRemoveMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as an insert modifier or a remove modifier" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        !removeMethodFormalArgumentList
        !true
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods
  foreach mSearchMethodList do
    [!?instanceMethodMap insertOrReplace
      !mMethodName
      !removeMethodFormalArgumentList
      !true
    ] ;
  end foreach ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@unifiedTypeMapIndexList listWithValue !stringTypeIndex]
      !true
      !attributeTypeIndex
      ![@readerQualifier isBasic]
      !""
    ] ;
  end foreach ;
#--- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const @lstring accessorName [new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      !accessorName
      !accessorFormalArgumentList
      !true
    ] ;
  end foreach ;
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mMapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum mapType]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Check associated map is really a map
  @typedAttributeList mapTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  [[ioSemanticContext mTypeMap] searchKey
    !mAssociatedMapTypeName
    ?2*
    ?typeKindEnum
    ?mapTypedAttributeList
    ?6*
  ] ;
  if typeKindEnum != [@typeKindEnum mapType] then
    error mAssociatedMapTypeName : "the @" . mAssociatedMapTypeName . " should be a map type" ;
    mapTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapIndex associatedMapTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mAssociatedMapTypeName !?ioSemanticContext.mTypeMap ?associatedMapTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapIndex lstringTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"lstring" !here] !?ioSemanticContext.mTypeMap ?lstringTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapIndex currentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"lstring" !here] !?ioSemanticContext.mTypeMap ?currentTypeIndex] ;
#--- Handle map type name
  @unifiedTypeMapIndex mapTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mMapIndexTypeName !?ioSemanticContext.mTypeMap ?mapTypeIndex] ;
#--- class method
  @formalParameterSignature argList [emptyList] ;
  argList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] ;
  argList += !currentTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  [!?classMethodMap insertOrReplace
    ![@lstring new !"makeRegularIndex" !here]
    !argList
    !false
  ] ;
#--- null constructor
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext.mTypeMap !"null" ![mMapIndexTypeName string] !false ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"isSolved" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"isNull" !"bool" !false ;
#--- Enter associated map attribute names as readers
  foreach mapTypedAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@unifiedTypeMapIndexList emptyList]
      !true
      !mAttributeTypeIndex
      ![@readerQualifier isBasic]
      !""
    ] ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mMapIndexTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum mapIndexType]
    !mapTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- currentType type index
  @unifiedTypeMapIndex currentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mEnumTypeName !?ioSemanticContext.mTypeMap ?currentTypeIndex] ;
#--- Constructors
  foreach mConstantList do
    enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext.mTypeMap ![mValue string] ![mEnumTypeName string] !false ;
  end foreach ;
#--- readers
  foreach mEnumMessageList do
    enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap ![mEnumMessageName string] !"string" !false ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mEnumTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum mapIndexType]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
  @filewrapperTemplateMap filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @unifiedTypeMapIndexList templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @unifiedTypeMapIndex parameterTypeIndex ;
      [@unifiedTypeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
      templateSignature += !parameterTypeIndex ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
  [!?ioSemanticContext.mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
  @unifiedTypeMapIndex uintType ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"uint" !here] !?ioSemanticContext.mTypeMap ?uintType] ;
#--- Element type index
  @unifiedTypeMapIndex listTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mSortedListTypeName !?ioSemanticContext.mTypeMap ?listTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapIndexList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    modifierFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext.mTypeMap !"emptySortedList" ![mSortedListTypeName string] !false ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"length" !"uint" !false ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popGreatest" !here]
    !modifierFormalArgumentList
    !true
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popSmallest" !here]
    !modifierFormalArgumentList
    !true
  ] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertOrReplace
    ![@lstring new !"greatest" !here]
    !modifierFormalArgumentList
    !true
  ] ;
  [!?instanceMethodMap insertOrReplace
    ![@lstring new !"smallest" !here]
    !modifierFormalArgumentList
    !true
  ] ;
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mSortedListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum sortedListType]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Struct type index
  @unifiedTypeMapIndex structTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mStructTypeName !?ioSemanticContext.mTypeMap ?structTypeIndex] ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  @unifiedTypeMapIndexList constructorAttributeTypeList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    typedAttributeList += !attributeTypeIndex !mAttributeTypeName ;
  end foreach ;
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !constructorAttributeTypeList
    !true
    !structTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !mAttributeName
      ![@unifiedTypeMapIndexList emptyList]
      !false
      !attributeTypeIndex
      ![@readerQualifier isBasic]
      !""
    ] ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mStructTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum structType]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex attributeTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- uint type index
  @unifiedTypeMapIndex uintType ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"uint" !here] !?ioSemanticContext.mTypeMap ?uintType] ;
#--- Element type index
  @unifiedTypeMapIndex listTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mListTypeName !?ioSemanticContext.mTypeMap ?listTypeIndex] ;
#--- Attribute description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapIndexList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  foreach typedAttributeList do
    enumerationDescriptor += !mAttributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !mAttributeTypeIndex ;
    modifierFormalArgumentList += !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext.mTypeMap !"emptyList" ![mListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"listWithValue" !here]
    !constructorAttributeTypeList
    !true
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"length" !"uint" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext.mTypeMap !"subListFromIndex" !"uint" ![mListTypeName string] !false ;
  enterBaseReaderWith2Arguments !?readerMap !?ioSemanticContext.mTypeMap !"subListWithRange" !"uint" !"uint" ![mListTypeName string] !false ;
  foreach typedAttributeList do
    [!?readerMap insertOrReplace
      ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
      ![@unifiedTypeMapIndexList listWithValue !uintType]
      !false
      !mAttributeTypeIndex
      ![@readerQualifier isBasic]
      !""
    ] ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popFirst" !here]
    !modifierFormalArgumentList
    !true
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popLast" !here]
    !modifierFormalArgumentList
    !true
  ] ;
  foreach typedAttributeList do
    @formalParameterSignature setterFormalArgumentList [emptyList] ;
    setterFormalArgumentList += !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    setterFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
      !setterFormalArgumentList
      !true
    ] ;
  end foreach ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertOrReplace
    ![@lstring new !"first" !here]
    !modifierFormalArgumentList
    !true
  ] ;
  [!?instanceMethodMap insertOrReplace
    ![@lstring new !"last" !here]
    !modifierFormalArgumentList
    !true
  ] ;
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum listType]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
  @unifiedTypeMapIndex uintType ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"uint" !here] !?ioSemanticContext.mTypeMap ?uintType] ;
#---
  @typedAttributeList typedAttributeList [emptyList] ;
#--- Handle super class
  @unifiedTypeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapIndex null] ;
  else
    [@unifiedTypeMapIndex makeRegularIndex !mSuperClassName !?ioSemanticContext.mTypeMap ?superClassIndex] ;
  end if ;
#--- Current class Index
    @unifiedTypeMapIndex classIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mClassTypeName !?ioSemanticContext.mTypeMap ?classIndex] ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  if not mIsAbstract then
    @unifiedTypeMapIndexList constructorAttributeTypeList [emptyList] ;
    foreach mAttributeList do
      @unifiedTypeMapIndex attributeTypeIndex ;
      [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
      constructorAttributeTypeList += !attributeTypeIndex ;
    end foreach ;
    [!?constructorMap insertKey
      ![@lstring new !"new" !here]
      !constructorAttributeTypeList
      !true
      !classIndex
    ] ;
  end if ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mClassTypeName
    !not mIsAbstract # Concrete Type
    !superClassIndex # No super type
    ![@typeKindEnum classType]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterType # Handles also routine declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @formalParameterSignature routineSignature [emptyList] ;
  foreach mFormalParameterList do
    @unifiedTypeMapIndex parameterTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalParameterPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterType # Handles also function declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @unifiedTypeMapIndexList functionSignature [emptyList] ;
  foreach mFormalParameterList do
    @unifiedTypeMapIndex parameterTypeIndex ;
    [@unifiedTypeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex ;
  end foreach ;
#--- Result type
  @unifiedTypeMapIndex resultTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @lazyFunctionDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  @unifiedTypeMapIndex resultTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName ![@unifiedTypeMapIndexList emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterType
  ?!@semanticContext ioSemanticContext
:
#--- Check associated map is really a list
  @typedAttributeList listTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  [[ioSemanticContext mTypeMap] searchKey
    !mAssociatedListTypeName
    ?2*
    ?typeKindEnum
    ?listTypedAttributeList
    ?6*
  ] ;
  if typeKindEnum != [@typeKindEnum mapType] then
    error mAssociatedListTypeName : "the '@" . mAssociatedListTypeName . "' type should be a list type" ;
    listTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapIndex associatedListTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mAssociatedListTypeName !?ioSemanticContext.mTypeMap ?associatedListTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapIndex currentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex !mListmapTypeName !?ioSemanticContext.mTypeMap ?currentTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapIndex stringTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"string" !here] !?ioSemanticContext.mTypeMap ?stringTypeIndex] ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext.mTypeMap !"count" !"uint" !false ;
#--- Enumerator description
  @enumerationDescriptorList enumeratorDescriptor [emptyList] ;
  enumeratorDescriptor += !stringTypeIndex !"key" ;
  enumeratorDescriptor += !associatedListTypeIndex !"value" ;
#--- Enter type in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mListmapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapIndex null] # No super type
    ![@typeKindEnum mapIndexType]
    !listTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumeratorDescriptor
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T              *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @partiallyOrderedSemanticDeclarationListAST {
  @string mDependanceString ;
  @string mTypeString ;
  @semanticDeclarationAST mSemanticDeclaration ;
}{
  mDependanceString <
}

#---------------------------------------------------------------------------*

method @semanticDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST unused ioPartiallyOrderedDeclarationList
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !mPredefinedTypeName !self ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mSuperClassName string] ![mClassTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mListTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mStructTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mEnumTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mSortedListTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedListTypeName string] ![mListmapTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedMapTypeName string] ![mMapIndexTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C    C O N T E X T                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#------ Add predefined types to semantics declarations
  @semanticDeclarationListAST semanticDeclarationList := inSemanticDeclarationList ;
  appendPredefinedTypesASTs !?semanticDeclarationList ;
#--- Collect all type, for checking there is no undefined type
  @collectedTypeMap collectedTypeMap [emptyMap] ;
  foreach semanticDeclarationList do
    [mSemanticDeclaration collectType !?collectedTypeMap] ;
  end foreach ;
#--- Check there is no undefined type
  @stringlist undefinedClasses := [collectedTypeMap unsolvedIndexKeyStringList] ;
  if [undefinedClasses length] == 1 then
    @string errorMessage := "there is 1 undefined type:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage ;
  elsif [undefinedClasses length] > 1 then
    @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage ;
  end if ;
#------ Build ordered types list, so that
#  - a class appears after its super class
#  - a map index appears after its associated map
#  - a list map appears after its associated list
  @partiallyOrderedSemanticDeclarationListAST partiallyOrderedSemanticDeclarationListAST [emptySortedList] ;
  if [@uint errorCount] == 0 then
    foreach semanticDeclarationList do
      [mSemanticDeclaration enterOrderedDeclaration !?partiallyOrderedSemanticDeclarationListAST] ;  
    end foreach ;
  end if ;
#---
  @semanticDeclarationListAST orderedSemanticDeclarationListAST [emptyList] ;
  @stringset alreadyDefinedTypes [emptySet] ;
  alreadyDefinedTypes += !"" ;
  @bool progress := true ;
  loop [partiallyOrderedSemanticDeclarationListAST length] :
  while ([partiallyOrderedSemanticDeclarationListAST length] > 0) & progress do
    progress := false ;
    const @partiallyOrderedSemanticDeclarationListAST r := partiallyOrderedSemanticDeclarationListAST ;
    partiallyOrderedSemanticDeclarationListAST := [@partiallyOrderedSemanticDeclarationListAST emptySortedList] ;
    foreach r do
      if [alreadyDefinedTypes hasKey !mDependanceString] then
        orderedSemanticDeclarationListAST += !mSemanticDeclaration ;
        alreadyDefinedTypes += !mTypeString ;
        progress := true ;
      else
        partiallyOrderedSemanticDeclarationListAST += !mDependanceString !mTypeString !mSemanticDeclaration ;
      end if ;
    end foreach ;
  end loop ;
#--- Remain in partiallyOrderedSemanticDeclarationListAST only
#    circular definitions
  if [partiallyOrderedSemanticDeclarationListAST length] > 0 then
    @string s := "inheritance circularities involving the " ;
    foreach partiallyOrderedSemanticDeclarationListAST
      do s.= "@" . mTypeString ;
      between s .= ", " ;
    end foreach ;
    s .= " classes" ;
    error here : s ;
  end if ;
#--- Build initial semantic context
  outSemanticContext := [@semanticContext new
    ![@unifiedTypeMap emptyMap]
    ![@routineMap emptyMap]
    ![@functionMap emptyMap]
    ![@descendantClassListMap emptyMap]
    ![@filewrapperMap emptyMap]
  ] ;
#--- Loop throught all declarations
  if [@uint errorCount] == 0 then
    foreach orderedSemanticDeclarationListAST do
      [mSemanticDeclaration enterType !?outSemanticContext] ;
    end foreach ;
  end if ;
#--- Check type cross references are correct
# * class inheritance graph has no circularity
# * mapindex type refers to an actual map type
# * listmap type refers to an actual list type
  if [@uint errorCount] == 0 then
    foreach [outSemanticContext mTypeMap] do
#      [mType checkTypeCrossReferences ![[outSemanticContext mTypeMap] count]] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
