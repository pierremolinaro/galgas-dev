#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics expressionMetamodel :

#---------------------------------------------------------------------------*

abstract class @semanticExpression {
}

#---------------------------------------------------------------------------*

list @semanticExpressionList {
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

class @outExpressionList {
  @semanticExpressionList mExpression ;
  @location mEndOfExpressionLocation ;
}

#---------------------------------------------------------------------------*

class @variableExpression extends @semanticExpression {
  @lstring mVariableName ;
}

#---------------------------------------------------------------------------*

class @selfInExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

class @hereExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

class @trueExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

class @falseExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

class @literalCharExpression extends @semanticExpression {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @literalStringExpression extends @semanticExpression {
  @stringlist mStringSequence ;
}

#---------------------------------------------------------------------------*

class @literalDoubleExpression extends @semanticExpression {
  @ldouble mValue ;
}

#---------------------------------------------------------------------------*

class @literalUIntExpression extends @semanticExpression {
  @luint mValue ;
}

#---------------------------------------------------------------------------*

class @literalUInt64Expression extends @semanticExpression {
  @luint64 mValue ;
}

#---------------------------------------------------------------------------*

class @literalSIntExpression extends @semanticExpression {
  @lsint mValue ;
}

#---------------------------------------------------------------------------*

class @literalSInt64Expression extends @semanticExpression {
  @lsint64 mValue ;
}

#---------------------------------------------------------------------------*

class @constructorExpression extends @semanticExpression {
  @lstring mTypeName ;
  @lstring mConstructorName ;
  @outExpressionList mExpressions ;
}

#---------------------------------------------------------------------------*

class @readerCallExpression extends @semanticExpression {
  @semanticExpression mReceiver ;
  @lstring mReaderName ;
  @outExpressionList mExpressions ;
}

#---------------------------------------------------------------------------*

class @optionExpression extends @semanticExpression {
  @lstring mOptionComponentName ;
  @lstring mOptionEntryName ;
}

#---------------------------------------------------------------------------*

class @concatExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @orExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @xorExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @andExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @equalExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @notEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @lowerOrEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @greaterOrEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @strictGreaterExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @strictLowerExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @rightShiftExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @leftShiftExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @addExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @subExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @multiplicationExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @divisionExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @moduloExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @unaryMinusExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

class @notExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

class @negateExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

class @varInExpression extends @semanticExpression {
  @lstring mVarName ;
}

#---------------------------------------------------------------------------*

class @descriptionInExpression extends @semanticExpression {
  @semanticExpression mReceiverExpression ;
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @castInExpression extends @semanticExpression {
  @semanticExpression mReceiverExpression ;
  @bool mUseKindOfClass ;
  @lstring mTypeName ;
  @semanticExpression mErrorLocationExpression ;
}

#---------------------------------------------------------------------------*

class @filewrapperObjectInstanciationInExpression extends @semanticExpression {
  @lstring mFilewrapperName ;
}

#---------------------------------------------------------------------------*

class @filewrapperInExpression extends @semanticExpression {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperPath ;
}

#---------------------------------------------------------------------------*

class @filewrapperTemplateInExpression extends @semanticExpression {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperTemplateName ;
  @outExpressionList mActualOutputParameterList ;
}

#---------------------------------------------------------------------------*

end semantics ;
