#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS domain parser                                                     *
#                                                                           *
#  Started february 9, 2007.                                                *
#                                                                           *
#  Copyright (C) 2007 Pierre Molinaro.                                      *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax domain_parser :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics semantics_semantics in "semantics_semantics.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#          Nonterminal symbols declaration                                  *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <semantics_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents ioOptionsComponentsMapForUse
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@EXsemanticContext ioSemanticContext
label importSemantics
  ?!@ModelMap ioModelMap
  ?!@ActionMap ioExternActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <domain_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
label parse
;

#---------------------------------------------------------------------------*
#                                                                           *
#          parsing domain declaration                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <domain_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
:
  @stringset propertyNameSet [emptySet] ;
  $domain$ ;
  @lstring domainTypeName ;
  $type_name$ ? domainTypeName ;
  ${$ ;
  @domainAttributeMap attributeMap [emptyMap] ;
  @domainModifierMap domainModifierMap [emptyMap] ;
  @L_EXsignature domainModifierAttributeList [emptyList] ;
  domainModifierAttributeList +=
    ![@typeGalgas_string new]
    ![@EXformalArgumentPassingMode argumentConstantIn]
  ;
  @domainRelationMap relationMap [emptyMap] ;
  repeat
  while
    @lstring attributeTypeName ;
    $type_name$ ? attributeTypeName ;
    if [attributeTypeName string] != "string" then
      error attributeTypeName: "only the '@string' is supported here" ;
    end if ;
    @lstring attributeName ;
    $identifier$ ? attributeName ;
    if [propertyNameSet hasKey ![attributeName string]] then
     error attributeName:"the domain has already a property named '" . [attributeName string] . "'" ;
    else
      propertyNameSet += ![attributeName string] ;
      [!?attributeMap insertKey !attributeName] ;
      @lstring addModifierName [new !"addTo" . [attributeName stringByCapitalizingFirstCharacter] ![attributeName location]] ;
      [!?domainModifierMap insertKey !addModifierName !domainModifierAttributeList] ;
    end if ;
    $;$ ;
  while
    @lstring relationTypeName ;
    $identifier$ ? relationTypeName ;
    $[$ ;
    @L_EXsignature relationModifierAttributeList [emptyList] ;
    @stringlist domains [emptyList] ;
    repeat
      @lstring attributeName ;
      $identifier$ ? attributeName ;
      [attributeMap searchKey !attributeName] ;
      domains += ![attributeName string] ;
      relationModifierAttributeList +=
        ![@typeGalgas_string new]
        ![@EXformalArgumentPassingMode argumentConstantIn]
      ;
    while
      $,$ ;
    end repeat ;
    if [propertyNameSet hasKey ![relationTypeName string]] then
     error relationTypeName:"the domain has already a property named '" . [relationTypeName string] . "'" ;
    else
      propertyNameSet += ![relationTypeName string] ;
      @lstring addModifierName [new !"addTo" . [relationTypeName stringByCapitalizingFirstCharacter] ![relationTypeName location]] ;
      [!?domainModifierMap insertKey !addModifierName !relationModifierAttributeList] ;
      [!?relationMap insertKey !relationTypeName !domains] ;
    end if ;
    $]$ ;
    $;$ ;
  end repeat ;
  @AC_galgasType t := [@typeGalgasDomainType new !domainTypeName !attributeMap !domainModifierMap] ;
  @AC_semanticsEntity theEntity := [@typeEntiteType new !t] ;
  [!?ioComponentSemanticsEntitiesMap insertKey !domainTypeName !theEntity] ;
  $}$ ;
 #--- Insertion dans la map des classes definies dans le fichier source courant
  @typeEntityToGenerate def := [@C_domainToImplement new
      !domainTypeName
      !attributeMap
      !relationMap
    ] ;
    listeEntitesAengendrer += !def ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantics_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents unused ioOptionsComponentsMapForUse
  ?!@typeTableNomRoutinesDeclarees unused tableNomRoutinesDeclarees
  ?!@typeTableEnAvant unused tableEnAvant
  ?!@typeTableRoutinesAimplementer unused tableRoutinesAimplementer
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  <domain_declaration> 
    !?ioComponentSemanticsEntitiesMap
    !?listeEntitesAengendrer
  ;
label importSemantics
  ?!@ModelMap unused ioModelMap
  ?!@ActionMap unused ioExternActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeTableNomRoutinesDeclarees unused tableNomRoutinesDeclarees
  ?!@typeTableEnAvant unused tableEnAvant
  ?!@typeTableRoutinesAimplementer unused tableRoutinesAimplementer
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  @typeEntitiesToGenerateList listeEntitesAengendrer [emptyList] ;
  <domain_declaration> 
    !?ioComponentSemanticsEntitiesMap
    !?listeEntitesAengendrer
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;

#---------------------------------------------------------------------------*
