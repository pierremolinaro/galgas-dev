#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS domain parser                                                     *
#                                                                           *
#  Started february 9, 2007.                                                *
#                                                                           *
#  Copyright (C) 2007, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax domain_parser :
with "galgas_scanner.gLexique" ;

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics semantics_semantics in "semantics_semantics.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#          Nonterminal symbols declaration                                  *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <semantics_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents ioOptionsComponentsMapForUse
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ?!@EXsemanticContext ioSemanticContext
label importSemantics
  ?!@ModelMap ioModelMap
  ?!@ActionMap ioExternActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <domain_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
label parse
;

nonterminal <semantic_instruction>
  ??@typeTableEnAvant inTableEnAvant
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ??@EXsemanticContext inSemanticContext
label parse
;

nonterminal <domain_instruction>
label parse
;

nonterminal <domain_expression>
label parse
;

nonterminal <domain_term>
label parse
;

nonterminal <domain_factor>
label parse
;

#---------------------------------------------------------------------------*
#                                                                           *
#          parsing domain declaration                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <domain_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
:
  @stringset propertyNameSet [emptySet] ;
  $domain$ ;
  @lstring domainTypeName ;
  $type_name$ ? domainTypeName ;
  $($ ;
  @domainAttributeMap attributeMap [emptyMap] ;
  @domainModifierMap domainModifierMap [emptyMap] ;
  @L_EXsignature domainModifierAttributeList [emptyList] ;
  domainModifierAttributeList +=
    ![@typeGalgas_string new]
    ![@formalArgumentPassingMode argumentConstantIn]
  ;
  @domainRelationMap relationMap [emptyMap] ;
  repeat
    @lstring attributeName ;
    $identifier$ ? attributeName ;
    if [propertyNameSet hasKey ![attributeName string]] then
     error attributeName:"the domain has already a property named '" . [attributeName string] . "'" ;
    else
      propertyNameSet += ![attributeName string] ;
      [!?attributeMap insertKey !attributeName] ;
      @lstring addModifierName [new !"addTo" . [attributeName stringByCapitalizingFirstCharacter] ![attributeName location]] ;
      [!?domainModifierMap insertKey !addModifierName !domainModifierAttributeList] ;
    end if ;
  while
    $,$ ;
  end repeat ;
  $)$ ;
  ${$ ;
  repeat
  while
    @lstring relationTypeName ;
    $identifier$ ? relationTypeName ;
    $[$ ;
    @L_EXsignature relationModifierAttributeList [emptyList] ;
    @stringlist domains [emptyList] ;
    repeat
      @lstring attributeName ;
      $identifier$ ? attributeName ;
      [attributeMap searchKey !attributeName] ;
      domains += ![attributeName string] ;
      relationModifierAttributeList +=
        ![@typeGalgas_uint new]
        ![@formalArgumentPassingMode argumentConstantIn]
      ;
    while
      $,$ ;
    end repeat ;
    if [propertyNameSet hasKey ![relationTypeName string]] then
     error relationTypeName: "the domain has already a property named '" . [relationTypeName string] . "'" ;
    else
      [!?relationMap insertKey !relationTypeName !domains] ;
      propertyNameSet += ![relationTypeName string] ;
      @lstring addModifierName [new !"addTo" . [relationTypeName stringByCapitalizingFirstCharacter] ![relationTypeName location]] ;
      [!?domainModifierMap insertKey !addModifierName !relationModifierAttributeList] ;
      addModifierName := [@lstring new !"reset" . [relationTypeName stringByCapitalizingFirstCharacter] ![relationTypeName location]] ;
      [!?domainModifierMap insertKey !addModifierName ![@L_EXsignature emptyList]] ;
    end if ;
    $]$ ;
    $;$ ;
  end repeat ;
  @AC_galgasType t := [@typeGalgasDomainType new
    !domainTypeName
    !attributeMap
    !domainModifierMap
    !relationMap
  ] ;
  @AC_semanticsEntity theEntity := [@typeEntiteType new !t] ;
  [!?ioComponentSemanticsEntitiesMap insertKey !domainTypeName !theEntity] ;
  $}$ ;
 #--- Insertion dans la map des classes definies dans le fichier source courant
  @typeEntityToGenerate def := [@C_domainToImplement new
      !domainTypeName
      !attributeMap
      !relationMap
    ] ;
    listeEntitesAengendrer += !def ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantics_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents unused ioOptionsComponentsMapForUse
  ?!@typeTableNomRoutinesDeclarees unused tableNomRoutinesDeclarees
  ?!@typeTableEnAvant unused tableEnAvant
  ?!@typeTableRoutinesAimplementer unused tableRoutinesAimplementer
  ?!@EXsemanticContext unused ioSemanticContext
:
  <domain_declaration> 
    !?ioComponentSemanticsEntitiesMap
    !?listeEntitesAengendrer
  ;
label importSemantics
  ?!@ModelMap unused ioModelMap
  ?!@ActionMap unused ioExternActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeTableNomRoutinesDeclarees unused tableNomRoutinesDeclarees
  ?!@typeTableEnAvant unused tableEnAvant
  ?!@typeTableRoutinesAimplementer unused tableRoutinesAimplementer
  ?!@EXsemanticContext unused ioSemanticContext
:
  @typeEntitiesToGenerateList listeEntitesAengendrer [emptyList] ;
  <domain_declaration> 
    !?ioComponentSemanticsEntitiesMap
    !?listeEntitesAengendrer
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction>
  ??@typeTableEnAvant unused inTableEnAvant
  ??@M_semanticsEntitiesForUse unused ioComponentSemanticsEntitiesMap
  ??@M_optionComponents unused inOptionsComponentsMapForUse
  ?!@typeVariablesMap unused ioVariablesMap
  ?!@typeInstructionList unused ioInstructionList
  ??@EXsemanticContext unused inSemanticContext
:
  $domain$ ;
  $identifier$ ? @lstring domainName ;
  ${$ ;
  repeat
    <domain_instruction> ;
  while
  end repeat ;
  $}$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_instruction>
:
  $identifier$ ? @lstring relationName ;
  $[$ ;
  repeat
    $identifier$ ? @lstring domainName ;
    $identifier$ ? @lstring variableName ;
  while
    $,$ ;
  end repeat ;
  $]$ ;
  select
    $:=$ ;
  or
    $+=$ ;
  or
    $-=$ ;
  end select ;
  <domain_expression> ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_expression>
:
  <domain_term> ;
  repeat
  while
    $|$ ;
    <domain_term> ;
  end repeat ; 
end rule ;

#---------------------------------------------------------------------------*

rule <domain_term>
:
  <domain_factor> ;
  repeat
  while
    $&$ ;
    <domain_factor> ;
  end repeat ; 
end rule ;

#---------------------------------------------------------------------------*

rule <domain_factor>
:
  $~$ ;
  <domain_factor> ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_factor>
:
  $identifier$ ?@lstring relationName ;
  $[$ ;
  repeat
    $identifier$ ? @lstring domainName ;
  while
    $,$ ;
  end repeat ;
  $]$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_factor>
:
  $($ ;
  <domain_expression> ;
  $)$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_factor>
:
  $?$ ;
  $identifier$ ? @lstring domainName ;
  $identifier$ ? @lstring variableName ;
  $($ ;
  <domain_expression> ;
  $)$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <domain_factor>
:
  $!$ ;
  $identifier$ ? @lstring domainName ;
  $identifier$ ? @lstring variableName ;
  $($ ;
  <domain_expression> ;
  $)$ ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;

#---------------------------------------------------------------------------*
