#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS program component parser definition                               *
#                                                                           *
#  Copyright (C) 1997-2006 Pierre Molinaro.                                 *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax program_parser :

import lexique galgas_scanner in "galgas_scanner.ggs" ;

import semantics common_semantics in "common_semantics.ggs" ;

#--------------------------------------------------------------------------------*

rule <parse_semantics_component_for_importing>
  ??@lstring inFileName
  ?!@M_semanticsComponents ioSemanticsMapForUse
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label parse
;

rule <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

rule <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label parse
;

rule <program_attributes_declaration>
  ?!@typeListeAttributsAxiome listeDesAttributs
label parse
;

action generatePRGM
  ?!@lstring nomPRGMprincipal
  ?!@lstring extensionSource
  ?!@lstring versionString
  ?!@L_grammarDescriptorForProgram inGrammarDescriptorForProgramList
  ?!@luint nombreMaxErreurs
  ?!@luint nombreMaxAlertes
  ?!@M_optionComponents inOptionsComponents
;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
:
#--- Program header
  $program$ ;
  @lstring nomPRGMprincipal ; # nom fichier programme principal
  @lstring extensionSource ; # extension fichiers source
  @typeListeAttributsAxiome listeDesAttributs ; # list des noms des attributs de l'axiome
  @luint nombreMaxErreurs ; # Nombre maximum d'erreurs
  @luint nombreMaxAlertes ; # Nombre maximum d'alertes
#--- Get program name
  $identifier$ ? nomPRGMprincipal ;
#--- Title
  @lstring versionString ;
  $literal_string$ ? versionString ;
#--- Source file extension definition
  $.$ ;
  $literal_string$ ? extensionSource ;
  $:$ ;
#--- Grammaire
  @L_grammarDescriptorForProgram grammarDescriptorForProgramList [empty] ;
  $import$ ;
  $grammar$ ;
  @lstring grammarName ;
  $identifier$ ? grammarName ;
  @M_grammarComponents grammarComponentsMap ;
  select
    grammarComponentsMap := ioGrammarComponentsMap ;
  or
    $in$ ;
    @lstring sourceFileName ;
    $literal_string$ ? sourceFileName ;
    grammarComponentsMap := [@M_grammarComponents empty] ;
    <parse_grammar_component_for_importing>
      !sourceFileName
      !?grammarComponentsMap
      !?ioMetamodelComponentMap
      !?ioConstraintComponentMap
    ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    @lstring metamodelComponentName ;
    $identifier$ ? metamodelComponentName ;
    select
    or
      $in$ ;
      @lstring sourceFile ;
      $literal_string$ ?sourceFile ;
      <parse_semantics_component_for_importing> 
        !sourceFile
        !?ioSemanticsComponentsMap
        !?ioMetamodelComponentMap
        !?ioConstraintComponentMap
      ;
    end select ;
    $;$ ;
  #--- Import constraints
    repeat
    while
      $import$ ;
      $constraint$ ;
      @lstring constraintComponentName ;
      $identifier$ ? constraintComponentName ;
      select
      or
        $in$ ;
        @lstring sourceFile ;
        $literal_string$ ?sourceFile ;
#      <parse_semantics_component_for_importing> 
#        !sourceFile
#        !?ioSemanticsComponentsMap
#        !?ioMetamodelComponentMap
#        !?ioConstraintComponentMap
#      ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
  @lstring lexiqueClassName ;
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap ;
  @M_optionComponents optionsComponentsMap ;
  [!?grammarComponentsMap searchKey !grammarName ?nonterminalSymbolParametersMap  ?lexiqueClassName ?optionsComponentsMap] ;
  @lstring altName := [@lstring new !"" !here] ;
  @L_signature startSymbolSignature ;
  @lstring returnedMetamodel ;
  [!?nonterminalSymbolParametersMap searchKey !altName ?startSymbolSignature ?returnedMetamodel] ;
#--- Liste des attributs
  listeDesAttributs := [@typeListeAttributsAxiome empty] ;
  <program_attributes_declaration> !?listeDesAttributs ;
#--- Verifier que le nombre d'attributs est correct
  if [listeDesAttributs length] < [startSymbolSignature length] then
    error here : "one or more parameters missing" ;
  elsif [listeDesAttributs length] > [startSymbolSignature length] then
    error here : "too much parameters" ;
  end if ;
  @string postfix := "" ;
#--- Metamodel ?
  @lstring metamodelName ;
  @lstring rootEntityName ;
  @L_lstringList contraintListForMetamodel [empty] ;
  select
    metamodelName := [@lstring new !"" !here] ;
    rootEntityName := [@lstring new !"" !here] ;
  or
    $metamodel$ ;
    $identifier$ ? metamodelName ;
    select
    or
      $($ ;
      repeat
        @lstring constraintComponentName ;
        $identifier$ ? constraintComponentName ;
        contraintListForMetamodel += !constraintComponentName ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
    if [metamodelName value] != [returnedMetamodel value] then
      error metamodelName: "the '" . [returnedMetamodel value] . "' metamodel was expected here" ;
    end if ;
    [!?ioMetamodelComponentMap searchKey !metamodelName ?rootEntityName ?* ?* ?*] ;
  end select ;
#--- Send grammar descriptor
  grammarDescriptorForProgramList +=
    !postfix
    !grammarName
    !startSymbolSignature
    !listeDesAttributs
    !lexiqueClassName
    !returnedMetamodel
    !rootEntityName
    !contraintListForMetamodel
  ;
#--- Max errors count
  $error$ ;
  $unsigned_literal_integer$ ? nombreMaxErreurs ;
  $;$ ;
#--- Max warnings count
  $warning$ ;
  $unsigned_literal_integer$ ? nombreMaxAlertes ;
  $;$ ;
#--- Engendrer le programme principal
  action generatePRGM
    !?nomPRGMprincipal
    !?extensionSource
    !?versionString
    !?grammarDescriptorForProgramList
    !?nombreMaxErreurs
    !?nombreMaxAlertes
    !?optionsComponentsMap
  ;
  $end$ ;
  $program$ ;
  $;$ ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
#--- Program header
  $program$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $.$ ;
  $literal_string$ ? * ;
  $:$ ;
#--- Grammar definitiuon
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $in$ ;
      $literal_string$ ?* ;
      <parse_semantics_component_for_importing> parse ;
    end select ;
    $;$ ;
    repeat
    while
      $import$ ;
      $constraint$ ;
      $identifier$ ? * ;
      select
      or
        $in$ ;
        $literal_string$ ?* ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
#--- Program attributes
  <program_attributes_declaration> parse ;
  select
  or
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $($ ;
      repeat
        $identifier$ ? * ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
  end select ;
#--- Max errors count
  $error$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
#--- Max warnings count
  $warning$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
#--- End program
  $end$ ;
  $program$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
:
  $program$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $.$ ;
  $literal_string$ ? * ;
  $:$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $in$ ;
      $literal_string$ ?* ;
      <parse_semantics_component_for_importing> parse ;
    end select ;
    $;$ ;
    repeat
    while
      $import$ ;
      $constraint$ ;
      $identifier$ ? * ;
      select
      or
        $in$ ;
        $literal_string$ ?* ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
#--- Program attributes
  <program_attributes_declaration> parse ;
  select
  or
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $($ ;
      repeat
        $identifier$ ? * ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
  end select ;
#--- Max errors count
  $error$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
#--- Max warnings count
  $warning$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
  $end$ ;
  $program$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_constraintComponents unused ioConstraintComponentMap
:
  $program$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $.$ ;
  $literal_string$ ? * ;
  $:$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $in$ ;
      $literal_string$ ?* ;
      <parse_semantics_component_for_importing> parse ;
    end select ;
    $;$ ;
    repeat
    while
      $import$ ;
      $constraint$ ;
      $identifier$ ? * ;
      select
      or
        $in$ ;
        $literal_string$ ?* ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
#--- Program attributes
  <program_attributes_declaration> parse ;
  select
  or
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $($ ;
      repeat
        $identifier$ ? * ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
  end select ;
#--- Max errors count
  $error$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
#--- Max warnings count
  $warning$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
  $end$ ;
  $program$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_constraintComponents unused ioConstraintComponentMap
:
  $program$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $.$ ;
  $literal_string$ ? * ;
  $:$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $in$ ;
      $literal_string$ ?* ;
      <parse_semantics_component_for_importing> parse ;
    end select ;
    $;$ ;
    repeat
    while
      $import$ ;
      $constraint$ ;
      $identifier$ ? * ;
      select
      or
        $in$ ;
        $literal_string$ ?* ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
#--- Program attributes
  <program_attributes_declaration> parse ;
  select
  or
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $($ ;
      repeat
        $identifier$ ? * ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
  end select ;
#--- Max errors count
  $error$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
#--- Max warnings count
  $warning$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
  $end$ ;
  $program$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $program$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $.$ ;
  $literal_string$ ? * ;
  $:$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  select
  or
    $import$ ;
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $in$ ;
      $literal_string$ ?* ;
      <parse_semantics_component_for_importing> parse ;
    end select ;
    $;$ ;
    repeat
    while
      $import$ ;
      $constraint$ ;
      $identifier$ ? * ;
      select
      or
        $in$ ;
        $literal_string$ ?* ;
      end select ;
      $;$ ;
    end repeat ;
  end select ;
  <program_attributes_declaration> parse ;
  select
  or
    $metamodel$ ;
    $identifier$ ? * ;
    select
    or
      $($ ;
      repeat
        $identifier$ ? * ;
      while
        $,$ ;
      end repeat ;
      $)$ ;
    end select ;
    $;$ ;
  end select ;
  $error$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
  $warning$ ;
  $unsigned_literal_integer$ ? * ;
  $;$ ;
  $end$ ;
  $program$ ;
  $;$ ;
end rule ;

#--------------------------------------------------------------------------------*

rule <program_attributes_declaration>
  ?!@typeListeAttributsAxiome listeDesAttributs
:
  repeat
  while
    @lstring texte ;
    $identifier$ ? texte ;
    listeDesAttributs += !texte ;
    $;$ ;
  end repeat ;

end rule ;

#--------------------------------------------------------------------------------*

end syntax ;
