//---------------------------------------------------------------------------*//                                                                           *//                       File 'expression_parser.cpp'                        *//               Generated by version 0.14.0 (LL(1) grammar)                 *//                     january 13th, 2005, at 17h52'41"                      *//                                                                           *// This program is free software; you can redistribute it and/or modify it   *// under the terms of the GNU General Public License as published by the     *// Free Software Foundation.                                                 *//                                                                           *// This program is distributed in the hope it will be useful, but WITHOUT    *// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *// more details.                                                             *//                                                                           *//---------------------------------------------------------------------------*//--- START OF USER ZONE 1//--- END OF USER ZONE 1#include "files/C_text_file_write.h"#include "expression_parser.h"//--- START OF USER ZONE 2//--- END OF USER ZONE 2//---------------------------------------------------------------------------*//                                                                           *//               Implementation of routine "matchAndOperator"                *//                                                                           *//---------------------------------------------------------------------------*void routine_matchAndOperator (C_lexique & lexique_var_,                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,                                GGS_AC_galgasType  & var_cas_outResultType) {  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {    cPtr_AC_galgasType * ptr_4723 = var_cas_inLeftExpressionType () ;    cPtr_AC_galgasType * ptr_4748 = var_cas_inRightExpressionType () ;    cPtr_typeGalgas_bool * operand_4723 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4723) ;    cPtr_typeGalgas_bool * operand_4748 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_4748) ;    if ((operand_4723 != NULL) && (operand_4748 != NULL)) {      var_cas_outResultType = var_cas_inLeftExpressionType ;    }else{        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " & ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid")))) ;    }  }}//---------------------------------------------------------------------------*//                                                                           *//               Implementation of routine "matchOrOperator"                 *//                                                                           *//---------------------------------------------------------------------------*void routine_matchOrOperator (C_lexique & lexique_var_,                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,                                GGS_AC_galgasType  & var_cas_outResultType) {  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {    cPtr_AC_galgasType * ptr_5639 = var_cas_inLeftExpressionType () ;    cPtr_AC_galgasType * ptr_5664 = var_cas_inRightExpressionType () ;    cPtr_typeGalgas_bool * operand_5639 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5639) ;    cPtr_typeGalgas_bool * operand_5664 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_5664) ;    if ((operand_5639 != NULL) && (operand_5664 != NULL)) {      var_cas_outResultType = var_cas_inLeftExpressionType ;    }else{        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " | ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid")))) ;    }  }}//---------------------------------------------------------------------------*//                                                                           *//             Implementation of routine "matchConcatOperator"               *//                                                                           *//---------------------------------------------------------------------------*void routine_matchConcatOperator (C_lexique & lexique_var_,                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,                                const GGS_AC_galgasType  & var_cas_inRightExpressionType,                                GGS_AC_galgasType  & var_cas_outResultType) {  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {    cPtr_AC_galgasType * ptr_6559 = var_cas_inLeftExpressionType () ;    cPtr_AC_galgasType * ptr_6584 = var_cas_inRightExpressionType () ;    cPtr_typeGalgas_string * operand_6559 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_6559) ;    cPtr_typeGalgas_string * operand_6584 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_6584) ;    if ((operand_6559 != NULL) && (operand_6584 != NULL)) {      var_cas_outResultType = var_cas_inLeftExpressionType ;    }else{        GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "operand type error : (")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " . ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, ") is not valid")))) ;    }  }}//---------------------------------------------------------------------------*//                                                                           *//               Implementation of routine "checkNotOperator"                *//                                                                           *//---------------------------------------------------------------------------*void routine_checkNotOperator (C_lexique & lexique_var_,                                const GGS_AC_galgasType  & var_cas_inOperandType,                                GGS_AC_galgasType  & var_cas_outResultType) {  { cPtr_typeGalgas_bool * ptrExtraire_ = dynamic_cast <cPtr_typeGalgas_bool *> (var_cas_inOperandType.getPtr ()) ;    if (ptrExtraire_ == NULL) {      if (var_cas_inOperandType.getPtr () != NULL) {        TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;        C_string message2_ ;        message1_ (0 COMMA_HERE) << cPtr_typeGalgas_bool::static_string_message_messageGalgasType () ;        message2_ << var_cas_inOperandType ()->message_messageGalgasType () ;        GGS_location (lexique_var_).signalExtractError (lexique_var_, message1_, message2_) ;      }    }else{      macroValidPointer (ptrExtraire_) ;    }  }  var_cas_outResultType = var_cas_inOperandType ;}//---------------------------------------------------------------------------*//                                                                           *//            Implementation of routine "comparison_types_check"             *//                                                                           *//---------------------------------------------------------------------------*void routine_comparison_types_check (C_lexique & lexique_var_,                                const GGS_AC_galgasType  & var_cas_inLeftExpressionType,                                const GGS_AC_galgasType  & var_cas_inRightExpressionType) {  if (var_cas_inLeftExpressionType.isBuilt () && var_cas_inRightExpressionType.isBuilt ()) {    cPtr_AC_galgasType * ptr_8067 = var_cas_inLeftExpressionType () ;    cPtr_AC_galgasType * ptr_8092 = var_cas_inRightExpressionType () ;    cPtr_typeGalgas_bool * operand_8067 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8067) ;    cPtr_typeGalgas_bool * operand_8092 = dynamic_cast <cPtr_typeGalgas_bool *> (ptr_8092) ;    if ((operand_8067 != NULL) && (operand_8092 != NULL)) {    }else{      cPtr_typeGalgas_char * operand_8067 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_8067) ;      cPtr_typeGalgas_char * operand_8092 = dynamic_cast <cPtr_typeGalgas_char *> (ptr_8092) ;      if ((operand_8067 != NULL) && (operand_8092 != NULL)) {      }else{        cPtr_typeGalgas_uint * operand_8067 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8067) ;        cPtr_typeGalgas_uint * operand_8092 = dynamic_cast <cPtr_typeGalgas_uint *> (ptr_8092) ;        if ((operand_8067 != NULL) && (operand_8092 != NULL)) {        }else{          cPtr_typeGalgas_sint * operand_8067 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8067) ;          cPtr_typeGalgas_sint * operand_8092 = dynamic_cast <cPtr_typeGalgas_sint *> (ptr_8092) ;          if ((operand_8067 != NULL) && (operand_8092 != NULL)) {          }else{            cPtr_typeGalgas_dfloat * operand_8067 = dynamic_cast <cPtr_typeGalgas_dfloat *> (ptr_8067) ;            cPtr_typeGalgas_dfloat * operand_8092 = dynamic_cast <cPtr_typeGalgas_dfloat *> (ptr_8092) ;            if ((operand_8067 != NULL) && (operand_8092 != NULL)) {            }else{              cPtr_typeGalgas_string * operand_8067 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_8067) ;              cPtr_typeGalgas_string * operand_8092 = dynamic_cast <cPtr_typeGalgas_string *> (ptr_8092) ;              if ((operand_8067 != NULL) && (operand_8092 != NULL)) {              }else{                cPtr_typeGalgas_enum * operand_8067 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_8067) ;                cPtr_typeGalgas_enum * operand_8092 = dynamic_cast <cPtr_typeGalgas_enum *> (ptr_8092) ;                if ((operand_8067 != NULL) && (operand_8092 != NULL)) {                  if (((operand_8067->mEnumTypeName.reader_value ()) != (operand_8092->mEnumTypeName.reader_value ())).isBuiltAndTrue ()) {                      GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "comparison between a '@")) + (operand_8067->mEnumTypeName.reader_value ()))) + (GGS_string (true, "' enumeration and a '@")))) + (operand_8092->mEnumTypeName.reader_value ()))) + (GGS_string (true, "' is not valid")))) ;                  }                }else{                    GGS_location (lexique_var_).reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "comparison between ")) + (var_cas_inLeftExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " and ")))) + (var_cas_inRightExpressionType.reader_messageGalgasType ()))) + (GGS_string (true, " is not valid")))) ;                }              }            }          }        }      }    }  }}//---------------------------------------------------------------------------*//                                                                           *//              Implementation of production rule 'expression'               *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_expression_expression_parser_230_18_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_concatenation_term_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_0 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;          GGS_typeExpression  var_cas_leftOperand ;          var_cas_leftOperand = var_cas_outExpression ;          GGS_typeExpression  var_cas_rightOperand ;          GGS_AC_galgasType  var_cas_firstOperandType ;          var_cas_firstOperandType = var_cas_outResultType ;          GGS_AC_galgasType  var_cas_secondOperandType ;          nt_concatenation_term_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;          var_cas_outExpression = GGS_typeConcatOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;          ::routine_matchConcatOperator (lexique_var_,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*void expression_parser::pr_expression_expression_parser_230_18_parse (galgas_scanner & lexique_var_) {  nt_concatenation_term_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_0 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;          nt_concatenation_term_parse (lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*//                                                                           *//          Implementation of production rule 'concatenation_term'           *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_concatenation_term_expression_parser_273_26_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_relation_term_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_1 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;          GGS_typeExpression  var_cas_leftOperand ;          var_cas_leftOperand = var_cas_outExpression ;          GGS_typeExpression  var_cas_rightOperand ;          GGS_AC_galgasType  var_cas_firstOperandType ;          var_cas_firstOperandType = var_cas_outResultType ;          GGS_AC_galgasType  var_cas_secondOperandType ;          nt_relation_term_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;          var_cas_outExpression = GGS_typeOrOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;          ::routine_matchOrOperator (lexique_var_,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*void expression_parser::pr_concatenation_term_expression_parser_273_26_parse (galgas_scanner & lexique_var_) {  nt_relation_term_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_1 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__7C) ;          nt_relation_term_parse (lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*//                                                                           *//            Implementation of production rule 'relation_term'              *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_relation_term_expression_parser_316_21_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_relation_factor_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_2 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;          GGS_typeExpression  var_cas_leftOperand ;          var_cas_leftOperand = var_cas_outExpression ;          GGS_typeExpression  var_cas_rightOperand ;          GGS_AC_galgasType  var_cas_firstOperandType ;          var_cas_firstOperandType = var_cas_outResultType ;          GGS_AC_galgasType  var_cas_secondOperandType ;          nt_relation_factor_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightOperand, var_cas_secondOperandType) ;          var_cas_outExpression = GGS_typeAndOperation::constructor_new (var_cas_leftOperand, var_cas_rightOperand) ;          ::routine_matchAndOperator (lexique_var_,  var_cas_firstOperandType,  var_cas_secondOperandType,  var_cas_outResultType) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*void expression_parser::pr_relation_term_expression_parser_316_21_parse (galgas_scanner & lexique_var_) {  nt_relation_factor_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_2 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__26) ;          nt_relation_factor_parse (lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*//                                                                           *//           Implementation of production rule 'relation_factor'             *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_relation_factor_expression_parser_359_23_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;  switch (select_expression_parser_3 (lexique_var_)) {    case 1 : {      } break ;    case 2 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    case 3 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeNonEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    case 4 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeInfOrEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    case 5 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeSupOrEqualTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    case 6 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeStrictSupTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    case 7 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;      GGS_typeExpression  var_cas_leftExpression ;      var_cas_leftExpression = var_cas_outExpression ;      GGS_AC_galgasType  var_cas_leftType ;      var_cas_leftType = var_cas_outResultType ;      GGS_typeExpression  var_cas_rightExpression ;      GGS_AC_galgasType  var_cas_rightType ;      nt_simple_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_rightExpression, var_cas_rightType) ;      ::routine_comparison_types_check (lexique_var_,  var_cas_leftType,  var_cas_rightType) ;      var_cas_outExpression = GGS_typeStrictInfTest::constructor_new (var_cas_leftExpression, var_cas_rightExpression) ;      var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      } break ;    default :      break ;  }}//---------------------------------------------------------------------------*void expression_parser::pr_relation_factor_expression_parser_359_23_parse (galgas_scanner & lexique_var_) {  nt_simple_expression_parse (lexique_var_) ;  switch (select_expression_parser_3 (lexique_var_)) {    case 1 : {      } break ;    case 2 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3D_3D) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    case 3 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__21_3D) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    case 4 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C_3D) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    case 5 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E_3D) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    case 6 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    case 7 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;      nt_simple_expression_parse (lexique_var_) ;      } break ;    default :      break ;  }}//---------------------------------------------------------------------------*//                                                                           *//          Implementation of production rule 'simple_expression'            *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_simple_expression_expression_parser_478_25_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_term_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;}//---------------------------------------------------------------------------*void expression_parser::pr_simple_expression_expression_parser_478_25_parse (galgas_scanner & lexique_var_) {  nt_term_parse (lexique_var_) ;}//---------------------------------------------------------------------------*//                                                                           *//                 Implementation of production rule 'term'                  *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_term_expression_parser_500_12_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  nt_factor_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;}//---------------------------------------------------------------------------*void expression_parser::pr_term_expression_parser_500_12_parse (galgas_scanner & lexique_var_) {  nt_factor_parse (lexique_var_) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_522_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  GGS_lstring  var_cas_nomEntite ;  GGS_typeCplusPlusName  var_cas_nomCppEntite1 ;  nt_read_access_ (lexique_var_, var_cas_nomEntite, var_cas_nomCppEntite1, var_cas_outResultType, var_cas_ioVariablesMap) ;  var_cas_outExpression = GGS_typeVarInExpression::constructor_new (var_cas_nomCppEntite1) ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_522_14_parse (galgas_scanner & lexique_var_) {  nt_read_access_parse (lexique_var_) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_541_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;  nt_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_outExpression, var_cas_outResultType) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_541_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;  nt_expression_parse (lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_565_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;  GGS_typeExpression  var_cas_ifCondition ;  GGS_AC_galgasType  var_cas_operandType ;  nt_factor_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_ifCondition, var_cas_operandType) ;  var_cas_outExpression = GGS_typeTestComplement::constructor_new (var_cas_ifCondition) ;  ::routine_checkNotOperator (lexique_var_,  var_cas_operandType,  var_cas_outResultType) ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_565_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_not) ;  nt_factor_parse (lexique_var_) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_592_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;  var_cas_outExpression = GGS_typeTrueBool::constructor_new () ;  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_592_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_true) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_610_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;  var_cas_outExpression = GGS_typeFalseBool::constructor_new () ;  var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_610_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_false) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_628_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  GGS_lstring  var_cas_literalString ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_literalString.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  var_cas_outExpression = GGS_typeLiteralStringExpression::constructor_new (var_cas_literalString) ;  var_cas_outResultType = GGS_typeGalgas_string::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_628_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_647_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  GGS_luint  var_cas_literalInt ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;  var_cas_literalInt.defineAttribute (lexique_var_.ulongValue, lexique_var_) ;  var_cas_outExpression = GGS_typeLiteralUIntExpression::constructor_new (var_cas_literalInt) ;  var_cas_outResultType = GGS_typeGalgas_uint::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_647_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_666_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  GGS_lsint  var_cas_literalInt ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;  var_cas_literalInt.defineAttribute (lexique_var_.longValue, lexique_var_) ;  var_cas_outExpression = GGS_typeLiteralSIntExpression::constructor_new (var_cas_literalInt) ;  var_cas_outResultType = GGS_typeGalgas_sint::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_666_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_signed_5Fliteral_5Finteger) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_685_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  GGS_lchar  var_cas_literalChar ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;  var_cas_literalChar.defineAttribute (lexique_var_.charValue, lexique_var_) ;  var_cas_outExpression = GGS_typeLiteralCharExpression::constructor_new (var_cas_literalChar) ;  var_cas_outResultType = GGS_typeGalgas_char::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_685_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fchar) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_704_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &/* var_cas_ioEntitiesMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMapForUse */,                                GGS_typeVariablesMap  &/* var_cas_ioVariablesMap */,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;  var_cas_outExpression = GGS_typeHereExpression::constructor_new () ;  var_cas_outResultType = GGS_typeGalgas_location::constructor_new () ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_704_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_here) ;}//---------------------------------------------------------------------------*//                                                                           *//                Implementation of production rule 'factor'                 *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_725_14_ (galgas_scanner & lexique_var_,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeExpression  &var_cas_outExpression,                                GGS_AC_galgasType  &var_cas_outResultType) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;  switch (select_expression_parser_4 (lexique_var_)) {    case 1 : {      GGS_typeExpression  var_cas_expressionValue ;      GGS_AC_galgasType  var_cas_expressionType ;      nt_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expressionValue, var_cas_expressionType) ;      GGS_lstring  var_cas_methodName ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      var_cas_methodName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;      GGS_typeListeAttributsSemantiques  var_cas_accessorsTypeList ;      ::routine_handleReaderCall (lexique_var_,  var_cas_expressionType,  var_cas_methodName,  var_cas_accessorsTypeList,  var_cas_outResultType) ;      GGS_typeExpressionList  var_cas_expressionList ;      nt_output_expression_list_ (lexique_var_, var_cas_expressionList, var_cas_accessorsTypeList, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;      var_cas_outExpression = GGS_typeReaderCallInExpression::constructor_new (var_cas_expressionValue, var_cas_methodName, var_cas_expressionList) ;      } break ;    case 2 : {      GGS_lstring  var_cas_className ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;      var_cas_className.defineAttribute (lexique_var_.tokenString, lexique_var_) ;      GGS_lstring  var_cas_mClassMethodName ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      var_cas_mClassMethodName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;      GGS_AC_semanticsEntity  var_cas_entity ;      searchKey_M_semanticsEntitiesForUse (lexique_var_,                                      var_cas_ioEntitiesMap,                                      var_cas_className,                                      & var_cas_entity,                                      NULL) ;      { cPtr_typeEntiteType * ptrExtraire_ = dynamic_cast <cPtr_typeEntiteType *> (var_cas_entity.getPtr ()) ;        if (ptrExtraire_ == NULL) {          var_cas_outResultType.drop_operation () ;          if (var_cas_entity.getPtr () != NULL) {            TC_unique_dyn_array <C_string> message1_ (1 COMMA_HERE) ;            C_string message2_ ;            message1_ (0 COMMA_HERE) << cPtr_typeEntiteType::static_string_message_messageTypeEntite () ;            message2_ << var_cas_entity ()->message_messageTypeEntite () ;            var_cas_className.signalExtractError (lexique_var_, message1_, message2_) ;          }        }else{          macroValidPointer (ptrExtraire_) ;          var_cas_outResultType = ptrExtraire_->aDefType ;        }      }      GGS_typeListeAttributsSemantiques  var_cas_listeAttributsSemantiques ;      if (var_cas_outResultType.isBuilt ()) {        var_cas_outResultType ()->methode_handleConstructorCall (lexique_var_, var_cas_mClassMethodName, var_cas_listeAttributsSemantiques) ;      }      GGS_typeExpressionList  var_cas_expressionList ;      nt_output_expression_list_ (lexique_var_, var_cas_expressionList, var_cas_listeAttributsSemantiques, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap) ;      var_cas_outExpression = GGS_typeConstructorExpression::constructor_new (var_cas_className, var_cas_mClassMethodName, var_cas_expressionList) ;      } break ;    case 3 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;      GGS_lstring  var_cas_optionComponentName ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      var_cas_optionComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;      GGS_M_cli_options  var_cas_boolOptionsMap ;      GGS_M_cli_options  var_cas_uintOptionsMap ;      searchKey_M_optionComponents (lexique_var_,                                      var_cas_ioOptionsComponentsMapForUse,                                      var_cas_optionComponentName,                                      & var_cas_boolOptionsMap,                                      & var_cas_uintOptionsMap,                                      NULL) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;      GGS_lstring  var_cas_optionName ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      var_cas_optionName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;      if ((var_cas_boolOptionsMap.reader_hasKey (var_cas_optionName)).isBuiltAndTrue ()) {        var_cas_outExpression = GGS_typeBoolOption::constructor_new (var_cas_optionComponentName, var_cas_optionName) ;        var_cas_outResultType = GGS_typeGalgas_bool::constructor_new () ;      }else if ((var_cas_uintOptionsMap.reader_hasKey (var_cas_optionName)).isBuiltAndTrue ()) {        var_cas_outExpression = GGS_typeUIntOption::constructor_new (var_cas_optionComponentName, var_cas_optionName) ;        var_cas_outResultType = GGS_typeGalgas_uint::constructor_new () ;      }else{          var_cas_optionName.reader_location ().signalGGSSemanticError (lexique_var_, ((((((((GGS_string (true, "the '")) + (var_cas_optionComponentName.reader_value ()))) + (GGS_string (true, "' option component has no '")))) + (var_cas_optionName.reader_value ()))) + (GGS_string (true, "' option")))) ;      }      } break ;    default :      break ;  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;}//---------------------------------------------------------------------------*void expression_parser::pr_factor_expression_parser_725_14_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__5B) ;  switch (select_expression_parser_4 (lexique_var_)) {    case 1 : {      nt_expression_parse (lexique_var_) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      nt_output_expression_list_parse (lexique_var_) ;      } break ;    case 2 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      nt_output_expression_list_parse (lexique_var_) ;      } break ;    case 3 : {      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2E) ;      lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;      } break ;    default :      break ;  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__5D) ;}//---------------------------------------------------------------------------*//                                                                           *//             Implementation of production rule 'read_access'               *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_read_access_expression_parser_812_19_ (galgas_scanner & lexique_var_,                                GGS_lstring  &var_cas_nomVariable,                                GGS_typeCplusPlusName  &var_cas_nomCppEntite,                                GGS_AC_galgasType  &var_cas_typeEntite,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  var_cas_nomVariable.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  searchForReadOnlyAccess_typeVariablesMap (lexique_var_,                                  var_cas_ioVariablesMap,                                  var_cas_nomVariable,                                  & var_cas_typeEntite,                                  & var_cas_nomCppEntite,                                  NULL) ;}//---------------------------------------------------------------------------*void expression_parser::pr_read_access_expression_parser_812_19_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;}//---------------------------------------------------------------------------*//                                                                           *//        Implementation of production rule 'output_expression_list'         *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_output_expression_list_expression_parser_828_30_ (galgas_scanner & lexique_var_,                                GGS_typeExpressionList  &var_cas_outExpressionList,                                const GGS_typeListeAttributsSemantiques  &var_cas_inFormalAttributesList,                                GGS_M_semanticsEntitiesForUse  &var_cas_ioEntitiesMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMapForUse,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap) {  GGS_typeTypesList  var_cas_effectiveTypesList ;  var_cas_effectiveTypesList = GGS_typeTypesList::constructor_empty () ;  var_cas_outExpressionList = GGS_typeExpressionList::constructor_empty () ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_5 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;          GGS_typeExpression  var_cas_expression ;          GGS_AC_galgasType  var_cas_resultType ;          nt_expression_ (lexique_var_, var_cas_ioEntitiesMap, var_cas_ioOptionsComponentsMapForUse, var_cas_ioVariablesMap, var_cas_expression, var_cas_resultType) ;          GGS_location  var_cas_errorLocation ;          var_cas_errorLocation = GGS_location (lexique_var_) ;          var_cas_effectiveTypesList.addAssign_operation (var_cas_resultType, var_cas_errorLocation) ;          var_cas_outExpressionList.addAssign_operation (var_cas_expression) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  GGS_location  var_cas_endOfListLocation ;  var_cas_endOfListLocation = GGS_location (lexique_var_) ;  if (((var_cas_inFormalAttributesList.reader_length ()) < (var_cas_effectiveTypesList.reader_length ())).isBuiltAndTrue ()) {      var_cas_endOfListLocation.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "too much expressions")) ;  }else if (((var_cas_inFormalAttributesList.reader_length ()) > (var_cas_effectiveTypesList.reader_length ())).isBuiltAndTrue ()) {      var_cas_endOfListLocation.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "one or more expressions missing")) ;  }else{    GGS_typeListeAttributsSemantiques::element_type * operand_32296 = var_cas_inFormalAttributesList.getFirstItem () ;    GGS_typeTypesList::element_type * operand_32377 = var_cas_effectiveTypesList.getFirstItem () ;    while ((operand_32296 != NULL) && (operand_32377 != NULL)) {      macroValidPointer (operand_32296) ;      macroValidPointer (operand_32377) ;      ::routine_verifierCompatibiliteTypesSemantiques (lexique_var_,  operand_32296->mAttributType,  operand_32377->mType,  operand_32377->mEndOfExpressionLocation) ;      operand_32296 = operand_32296->getNextItem () ;      operand_32377 = operand_32377->getNextItem () ;    }  }}//---------------------------------------------------------------------------*void expression_parser::pr_output_expression_list_expression_parser_828_30_parse (galgas_scanner & lexique_var_) {  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_5 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__21) ;          nt_expression_parse (lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }}//---------------------------------------------------------------------------*//                                                                           *//Implementation of production rule 'parse_effective_input_parameters_list'  *//                                                                           *//---------------------------------------------------------------------------*void expression_parser::pr_parse_effective_input_parameters_list_expression_parser_874_45_ (galgas_scanner & lexique_var_,                                GGS_typeVariablesMap  &var_cas_ioVariablesMap,                                GGS_typeListeAttributsSemantiques  var_cas_inFormalArgumentsList,                                GGS_location  var_cas_inVarLocation,                                GGS_bool var_cas_inMapField) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;  GGS_L_nameWithType  var_cas_argumentsList ;  var_cas_argumentsList = GGS_L_nameWithType::constructor_empty () ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_6 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;          GGS_lstring  var_cas_typeName ;          GGS_lstring  var_cas_constantName ;          switch (select_expression_parser_7 (lexique_var_)) {            case 1 : {              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;              var_cas_typeName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;              var_cas_constantName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;              } break ;            case 2 : {              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;              var_cas_typeName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;              var_cas_constantName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;              } break ;            default :              break ;          }          var_cas_argumentsList.addAssign_operation (var_cas_typeName, var_cas_constantName) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;  ::routine_buildMapWithLocalConstants (lexique_var_,  var_cas_argumentsList,  var_cas_inFormalArgumentsList,  var_cas_ioVariablesMap,  var_cas_inVarLocation,  var_cas_inMapField) ;}//---------------------------------------------------------------------------*void expression_parser::pr_parse_effective_input_parameters_list_expression_parser_874_45_parse (galgas_scanner & lexique_var_) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__28) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {      switch (select_repeat_expression_parser_6 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3F_3F) ;          switch (select_expression_parser_7 (lexique_var_)) {            case 1 : {              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_type_5Fname) ;              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;              } break ;            case 2 : {              lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__2A) ;              } break ;            default :              break ;          }          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__29) ;}//---------------------------------------------------------------------------*