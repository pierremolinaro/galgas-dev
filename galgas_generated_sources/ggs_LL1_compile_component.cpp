//---------------------------------------------------------------------------*//                                                                           *//                   File 'ggs_LL1_compile_component.cpp'                    *//               Generated by version 0.14.0 (LL(1) grammar)                 *//                     january 13th, 2005, at 17h52'45"                      *//                                                                           *// This program is free software; you can redistribute it and/or modify it   *// under the terms of the GNU General Public License as published by the     *// Free Software Foundation.                                                 *//                                                                           *// This program is distributed in the hope it will be useful, but WITHOUT    *// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *// more details.                                                             *//                                                                           *//---------------------------------------------------------------------------*//--- START OF USER ZONE 1//--- END OF USER ZONE 1#include "files/C_text_file_write.h"#include "ggs_LL1_compile_component.h"//---------------------------------------------------------------------------*//                                                                           *//               Include directives generated by extern types                *//                                                                           *//---------------------------------------------------------------------------*#include "galgas_LL1_grammar.h"//--- START OF USER ZONE 2//--- END OF USER ZONE 2//---------------------------------------------------------------------------*//                                                                           *//           Implementation of production rule 'galgas_component'            *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_ (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap,                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.printMessage (((((GGS_string (true, "------ Include file '")) + (var_cas_fileName.reader_value ()))) + (GGS_string (true, "'\n")))) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_ (scanner_,                                  var_cas_ioLexiqueMapForUse,                                  var_cas_ioSemanticsComponentsMap,                                  var_cas_ioSyntaxComponentsMap,                                  var_cas_ioGrammarComponentsMap,                                  var_cas_ioOptionsComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_importLexique (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importLexique (scanner_,                                  var_cas_ioLexiqueMapForUse) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_importSyntax (galgas_scanner & lexique_var_,                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importSyntax (scanner_,                                  var_cas_ioSyntaxComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_importSemantics (galgas_scanner & lexique_var_,                                GGS_M_semanticsComponents  &var_cas_ioSemanticsComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importSemantics (scanner_,                                  var_cas_ioSemanticsComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_importGrammarForSemantics (galgas_scanner & lexique_var_,                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importGrammarForSemantics (scanner_,                                  var_cas_ioGrammarComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_87_24_importOptions (galgas_scanner & lexique_var_,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_include) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importOptions (scanner_,                                  var_cas_ioOptionsComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*//                                                                           *//           Implementation of production rule 'galgas_component'            *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_ (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */,                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  GGS_lstring  var_cas_fileName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.printMessage (((((GGS_string (true, "------ Compile file '")) + (var_cas_fileName.reader_value ()))) + (GGS_string (true, "'\n")))) ;  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_fileName.getLength () > 0) && (var_cas_fileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_fileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_compileFile (scanner_) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_fileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_importLexique (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_importSyntax (galgas_scanner & lexique_var_,                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_importSemantics (galgas_scanner & lexique_var_,                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_importGrammarForSemantics (galgas_scanner & lexique_var_,                                GGS_M_grammarComponents  &/* var_cas_ioGrammarComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_galgas_component_ggs_LL1_compile_component_165_24_importOptions (galgas_scanner & lexique_var_,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_compile) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*//                                                                           *//     Implementation of production rule 'parse_lexique_for_importing'       *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_lexique_for_importing_ggs_LL1_compile_component_217_35_ (galgas_scanner & lexique_var_,                                const GGS_lstring  &var_cas_inFileName,                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse) {  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_inFileName.getLength () > 0) && (var_cas_inFileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_inFileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importLexique (scanner_,                                  var_cas_ioLexiqueMapForUse) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_inFileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_lexique_for_importing_ggs_LL1_compile_component_217_35_parse (galgas_scanner & /* lexique_var_ */) {}//---------------------------------------------------------------------------*//                                                                           *//      Implementation of production rule 'parse_syntax_for_importing'       *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_syntax_for_importing_ggs_LL1_compile_component_232_34_ (galgas_scanner & lexique_var_,                                const GGS_lstring  &var_cas_inFileName,                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap) {  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_inFileName.getLength () > 0) && (var_cas_inFileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_inFileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importSyntax (scanner_,                                  var_cas_ioSyntaxComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_inFileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_syntax_for_importing_ggs_LL1_compile_component_232_34_parse (galgas_scanner & /* lexique_var_ */) {}//---------------------------------------------------------------------------*//                                                                           *//Implementation of production rule 'parse_semantics_component_for_importing'*//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_semantics_component_for_importing_ggs_LL1_compile_component_247_47_ (galgas_scanner & lexique_var_,                                const GGS_lstring  &var_cas_inFileName,                                GGS_M_semanticsComponents  &var_cas_ioSemanticsMapForUse) {  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_inFileName.getLength () > 0) && (var_cas_inFileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_inFileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importSemantics (scanner_,                                  var_cas_ioSemanticsMapForUse) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_inFileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_semantics_component_for_importing_ggs_LL1_compile_component_247_47_parse (galgas_scanner & /* lexique_var_ */) {}//---------------------------------------------------------------------------*//                                                                           *//Implementation of production rule 'parse_grammar_component_for_importing'  *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_262_45_ (galgas_scanner & lexique_var_,                                const GGS_lstring  &var_cas_inFileName,                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap) {  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_inFileName.getLength () > 0) && (var_cas_inFileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_inFileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importGrammarForSemantics (scanner_,                                  var_cas_ioGrammarComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_inFileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_grammar_component_for_importing_ggs_LL1_compile_component_262_45_parse (galgas_scanner & /* lexique_var_ */) {}//---------------------------------------------------------------------------*//                                                                           *// Implementation of production rule 'parse_option_component_for_importing'  *//                                                                           *//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_option_component_for_importing_ggs_LL1_compile_component_277_44_ (galgas_scanner & lexique_var_,                                const GGS_lstring  &var_cas_inFileName,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {  { galgas_scanner scanner_ (lexique_var_.getGalgasIOptr ()) ;    galgas_LL1_grammar grammar_ ;    C_string sourceFileName ;    if ((var_cas_inFileName.getLength () > 0) && (var_cas_inFileName (0 COMMA_HERE) != '/')) {      sourceFileName << lexique_var_.getSourceFile ().getPath () << '/' ;    }    sourceFileName << var_cas_inFileName ;    try{      scanner_.resetAndLoadSourceFromFile (sourceFileName) ;      grammar_.startParsing_importOptions (scanner_,                                  var_cas_ioOptionsComponentsMap) ;    }catch (const C_TextReadException & inFileReadError) {      var_cas_inFileName.signalSemanticError (lexique_var_, inFileReadError.what ()) ;    }  }}//---------------------------------------------------------------------------*void ggs_LL1_compile_component::pr_parse_option_component_for_importing_ggs_LL1_compile_component_277_44_parse (galgas_scanner & /* lexique_var_ */) {}//---------------------------------------------------------------------------*