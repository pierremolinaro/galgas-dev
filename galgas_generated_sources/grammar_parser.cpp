//---------------------------------------------------------------------------*//                                                                           *//                        File 'grammar_parser.cpp'                          *//               Generated by version 0.14.0 (LL(1) grammar)                 *//                     january 28th, 2005, at 19h39'20"                      *//                                                                           *// This program is free software; you can redistribute it and/or modify it   *// under the terms of the GNU General Public License as published by the     *// Free Software Foundation.                                                 *//                                                                           *// This program is distributed in the hope it will be useful, but WITHOUT    *// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *// more details.                                                             *//                                                                           *//---------------------------------------------------------------------------*//--- START OF USER ZONE 1//--- END OF USER ZONE 1#include "files/C_text_file_write.h"#include "grammar_parser.h"//--- START OF USER ZONE 2//--- END OF USER ZONE 2//---------------------------------------------------------------------------*//                                                                           *//           Implementation of production rule 'galgas_component'            *//                                                                           *//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_ (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  GGS_lstring  var_cas_grammarName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  var_cas_grammarName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  GGS_lstring  var_cas_grammarClass ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  var_cas_grammarClass.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;  GGS_lstring  var_cas_lexiqueName ;  nt_get_lexique_infos_ (lexique_var_, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;  GGS_string_set var_cas_classesNamesSet ;  var_cas_classesNamesSet = GGS_string_set::constructor_empty () ;  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList ;  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar::constructor_empty () ;  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar ;  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_empty () ;  GGS_M_optionComponents  var_cas_optionComponentsMap ;  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty () ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            GGS_lstring  var_cas_optionComponentName ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            var_cas_optionComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;            GGS_M_cli_options  var_cas_boolOptionsMap ;            GGS_M_cli_options  var_cas_uintOptionsMap ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                searchKey_M_optionComponents (lexique_var_,                                                var_cas_ioOptionsComponentsMap,                                                var_cas_optionComponentName,                                                & var_cas_boolOptionsMap,                                                & var_cas_uintOptionsMap,                                                NULL) ;                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                GGS_lstring  var_cas_fileName ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty () ;                nt_parse_option_component_for_importing_ (lexique_var_, var_cas_fileName, var_cas_importedOptionComponentsMap) ;                searchKey_M_optionComponents (lexique_var_,                                                var_cas_importedOptionComponentsMap,                                                var_cas_optionComponentName,                                                & var_cas_boolOptionsMap,                                                & var_cas_uintOptionsMap,                                                NULL) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            insertKey_M_optionComponents (lexique_var_,                                            var_cas_optionComponentsMap,                                            var_cas_optionComponentName,                                            var_cas_boolOptionsMap,                                            var_cas_uintOptionsMap,                                            NULL) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            GGS_lstring  var_cas_syntaxComponentName ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            var_cas_syntaxComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                GGS_lstring  var_cas_fileName ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents::constructor_empty () ;                nt_parse_syntax_for_importing_ (lexique_var_, var_cas_fileName, var_cas_syntaxComponentsMap) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;            GGS_lstring  var_cas_importedLexiqueComponentName ;            GGS_string_set var_cas_importedClassesNamesSet ;            searchKey_M_syntaxComponents (lexique_var_,                                            var_cas_syntaxComponentsMap,                                            var_cas_syntaxComponentName,                                            & var_cas_importedNonterminalSymbolsMap,                                            & var_cas_importedProductionRulesList,                                            & var_cas_importedLexiqueComponentName,                                            & var_cas_importedClassesNamesSet,                                            NULL) ;            if (((var_cas_lexiqueName.reader_value ()) != (var_cas_importedLexiqueComponentName.reader_value ())).isBuiltAndTrue ()) {                var_cas_syntaxComponentName.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "this component does not use the previously declared lexique")) ;            }            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedClassesNamesSet, var_cas_syntaxComponentName) ;            GGS_M_nonTerminalSymbolsForGrammar::element_type * operand_6800 = var_cas_importedNonterminalSymbolsMap.getFirstItem () ;            while (operand_6800 != NULL) {              macroValidPointer (operand_6800) ;              if ((var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (operand_6800->mKey)).isBuiltAndTrue ()) {                GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;                searchKey_M_nonTerminalSymbolsForGrammar (lexique_var_,                                                var_cas_nonterminalSymbolsMapForGrammar,                                                operand_6800->mKey,                                                & var_cas_altSignatureMap,                                                NULL) ;                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_7143 = var_cas_altSignatureMap.getFirstItem () ;                while (operand_7143 != NULL) {                  macroValidPointer (operand_7143) ;                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp ;                  var_cas_temp = operand_6800->mInfo.mNonterminalSymbolParametersMap ;                  GGS_L_signature_ForGrammarComponent  var_cas_importedAltSignature ;                  searchKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                                  var_cas_temp,                                                  operand_7143->mKey,                                                  & var_cas_importedAltSignature,                                                  NULL) ;                  ::routine_checkSignature_ForGrammarComponent (lexique_var_,  var_cas_importedAltSignature,  operand_7143->mInfo.mFormalParametersList,  operand_7143->mKey.reader_location ()) ;                  operand_7143 = operand_7143->getNextItem () ;                }                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_7608 = operand_6800->mInfo.mNonterminalSymbolParametersMap.getFirstItem () ;                while (operand_7608 != NULL) {                  macroValidPointer (operand_7608) ;                  if (((operand_7608->mKey.reader_value ()) != (GGS_string (true, "parse"))).isBuiltAndTrue ()) {                    searchKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                                    var_cas_altSignatureMap,                                                    operand_7608->mKey,                                                    NULL,                                                    NULL) ;                  }                  operand_7608 = operand_7608->getNextItem () ;                }              }else{                insertKey_M_nonTerminalSymbolsForGrammar (lexique_var_,                                                var_cas_nonterminalSymbolsMapForGrammar,                                                operand_6800->mKey,                                                operand_6800->mInfo.mNonterminalSymbolParametersMap,                                                NULL) ;              }              operand_6800 = operand_6800->getNextItem () ;            }            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  GGS_lstring  var_cas_startSymbolName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  var_cas_startSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty () ;  GGS_lstring  var_cas_altName ;  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        GGS_L_signature_ForGrammarComponent  var_cas_signature ;        nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;        insertKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                        var_cas_grammarAltMap,                                        var_cas_altName,                                        var_cas_signature,                                        NULL) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;  GGS_luint  var_cas_startSymbolIndex ;  searchKey_M_nonTerminalSymbolsForGrammar (lexique_var_,                                  var_cas_nonterminalSymbolsMapForGrammar,                                  var_cas_startSymbolName,                                  & var_cas_startSymbolAltMap,                                  & var_cas_startSymbolIndex) ;  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_9068 = var_cas_startSymbolAltMap.getFirstItem () ;  while (operand_9068 != NULL) {    macroValidPointer (operand_9068) ;    GGS_L_signature_ForGrammarComponent  var_cas_altMap ;    searchKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                    var_cas_grammarAltMap,                                    operand_9068->mKey,                                    & var_cas_altMap,                                    NULL) ;    ::routine_checkSignature_ForGrammarComponent (lexique_var_,  operand_9068->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (lexique_var_)) ;    operand_9068 = operand_9068->getNextItem () ;  }  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_9353 = var_cas_grammarAltMap.getFirstItem () ;  while (operand_9353 != NULL) {    macroValidPointer (operand_9353) ;    searchKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                    var_cas_startSymbolAltMap,                                    operand_9353->mKey,                                    NULL,                                    NULL) ;    operand_9353 = operand_9353->getNextItem () ;  }  GGS_location  var_cas_endOfSourceFile ;  var_cas_endOfSourceFile = GGS_location (lexique_var_) ;  if (var_cas_grammarName.isBuilt () &&      var_cas_grammarClass.isBuilt () &&      var_cas_startSymbolIndex.isBuilt () &&      var_cas_lexiqueName.isBuilt () &&      var_cas_endOfSourceFile.isBuilt () &&      var_cas_terminalSymbolMap.isBuilt () &&      var_cas_syntaxComponentsList.isBuilt () &&      var_cas_nonterminalSymbolsMapForGrammar.isBuilt ()) {    ::analyzeGrammar (lexique_var_,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  var_cas_endOfSourceFile,  var_cas_terminalSymbolMap,  var_cas_syntaxComponentsList,  var_cas_nonterminalSymbolsMapForGrammar) ;  }  insertKey_M_grammarComponents (lexique_var_,                                  var_cas_ioGrammarComponentsMap,                                  var_cas_grammarName,                                  var_cas_startSymbolAltMap,                                  var_cas_lexiqueName,                                  var_cas_optionComponentsMap,                                  NULL) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_importLexique (galgas_scanner & lexique_var_,                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  nt_get_lexique_infos_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_option_component_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_syntax_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        nt_formal_arguments_list_parse (lexique_var_) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_importSyntax (galgas_scanner & lexique_var_,                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  nt_get_lexique_infos_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_option_component_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_syntax_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        nt_formal_arguments_list_parse (lexique_var_) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_importSemantics (galgas_scanner & lexique_var_,                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  nt_get_lexique_infos_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_option_component_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_syntax_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        nt_formal_arguments_list_parse (lexique_var_) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_importGrammarForSemantics (galgas_scanner & lexique_var_,                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  GGS_lstring  var_cas_grammarName ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  var_cas_grammarName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  GGS_lstring  var_cas_lexiqueName ;  nt_get_lexique_infos_getLexiqueName (lexique_var_, var_cas_lexiqueName) ;  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty () ;  GGS_M_optionComponents  var_cas_optionComponentsMap ;  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty () ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            GGS_lstring  var_cas_optionComponentName ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            var_cas_optionComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;            GGS_M_cli_options  var_cas_boolOptionsMap ;            GGS_M_cli_options  var_cas_uintOptionsMap ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                searchKey_M_optionComponents (lexique_var_,                                                var_cas_optionComponentsMap,                                                var_cas_optionComponentName,                                                & var_cas_boolOptionsMap,                                                & var_cas_uintOptionsMap,                                                NULL) ;                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                GGS_lstring  var_cas_fileName ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty () ;                nt_parse_option_component_for_importing_ (lexique_var_, var_cas_fileName, var_cas_importedOptionComponentsMap) ;                searchKey_M_optionComponents (lexique_var_,                                                var_cas_importedOptionComponentsMap,                                                var_cas_optionComponentName,                                                & var_cas_boolOptionsMap,                                                & var_cas_uintOptionsMap,                                                NULL) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            insertKey_M_optionComponents (lexique_var_,                                            var_cas_optionComponentsMap,                                            var_cas_optionComponentName,                                            var_cas_boolOptionsMap,                                            var_cas_uintOptionsMap,                                            NULL) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_syntax_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  GGS_lstring  var_cas_altName ;  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        GGS_L_signature_ForGrammarComponent  var_cas_signature ;        nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;        insertKey_M_nonterminalSymbolAltsForGrammar (lexique_var_,                                        var_cas_grammarAltMap,                                        var_cas_altName,                                        var_cas_signature,                                        NULL) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  insertKey_M_grammarComponents (lexique_var_,                                  var_cas_ioGrammarComponentsMap,                                  var_cas_grammarName,                                  var_cas_grammarAltMap,                                  var_cas_lexiqueName,                                  var_cas_optionComponentsMap,                                  NULL) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*void grammar_parser::pr_galgas_component_grammar_parser_91_24_importOptions (galgas_scanner & lexique_var_,                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;  nt_get_lexique_infos_parse (lexique_var_) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;        switch (select_grammar_parser_1 (lexique_var_)) {          case 1 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_2 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_option_component_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          case 2 : {            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;            switch (select_grammar_parser_3 (lexique_var_)) {              case 1 : {                } break ;              case 2 : {                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;                nt_parse_syntax_for_importing_parse (lexique_var_) ;                } break ;              default :                break ;            }            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;            } break ;          default :            break ;        }      switch (select_repeat_grammar_parser_0 (lexique_var_)) {        case 2 : {          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;  { bool syntaxRepeat = true ;    while (syntaxRepeat) {        nt_formal_arguments_list_parse (lexique_var_) ;      switch (select_repeat_grammar_parser_4 (lexique_var_)) {        case 2 : {          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;          } break ;        default :          syntaxRepeat = false ;          break ;      }    }  }  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;}//---------------------------------------------------------------------------*