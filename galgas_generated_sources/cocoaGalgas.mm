//---------------------------------------------------------------------------*//                                                                           *//                          File 'cocoaGalgas.mm'                            *//               Generated by version 0.14.0 (LL(1) grammar)                 *//                     january 13th, 2005, at 17h52'35"                      *//                                                                           *// This program is free software; you can redistribute it and/or modify it   *// under the terms of the GNU General Public License as published by the     *// Free Software Foundation.                                                 *//                                                                           *// This program is distributed in the hope it will be useful, but WITHOUT    *// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *// more details.                                                             *//                                                                           *//---------------------------------------------------------------------------*//--- START OF USER ZONE 1//--- END OF USER ZONE 1#import <Cocoa/Cocoa.h>#include "cocoa_wrapper_for_galgas.h"#include "command_line_interface/C_cli_options_group.h"#include "command_line_interface/C_generic_cli_options.h"#include "galgas/C_galgas_null_io.h"#include "galgas_scanner.h"#include "galgas_cli_options.h"//--- START OF USER ZONE 2//--- END OF USER ZONE 2//---------------------------------------------------------------------------*//                                                                           *//                         Global static variables                           *//                                                                           *//---------------------------------------------------------------------------*static C_generic_cli_options gGenericOptions (false) ;static galgas_cli_options gOption0 ;static C_cli_options_group gCommandLineOptions (& gGenericOptions, & gOption0, NULL) ;static C_galgas_io_parameters IOparameters (& gCommandLineOptions) ;static C_galgas_null_io gNullIO (IOparameters) ;static galgas_scanner gScanner (& gNullIO) ;static NSMutableArray * gColorArray ;//---------------------------------------------------------------------------*//                                                                           *//                B O O L   O P T I O N S   R O U T I N E S                  *//                                                                           *//---------------------------------------------------------------------------*sint32 getBoolOptionsCount (void) {  return gCommandLineOptions.getBoolOptionsCount () ;}bool getBoolOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getBoolOptionValue (inIndex COMMA_THERE) ;}void setBoolOptionValue (const sint32 inIndex, const bool inValue COMMA_LOCATION_ARGS) {  gCommandLineOptions.setBoolOptionValue (inIndex, inValue COMMA_THERE) ;}char getBoolOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {  return gCommandLineOptions.getBoolOptionChar (inIndex COMMA_THERE) ;}const char * getBoolOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getBoolOptionString (inIndex COMMA_THERE) ;}const char * getBoolOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getBoolOptionDescription (inIndex COMMA_THERE) ;}//---------------------------------------------------------------------------*//                                                                           *//    U N S I G N E D   I N T E G E R   O P T I O N S   R O U T I N E S      *//                                                                           *//---------------------------------------------------------------------------*sint32 getUIntOptionsCount (void) {  return gCommandLineOptions.getUintOptionsCount () ;}uint32 getUIntOptionDefaultValue (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getUintOptionDefaultValue (inIndex COMMA_THERE) ;}uint32 getUIntOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getUintOptionValue (inIndex COMMA_THERE) ;}void setUIntOptionValue (const sint32 inIndex, const uint32 inValue COMMA_LOCATION_ARGS) {  gCommandLineOptions.setUintOptionValue (inIndex, inValue COMMA_THERE) ;}char getUIntOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {  return gCommandLineOptions.getUintOptionChar (inIndex COMMA_THERE) ;}const char * getUIntOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getUintOptionString (inIndex COMMA_THERE) ;}const char * getUIntOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getUintOptionDescription (inIndex COMMA_THERE) ;}//---------------------------------------------------------------------------*//                                                                           *//              S T R I N G   O P T I O N S   R O U T I N E S                *//                                                                           *//---------------------------------------------------------------------------*sint32 getStringOptionsCount (void) {  return gCommandLineOptions.getStringOptionsCount () ;}C_string getStringOptionValue (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getStringOptionValue (inIndex COMMA_THERE) ;}void setStringOptionValue (const sint32 inIndex, const C_string & inValue COMMA_LOCATION_ARGS) {  gCommandLineOptions.setStringOptionValue (inIndex, inValue COMMA_THERE) ;}char getStringOptionChar (const sint32 inIndex COMMA_LOCATION_ARGS)  {  return gCommandLineOptions.getStringOptionChar (inIndex COMMA_THERE) ;}const char * getStringOptionString (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getStringOptionString (inIndex COMMA_THERE) ;}const char * getStringOptionDescription (const sint32 inIndex COMMA_LOCATION_ARGS) {  return gCommandLineOptions.getStringOptionDescription (inIndex COMMA_THERE) ;}//---------------------------------------------------------------------------*//                                                                           *//                            Command line tool                              *//                                                                           *//---------------------------------------------------------------------------*const char * getCommandLineInterfaceToolName (void) {  return "galgas" ;}//---------------------------------------------------------------------------*//                                                                           *//                            Lexique interface                              *//                                                                           *//---------------------------------------------------------------------------*sint32 getStylesCount (void) {  return galgas_scanner::getStylesCount () ;}const char * getStyleName (const sint32 inIndex) {  return galgas_scanner::getStyleName (inIndex) ;}void scanThenGetStyledRangeArray (const char * inSourceString,                                  const char * inSourceFileName,                                  TC_unique_grow_array <C_styledRange> & ioStyledRangeArray,                                  const sint32 inAffectedRangeLocation,                                  const sint32 inAffectedRangeLength,                                  const sint32 inReplacementStringLength,                                  sint32 & outFirstIndexToRedraw,                                  sint32 & outLastIndexToRedraw,                                  sint32 & outEraseRangeStart,                                  sint32 & outEraseRangeEnd) {  gScanner.resetAndLoadSourceFromText (inSourceString, inSourceFileName) ;  gScanner.scanThenGetStyledRangeArray (ioStyledRangeArray,                                        inAffectedRangeLocation,                                        inAffectedRangeLength,                                        inReplacementStringLength,                                        outFirstIndexToRedraw,                                        outLastIndexToRedraw,                                        outEraseRangeStart,                                        outEraseRangeEnd) ;}void initializeTextColors (NSString * inGGS_colors) {  NSUserDefaults * defaults = [NSUserDefaults standardUserDefaults] ;   gColorArray = [NSMutableArray arrayWithCapacity: getStylesCount ()] ;  [gColorArray retain] ;  for (int i=0 ; i<getStylesCount () ; i++) {    NSString * name = [NSString stringWithFormat: inGGS_colors, i] ;    NSData * colorData = [defaults dataForKey:name] ;    if (colorData != nil) {      NSColor * color = (NSColor *) [NSUnarchiver unarchiveObjectWithData: colorData] ;      [gColorArray addObject: color] ;    }else{      [gColorArray addObject: [NSColor blackColor]] ;    }  }}NSColor * getColor (const sint32 inIndex) {  return [gColorArray objectAtIndex: inIndex] ;}void changeColor (const sint32 inIndex, NSColor * inNewColor) {  [gColorArray replaceObjectAtIndex: inIndex withObject: inNewColor] ;}//---------------------------------------------------------------------------*