semantics testsuite_listmap :

list @aList {
  @string mString ;
  @uint mInt ;
}

listmap @myListMap (@aList) ;

routine testsuite_listmap :
  message "*************************************** begin of listmap\n" ;
  @myListMap m [emptyMap] ;
  m += !"d" !"g" !37 ;
  m += !"a" !"b" !23 ;
  m += !"c" !"f" !11 ;
  m += !"a" !"c" !98 ;
  log m ;
  @uint c := [m count] ;
  log c ;
  @stringset s := [m allKeys] ;
  log s ;
  @stringlist sl := [m keyList] ;
  log sl ;
  @aList aList := [m listForKey !"a"] ;
  log aList ;
  message "--- test .= operator listmap\n" ;
  @myListMap m2 [emptyMap] ;
  m2 += !"b" !"z" !9 ;
  m2 += !"a" !"q" !14 ;
  m .= m2 ;
  log m ;
  message "--- test . operator listmap\n" ;
  m2 := [@myListMap emptyMap] ;
  m2 += !"b" !"w" !7 ;
  m2 += !"e" !"r" !2 ;
  m2 += !"b" !"x" !19 ;
  @myListMap mm := m . m2 ;
  log mm ;
  message "--- test foreach for listmap\n" ;
  foreach m do
    log key ;
    log mList ;
  end foreach ;
end routine ;

end semantics ;
