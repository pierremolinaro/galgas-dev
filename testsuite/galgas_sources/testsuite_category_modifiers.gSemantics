semantics testsuite_category_modifiers :

routine testsuite_category_modifiers :
  message "*************************************** begin of category modifier test\n" ;
  @TestCategoryModifier v [new !1 !"Hello"] ;
  @uint u := 2 ;
  @string s := " World" ;
  [!?v modifier2 !?u !s] ;
  log u, v ;
  @overridingTestCategoryModifier w [new !1 !"" !"" !2] ;
  [!?w m] ;
end routine ;

abstract class @abstractTestCategoryModifier {
  @uint mInteger ;
}

class @TestCategoryModifier extends @abstractTestCategoryModifier {
  @string mString ;
}

modifier @TestCategoryModifier modifier3 ??@uint inArg :
  [!?mString appendSpacesUntilColumn!inArg] ;
end modifier ;


modifier @TestCategoryModifier modifier1 ?!@uint ioArg :
  mInteger := mInteger + ioArg ;
  ioArg ++ ;
end modifier ;


class @overridingTestCategoryModifier extends @abstractOverridingTestCategoryModifier {
  @uint mOtherInteger ;
}


modifier @TestCategoryModifier modifier2 ?!@uint ioArg ??@string inS :
  [!?self modifier1 !?ioArg] ;
  mString .= inS ;
end modifier ;

abstract modifier @abstractTestCategoryModifier m ;

override modifier @TestCategoryModifier m : end modifier ;

override modifier @overridingTestCategoryModifier m : end modifier ;

override abstract modifier @abstractOverridingTestCategoryModifier m ;

abstract class @abstractOverridingTestCategoryModifier extends @TestCategoryModifier {
  @string mOtherString ;
}

end semantics ;
