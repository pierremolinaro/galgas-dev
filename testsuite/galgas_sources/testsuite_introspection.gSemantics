semantics testsuite_introspection :

#-----------------------------------------------------------------------------

class @A {}
class @B extends @A {}

#-----------------------------------------------------------------------------

routine testsuite_introspection :
message "*************************************** begin of introspection test\n" ;
#--- List of types
  const @typelist typeList := [@type typeList] ;
  message "--- Type list (" . [[typeList length] string] . " types)\n" ;
  foreach typeList do
    message "  @" . [mValue name] . "\n" ;
  end foreach ;
#--- List of functions
  const @functionlist functionList := [@function functionList] ;
  message "--- Function list (" . [[functionList length] string]
  . " function" . if [functionList length] > 1 then "s" else "" end . ")\n" ;
  foreach functionList do
    @string s := "" ;
    foreach [mValue formalParameterTypeList]
    do s .= "?@" . [mValue name] ;
    between s .= " " ;
    end foreach ;
    log "mValue" : mValue ;
    message [mValue description] . "  " . [mValue name] . " [" . s . "] -> @" . [[mValue resultType] name] . "\n" ;
  end foreach ;
  const @bool b1 := [@function isFunctionDefined !"foo"] ;
  const @bool b2 := [@function isFunctionDefined !"functionTest"] ;
  message "Function 'foo' exists:" . [b1 cString] . "\n" ;
  message "Function 'functionTest' exists:" . [b2 cString] . "\n" ;
#--- Introspection of an @uint
  const @uint x := 2 ;
  @object object := [x object] ;
  log object ;
  const @uint y := (object to @uint error here : "internal error") ;
  log y ;
#--- Type
#  @type t := [x dynamicType] ;
#  log t ;
#  @A a := [@B new] ;
#  t := [a dynamicType] ;
#  log t ;
#--- Function invocation
  @function f := [@function functionWithName !"functionTest"] ;
  @objectlist arguments [emptyList] ;
  arguments += ![2 object] ;
  arguments += ![6 object] ;
  const @object result := [f invoke !arguments !here] ;
  log result ;
end routine ;

#-----------------------------------------------------------------------------

end semantics ;
