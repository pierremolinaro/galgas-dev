semantics testsuite_type_categories :

routine testsuite_type_categories :
  message "*************************************** begin of type category test\n" ;
  log "Square of 7" : [7L square] ;
  @uintlist aList [emptyList] ;
  aList += !1 ;
  aList += !2 ;
  aList += !3 ;
  aList += !4 ;
  log "Sum 1 + 2 + 3 + 4" : [aList sum] ;
  log "Hello !" : [[@lstring new !"Hello" !here] op] ;
  @uint64 v ;
  [7L square ?v] ;
  log v ;
  @uint u ;
  [aList sum ?u] ;
  log u ;
  @string s ;
  [[@lstring new !"Hello" !here] op ?s] ;
  log s ;
  @lstring ls [new !"Hello" ! here] ;
  [!?ls appendInt !3] ;
  log ls ;
  [!?aList appendSquare!9] ;
  log aList ;
  @uint64list aList64 [listWithValue !7L] ;
  [!?aList64 prependSquare !5L] ;
end routine ;

#----------- Category readers
reader @uint64 square -> @uint64 outResult :
  outResult := selfcopy * selfcopy ;
end reader ;

reader @uintlist sum -> @uint outResult :
  outResult := 0 ;
  foreach selfcopy do
    outResult := outResult + mValue ;
  end foreach ;
end reader ;

reader @lstring op -> @string outResult :
  outResult := string . " !" ;
end reader ;

#------------ Category methods
method @uint64 square !@uint64 outResult :
  outResult := selfcopy * selfcopy ;
end method ;

method @uintlist sum !@uint outResult :
  outResult := 0 ;
  foreach selfcopy do
    outResult := outResult + mValue ;
  end foreach ;
end method ;

method @lstring op !@string outResult :
  outResult := string . " !" ;
end method ;

#------------ Category modifiers
modifier @lstring appendInt ??@uint inValue :
  string .= [inValue string] ;
end modifier ;

modifier @uintlist appendSquare ??@uint inValue :
  self += !inValue * inValue ;
end modifier ;

modifier @uint64list prependSquare ??@uint64 inValue :
  [!?self prependValue ![inValue square]] ;
end modifier ;

modifier @string concatList ??@stringlist inList :
  foreach inList do
    self .= mValue ;
  end foreach ;
end modifier ;

modifier @uint increment :
  self ++ ;
end modifier ;

end semantics ;
