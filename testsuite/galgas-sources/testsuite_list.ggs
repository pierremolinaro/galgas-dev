

extern proc testsuite_hand_coded ()

list @myList %equatable {
  public let @string mValue
}

proc testsuite_list() {
  var strList = @myList []
  !?strList.append ("a")
  !?strList.append ("b")
  !?strList.append ("c")
  !?strList.append ("d")
  println ("*************************************** begin of list direct access")
  var @string s = strList.mValueAtIndex (0)
  log s
  s = strList.mValueAtIndex (1)
  log s
  s = strList.mValueAtIndex (2)
  log s
  s = strList.mValueAtIndex (3)
  log s
  !?strList.setMValueAtIndex ("z", !3)
  log strList
  println ("--- test .= operator on list")
  strList += strList
  log s
  println ("*************************************** begin of list compare")
  let aList = @myList [.init ("az")]
  let bList = @myList [.init ("az")]
  let @bool comp = aList == bList
  log comp
  println ("*************************************** begin of collection value")
  var s1 = @stringlist [.init ("a")]
  !?s1.append ("b")
  var s2 = @stringlist [.init ("c")]
  !?s2.append ("d")
  s2 += [.init ("e")]
  let str = s1 + s2
  log str
  let str2 = @stringlist [.init ("a"), .init ("b"), .init ("c"), .init ("d"), .init ("e")]
  log str2
}

