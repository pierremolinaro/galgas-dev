

map @aMap {
  public let @uint value
  %insertSetter insertKey %errorMessage "the '%K' key is already inserted"
  %searchMethod searchKey %errorMessage "the '%K' key is not inserted"
  %removeSetter removeKey %errorMessage "the '%K' key is not inserted"
}

proc testsuite_map() {
  println ("*************************************** begin of map")
  var @aMap m = []
  !?m.insertKey (.new (!"g", !.here), !37)
  log m
  !?m.setValueForKey (!56, !"g")
  log m
  var mm = @aMap.mapWithMapToOverride (!m)
  log mm
  var @uint v
  mm.searchKey (@lstring.new (!"g", !.here), ?v)
  log v # Displays 56
  !?mm.insertKey (.new (!"g", !.here), !11)
  log mm
  mm.searchKey (@lstring.new (!"g", !.here), ?v)
  log v # Displays 11
  m = mm.overriddenMap
  log m
  let @location loc = m.locationForKey (!"g")
  log loc
#---
  var @aMap otherMap = [
    "A".nowhere, 1 :
    "B".nowhere, 2 :
    "C".nowhere, 3 :
    "D".nowhere, 4 :
    "E".nowhere, 5 :
    "F".nowhere, 6 :
    "G".nowhere, 7 :
    "H".nowhere, 8 :
    "I".nowhere, 9 :
    "K".nowhere, 10 :
    "L".nowhere, 11 :
    "M".nowhere, 12 :
    "N".nowhere, 13 :
    "O".nowhere, 14 :
    "P".nowhere, 15 :
    "R".nowhere, 16 :
    "S".nowhere, 17 :
    "T".nowhere, 18 :
    "U".nowhere, 19 :
    "V".nowhere, 20 :
    "W".nowhere, 21 :
    "X".nowhere, 22 :
    "Y".nowhere, 23 :
    "Z".nowhere, 24 :
    "a".nowhere, 25 :
    "b".nowhere, 26 :
    "c".nowhere, 27 :
    "d".nowhere, 28 :
    "e".nowhere, 29 :
    "f".nowhere, 30 :
    "g".nowhere, 31 :
    "h".nowhere, 32 :
    "i".nowhere, 33 :
    "j".nowhere, 34 :
    "k".nowhere, 35 :
    "l".nowhere, 36 :
    "m".nowhere, 37 :
    "n".nowhere, 38 :
    "o".nowhere, 39 :
    "p".nowhere, 40 :
    "q".nowhere, 41 :
    "r".nowhere, 42 :
    "s".nowhere, 43 :
    "t".nowhere, 44 :
    "u".nowhere, 45 :
    "v".nowhere, 46 :
    "w".nowhere, 47 :
    "x".nowhere, 48 :
    "y".nowhere, 49 :
    "z".nowhere, 50
  ]
  for e in otherMap do
    println ("  key '" + e.lkey + "', value: " + e.value)
  end
  for key in otherMap.keyList do
    !?otherMap.removeKey (!key.mValue, ?*)
  end
}

