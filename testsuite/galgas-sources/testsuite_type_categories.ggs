

proc testsuite_type_categories() {
  println ("*************************************** begin of type extension test")
  log "Square of 7" : 7 .uint64.square
  var aList = @uintlist []
  !?aList.append (1)
  !?aList.append (2)
  !?aList.append (3)
  !?aList.append (4)
  log "Sum 1 + 2 + 3 + 4" : aList.sum
  log "Hello !" : @lstring.init (!"Hello", !.here).op
  let @uint64 v
  let cst = 7
  cst.uint64.square (?v)
  log v
  let @uint u
  aList.sum (?u)
  log u
  let @string s
  let strcst = @lstring.init (!"Hello", !.here) ; strcst.op (?s)
  log s
  var ls = @lstring.init (!"Hello", !.here)
  !?ls.appendInt (!3)
  log ls
  !?aList.appendSquare (9)
  log aList
  var aList64 = @uint64list [.init (7)]
  !?aList64.prependSquare (!5)
}

//---------- Extension readers
func @uint64.square() -> @uint64 {
  result = self * self
}

func @uintlist.sum() -> @uint {
  result = 0
  for (mValue) in self do
    result = result + mValue
  end
}

func @lstring.op() -> @string {
  result = self.string + " !"
}

//----------- Extension methods
proc @uint64.square (!@uint64 outResult) {
  outResult = self * self
}

proc @uintlist.sum (!@uint outResult) {
  outResult = 0
  for (mValue) in self do
    outResult = outResult + mValue
  end
}

proc @lstring.op (!@string outResult) {
  outResult = self.string + " !"
}

//----------- Extension setters
mutating proc @lstring.appendInt (?let@uint inValue) {
  self.string += inValue.string
}

mutating proc @uintlist.appendSquare (?let@uint inValue) {
  !?self.append (inValue * inValue)
}

mutating proc @uint64list.prependSquare (?let@uint64 inValue) {
  !?self.insertAtIndex (inValue.square, !0)
}

mutating proc @string.concatList (?let@stringlist inList) {
  for (mValue) in inList do
    self += mValue
  end
}

mutating proc @uint64.increment() {
  self += 1
}

//---------------------------------------------------------------------------*

#abstract class @toto { }
#class @toto1 : @toto { }
#abstract class @toto2 : @toto1 { }
#class @toto3 : @toto2 { }
#
#override abstract func @toto2.r() -> @uint
#override func @toto3.r() -> @uint result { result = 0 }
#override func @toto1.r() -> @uint result { result = 0 }
#func @toto1.rr() -> @uint result { result = 0 }
#abstract func @toto.r() -> @uint


