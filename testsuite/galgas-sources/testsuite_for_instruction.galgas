

proc testsuite_for_instruction {
  message "*************************************** begin of for instruction test 1\n"
  var strList = @stringlist {}
  strList += !"a"
  strList += !"b"
  strList += !"c"
  strList += !"d"
  for (s) in strList 
  before
    message "  before\n"
  do
    message "  do '" + s + "'\n"
  between
    message "  between\n"
  after
    message "  after\n"
  end

  message "--- begin of for instruction test 2\n"
  for () in strList
  while false
  before
    message "  before\n"
  do
    message "  do '" + mValue + "'\n"
  between
    message "  between\n"
  after
    message "  after\n"
  end

  message "--- begin of for instruction test 3\n"
  @uint n = 0
  for () xyz_ in strList
  while n < 2
  before
    message "  before\n"
  do
    message "  do '" + xyz_mValue + "', n: " + [n string] + "\n"
    n ++
  between
    message "  between\n"
  after
    message "  after\n"
  end

  message "--- begin of for instruction test 4\n"
  for @stringlist-element s in strList while s.mValue != "c"
  before
    message "  before\n"
  do
    message "  do '" + s.mValue + "'\n"
  between
    message "  between\n"
  after
    message "  after\n"
  end

  message "--- begin of for instruction test 5\n"
  for s in strList
  before
    message "  before\n"
  do (idx)
    message "  do '" + s.mValue + "' (idx: " + [idx string] + ")\n"
  between
    message "  between\n"
  after
    message "  after\n"
  end

  message "--- begin of for instruction test 6\n"
  for s in strList
  do (idx)
    message "  do '" + s.mValue + "' (idx: " + [idx string] + ")\n"
  end

  message "--- begin of for instruction test 7\n"
  var set = @stringset {}
  set += !"A"
  set += !"B"
  set += !"C"
  set += !"D"
  set += !"E"
  set += !"F"
  set += !"G"
  set += !"H"
  for s in set do (idx)
    message "  do '" + s + "' (idx: " + [idx string] + ")\n"
  end

  message "--- begin of for instruction test 8\n"
  for > s in set do (idx)
    message "  do '" + s + "' (idx: " + [idx string] + ")\n"
  end

  message "--- begin of for instruction test 9\n"
  var data = @data.emptyData
  [!?data appendByte !1]
  [!?data appendByte !2]
  [!?data appendByte !3]
  [!?data appendByte !4]
  [!?data appendByte !5]
  [!?data appendByte !6]
  [!?data appendByte !7]
  [!?data appendByte !8]
  for d in data do (idx)
    message "  do '" + d + "' (idx: " + [idx string] + ")\n"
  end
}

