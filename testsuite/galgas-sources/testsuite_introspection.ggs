

#-----------------------------------------------------------------------------

#class @A {}
#class @B : @A {}

#-----------------------------------------------------------------------------

proc testsuite_introspection() {
print ("*************************************** begin of introspection test")
#--- List of types
  let @typelist typeList = @type.typeList
  print ("--- Type list (" + typeList.length.string + " types)")
  for (mValue) in typeList do
    print ("  @" + mValue.name + "")
  end
#--- List of functions
  let @functionlist functionList = @function.functionList
  print ("--- Function list (" + functionList.length.string
  + " function" + if functionList.length > 1 then "s" else "" end + ")")
  for (mValue) in functionList do
    var @string s = ""
    for (mValue) in mValue.formalParameterTypeList
    do s += "?@" + mValue.name
    between s += " "
    end
    log "mValue" : mValue
    print (mValue.description + "  " + mValue.name + " [" + s + "] -> @" + mValue.resultType.name)
  end
  let b1 = @function.isFunctionDefined (!"foo")
  let b2 = @function.isFunctionDefined (!"functionTest")
  print ("Function 'foo' exists:" + b1.cString + "")
  print ("Function 'functionTest' exists:" + b2.cString + "")
#--- Introspection of an @uint
  let @uint x = 2
  let @object object = x.object
  log object
  let @uint y =  (object as @uint)
  log y
#--- Type
#  @type t := [x dynamicType] ;
#  log t ;
#  @A a := [@B new] ;
#  t := [a dynamicType] ;
#  log t ;
#--- Function invocation
  let @function f = @function.functionWithName (!"functionTest")
  var arguments = @objectlist []
  arguments += !2 .uint.object
  arguments += !6 .uint.object
  let @object result = f.invoke (!arguments, !.here)
  log result
}

#-----------------------------------------------------------------------------

