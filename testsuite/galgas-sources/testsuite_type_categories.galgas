

proc testsuite_type_categories {
  message "*************************************** begin of type extension test\n"
  log "Square of 7" : [7L square]
  var aList = @uintlist {}
  aList += !1
  aList += !2
  aList += !3
  aList += !4
  log "Sum 1 + 2 + 3 + 4" : [aList sum]
  log "Hello !" : [@lstring.new {!"Hello" !.here} op]
  @uint64 v
  [7L square ?v]
  log v
  @uint u
  [aList sum ?u]
  log u
  @string s
  [@lstring.new {!"Hello" !.here} op ?s]
  log s
  var ls = @lstring.new {!"Hello" !.here}
  [!?ls appendInt !3]
  log ls
  [!?aList appendSquare!9]
  log aList
  var aList64 = @uint64list {!7L}
  [!?aList64 prependSquare !5L]
}

#----------- Extension readers
getter @uint64 square -> @uint64 {
  result = self * self
}

getter @uintlist sum -> @uint {
  result = 0
  for () in self do
    result = result + mValue
  end
}

getter @lstring op -> @string {
  result = self.string + " !"
}

#------------ Extension methods
method @uint64 square !@uint64 outResult {
  outResult = self * self
}

method @uintlist sum !@uint outResult {
  outResult = 0
  for () in self do
    outResult = outResult + mValue
  end
}

method @lstring op !@string outResult {
  outResult = self.string + " !"
}

#------------ Extension setters
setter @lstring appendInt ?let@uint inValue {
  self.string += [inValue string]
}

setter @uintlist appendSquare ?let@uint inValue {
  self += !inValue * inValue
}

setter @uint64list prependSquare ?let@uint64 inValue {
  [!?self insertAtIndex ![inValue square] !0]
}

setter @string concatList ?let@stringlist inList {
  for () in inList do
    self += mValue
  end
}

setter @uint64 increment {
  self ++
}

#----------------------------------------------------------------------------*

abstract refclass @toto { }
refclass @toto1 : @toto { }
abstract refclass @toto2 : @toto1 { }
refclass @toto3 : @toto2 { }

override abstract getter @toto2 r -> @uint
override getter @toto3 r -> @uint result { result = 0 }
override getter @toto1 r -> @uint result { result = 0 }
getter @toto1 rr -> @uint result { result = 0 }
abstract getter @toto r -> @uint


