

proc testsuite_for_instruction() {
  print ("*************************************** begin of for instruction test 1")
  var strList = @stringlist []
  strList += !"a"
  strList += !"b"
  strList += !"c"
  strList += !"d"
  for (s) in strList 
  before
    print ("  before")
  do
    print ("  do '" + s + "'")
  between
    print ("  between")
  after
    print ("  after")
  end

  print ("--- begin of for instruction test 2")
  for (mValue) in strList
  while false
  before
    print ("  before")
  do
    print ("  do '" + mValue + "'")
  between
    print ("  between")
  after
    print ("  after")
  end

  print ("--- begin of for instruction test 3")
  var @uint n = 0
  for (xyz_mValue) in strList
  while n < 2
  before
    print ("  before")
  do
    print ("  do '" + xyz_mValue + "', n: " + n.string + "")
    n += 1
  between
    print ("  between")
  after
    print ("  after")
  end

  print ("--- begin of for instruction test 4")
  for @stringlist-element s in strList while s.mValue != "c"
  before
    print ("  before")
  do
    print ("  do '" + s.mValue + "'")
  between
    print ("  between")
  after
    print ("  after")
  end

  print ("--- begin of for instruction test 5")
  for s in strList
  before
    print ("  before")
  do (idx)
    print ("  do '" + s.mValue + "' (idx: " + idx.string + ")")
  between
    print ("  between")
  after
    print ("  after")
  end

  print ("--- begin of for instruction test 6")
  for s in strList
  do (idx)
    print ("  do '" + s.mValue + "' (idx: " + idx.string + ")")
  end

  print ("--- begin of for instruction test 7")
  var @stringset set = []
  set += !"A"
  set += !"B"
  set += !"C"
  set += !"D"
  set += !"E"
  set += !"F"
  set += !"G"
  set += !"H"
  for s in set do (idx)
    print ("  do '" + s + "' (idx: " + idx.string + ")")
  end

  print ("--- begin of for instruction test 8")
  for > s in set do (idx)
    print ("  do '" + s + "' (idx: " + idx.string + ")")
  end

  print ("--- begin of for instruction test 9")
  var data = @data.emptyData
  !?data.appendByte (1)
  !?data.appendByte (2)
  !?data.appendByte (3)
  !?data.appendByte (4)
  !?data.appendByte (5)
  !?data.appendByte (6)
  !?data.appendByte (7)
  !?data.appendByte (8)
  for d in data do (idx)
    print ("  do '" + d + "' (idx: " + idx.string + ")")
  end
}

