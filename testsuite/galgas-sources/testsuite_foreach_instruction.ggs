

proc testsuite_foreach_instruction() {
  var strList = @stringlist []
  strList += !"a"
  strList += !"b"
  strList += !"c"
  strList += !"d"
  print ("*************************************** begin of foreach instruction test 1")
  for (@string s) in strList
  before
    print ("  before")
  do
    print ("  do '" + s + "'")
  between
    print ("  between")
  after
    print ("  after")
  end
  print ("--- begin of foreach instruction test 2")
  for (@string s) in strList
  while false
  before
    print ("  before")
  do
    print ("  do '" + s + "'")
  between
    print ("  between")
  after
    print ("  after")
  end
  print ("--- begin of foreach instruction test 3")
  var @uint n = 0
  for (@string s) in strList
  while n < 2
  before
    print ("  before")
  do
    print ("  do '" + s + "', n: " + n.string)
    n += 1
  between
    print ("  between")
  after
    print ("  after")
  end
  print ("--- begin of foreach instruction test 4")
  for (mValue) in strList while mValue != "c"
  before
    print ("  before")
  do
    print ("  do '" + mValue + "'")
  between
    print ("  between")
  after
    print ("  after")
  end
  print ("--- begin of foreach instruction test 5")
  for (@string s) in strList
  before
    print ("  before")
  do (idx)
    print ("  do '" + s + "' (idx: " + idx.string + ")")
  between
    print ("  between")
  after
    print ("  after")
  end
  print ("--- begin of foreach instruction test 6")
  for (@string s) in strList
  do (idx)
    print ("  do '" + s + "' (idx: " + idx.string + ")")
  end
  print ("--- begin of foreach instruction test 7")
  var @stringset set = []
  set += !"A"
  set += !"B"
  set += !"C"
  set += !"D"
  set += !"E"
  set += !"F"
  set += !"G"
  set += !"H"
  for (key) in set
  do (idx)
    print ("  do '" + key + "' (idx: " + idx.string + ")")
  end
  print ("--- begin of foreach instruction test 8")
  for > (key) in set
  do (idx)
    print ("  do '" + key + "' (idx: " + idx.string + ")")
  end
  print ("--- begin of foreach instruction test 9")
  var myData = @data.emptyData
  !?myData.appendByte (1)
  !?myData.appendByte (2)
  !?myData.appendByte (3)
  !?myData.appendByte (4)
  !?myData.appendByte (5)
  !?myData.appendByte (6)
  !?myData.appendByte (7)
  !?myData.appendByte (8)
  for (data) in myData
  do (idx)
    print ("  do '" + data + "' (idx: " + idx.string + ")")
  end
}

