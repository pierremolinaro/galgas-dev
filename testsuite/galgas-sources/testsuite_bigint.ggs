

proc testsuite_bigint_type() {
  println ("*************************************** begin of @bigint test")
  println ("--- construction")
  println (@bigint.zero.string)
  println ((1234).string)
  println ((-1234).string)
  println ((1234).sint.string)
  println ((-1234).string)
  println ("--- getter string")
  println ((-1234567890_1234567890_1234567890).string)
  println ("--- getter hexString")
  println ((-1234567890_1234567890_1234567890).hexString)
  println ("--- getter xString")
  println ((-1234567890_1234567890_1234567890).xString)
  println ((123_456_789_012_345_678).spacedString (3))
  println ((-123_456_789_012_345_678).spacedString (3))
  println ("--- extract8ForUnsignedRepresentation")
# Parcours dans le sens des indices croissants : little endian
  var @uintlist a = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract8ForUnsignedRepresentation
  var s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x11 0x22 0x33 0x44 ...0xAA 0xBB 0xCC 0xDD 0xEE 0xFF 
# Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xFF 0xEE 0xDD 0xCC 0xBB 0xAA ...0x44 0x33 0x22 0x11
  a = (0).extract8ForUnsignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x0
  println ("--- extract8ForSignedRepresentation")
# Parcours dans le sens des indices croissants : little endian
  a = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract8ForSignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x11 0x22 0x33 0x44 ...0xAA 0xBB 0xCC 0xDD 0xEE 0xFF 0x00
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x00 0xFF 0xEE 0xDD 0xCC 0xBB 0xAA ...0x44 0x33 0x22 0x11
  # Parcours dans le sens des indices croissants : little endian
  a = (-0x4433_2211).extract8ForSignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xEF 0xDD 0xCC 0xBB
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xBB 0xCC 0xDD 0xEF
  println ("--- extract32ForUnsignedRepresentation")
  # Parcours dans le sens des indices croissants : little endian
  a = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract32ForUnsignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x44332211 0x88776655 0xCCBBAA99 0x00FFEEDD 
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x00FFEEDD 0xCCBBAA99 0x88776655 0x44332211
  a = (0).extract32ForUnsignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x0
  println ("--- extract32ForSignedRepresentation")
  # Parcours dans le sens des indices croissants : little endian
  a = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract32ForSignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x44332211 0x88776655 0xCCBBAA99 0x00FFEEDD
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x00FFEEDD 0xCCBBAA99 0x88776655 0x44332211
  # Parcours dans le sens des indices croissants : little endian
  a = (-0x55_4433_2211).extract32ForSignedRepresentation
  s = ""
  for (n) in a
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xBBCCDDEF 0xFFFFFFAA
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in a
    do s += n.hexString
    between s += " "
  end
  drop a
  println (s) # 0xFFFFFFAA 0xBBCCDDEF
  println ("--- extract64ForUnsignedRepresentation")
  # Parcours dans le sens des indices croissants : little endian
  var @uint64list aa = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract64ForUnsignedRepresentation
  s = ""
  for (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x8877665544332211 0xFFEEDDCCBBAA99
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xFFEEDDCCBBAA99 0x8877665544332211
  aa = (0).extract64ForUnsignedRepresentation
  s = ""
  for (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x0
  println ("--- extract64ForSignedRepresentation")
  # Parcours dans le sens des indices croissants : little endian
  aa = (0xFF_EEDD_CCBB_AA99_8877_6655_4433_2211).extract64ForSignedRepresentation
  s = ""
  for (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0x8877665544332211 0xFFEEDDCCBBAA99
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xFFEEDDCCBBAA99 0x8877665544332211
  # Parcours dans le sens des indices croissants : little endian
  aa = (-0x55_4433_2211).extract64ForSignedRepresentation
  s = ""
  for (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xFFFFFFAABBCCDDEF
  # Parcours dans le sens des indices décroissants : big endian
  s = ""
  for > (n) in aa
    do s += n.hexString
    between s += " "
  end
  println (s) # 0xFFFFFFAABBCCDDEF
  println ("--- Addition")
  println ((12345_67890_12345_67890 + 98765_43210_98765_43210).string)
  println ("--- Subtract")
  println ((12345_67890_12345_67890 - 98765_43210_98765_43210).string)
  println ("--- Multiply")
  println ((12345_67890_12345_67890 * 98765_43210_98765_43210).string)
  println ("--- Divide")
  println ((98765_43210_98765_43210 / 12345_67890_12345_67890).string)
  println (((-98765_43210_98765_43210) / 12345_67890_12345_67890).string)
  println (((-98765_43210_98765_43210) / (-12345_67890_12345_67890)).string)
  println ((98765_43210_98765_43210 / (-12345_67890_12345_67890)).string)
  println (((-7) / 2).string) # -3
  println (((-7) / (-2)).string) # 3
  println ((7 / (-2)).string) # -3
  println ("--- mod")
  println ((9876543210 mod 1234567890).string) # 90
  println (((-9876543210) mod 1234567890).string) # -90
  println (((-9876543210) mod (-1234567890)).string)  # -90
  println ((9876543210 mod (-1234567890)).string)  # 90
  println ((2000 mod 183).string) # 170
  println (((-2000) mod 183).string) # -170
  println (((-2000) mod (-183)).string) # -170
  println ((2000 mod (-183)).string) # 170
  println ("--- divideBy")
  var @bigint quotient
  var @bigint remainder
  let cst1 = 9876543210_9876543210 ; cst1.divideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000737 8280
  let cst2 = -9876543210_9876543210 ; cst2.divideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000737 -8280
  let cst3 = -9876543210_9876543210 ; cst3.divideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000737 -8280
  let cst4 = 9876543210_9876543210 ; cst4.divideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000737 8280
  println ("--- floorDivideBy")
  let cst5 = 9876543210_9876543210 ; cst5.floorDivideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000737 8280
  let cst6 = -9876543210_9876543210 ; cst6.floorDivideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000738 1234559610
  let cst7 = -9876543210_9876543210 ; cst7.floorDivideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000737 -8280
  let cst8 = 9876543210_9876543210 ; cst8.floorDivideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000738 -1234559610
  println ("--- ceilDivideBy")
  let cst9 = 9876543210_9876543210 ; cst9.ceilDivideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000738 -1234559610
  let cstA = -9876543210_9876543210 ; cstA.ceilDivideBy (
    !1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000737 -8280
  let cstB = -9876543210_9876543210 ; cstB.ceilDivideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # 80000000738 1234559610
  let cstC = 9876543210_9876543210 ; cstC.ceilDivideBy (
    !-1234567890,
    ?quotient:quotient,
    ?remainder:remainder
  )
  println (quotient.string + " " + remainder) # -80000000737 8280
  println ("--- operator <<")
  println ((0x1234567890 << 12).hexString) # 0x1234567890000
  println (((-0x1234567890) << 12).hexString) # -0x1234567890000
  println ((2000 << 2).string) # 8000
  println (((-2000) << 2).string) # -8000
  println ("--- operator >>")
  println ((0x1234567890 >> 12).hexString) # 0x1234567
  println (((-0x1234567890) >> 12).hexString) # -0x1234567
  println ((2000 >> 2).string) # 500
  println (((-2000) >> 2).string) # -500
  println ((9 >> 1).string) # 4
  println ((9 >> 1).string) # 4
  println ((7 >> 1).string) # 3
  println ((7 >> 1).string) # 3
  println ((3 >> 1).string) # 1
  println ((3 >> 1).string) # 1
  println ((1 >> 1).string) # 0
  println ((1 >> 1).string) # 0
  println ((-9 >> 1).string) # -5
  println ((-9 >> 1).string) # -5
  println ((-7 >> 1).string) # -4
  println ((-7 >> 1).string) # -4
  println ((-3 >> 1).string) # -2
  println ((-3 >> 1).string) # -2
  println ((-1 >> 1).string) # -1
  println ((-1 >> 1).string) # -1
  println ("--- operator &")
  println ((0x1234 & 0x4321).hexString) # 0x220
  println ((-0x1234 & 0x4321).hexString) # 0x4100
  println ((-0x80 & 0xFF).hexString) # 0x80
  println ("--- operator |")
  println ((0x1234 | 0x4321).hexString) # 0x5335
  println ((-0x1234 | 0x4321).hexString) # -0x1013
  println ((-0x80 | 0xFF).hexString) # -0x1
  println ("--- operator ^")
  println ((0x1234 ^ 0x4321).hexString) # 0x5115
  println ((-0x1234 ^ 0x4321).hexString) # -0x5113
  println ((-0x80 ^ 0xFF).hexString) # -0x81
  println ((-0x80 ^ -0xFF).hexString) # 0x81
  println ("--- operator ~")
  println ((~  0x1234).hexString) # -0x1235
  println ((~ -0x1234).hexString) # 0x1233
  println ("--- bitAtIndex")
  println ((0x1234).bitAtIndex (7).ocString) # NO
  println ((0x1234).bitAtIndex (5).ocString) # YES
  println ((0x1234).bitAtIndex (25).ocString) # NO
  println ((-0x1234).bitAtIndex (7).ocString) # YES
  println ((-0x1234).bitAtIndex (5).ocString) # NO
  println ((-0x1234).bitAtIndex (25).ocString) # YES
  println ("--- setBitAtIndex")
  var b = 0x1234
  !?b.setBitAtIndex (true, !14)
  println (b.hexString) # 0x5234
  !?b.setBitAtIndex (true, !40)
  println (b.hexString) # 0x10000005234
  b = -0x1234
  !?b.setBitAtIndex (false, !14)
  println (b.hexString) # -0x5234
  !?b.setBitAtIndex (false, !40) # -0x10000005234
  println (b.hexString)
  println ("--- complementBitAtIndex")
  b = 0x1234
  !?b.complementBitAtIndex (14)
  println (b.hexString) # 0x5234
  b = -0x1234
  !?b.complementBitAtIndex (40)
  println (b.hexString) # -0x10000005234
}


