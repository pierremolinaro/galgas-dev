#include "%!COMPONENT_NAME%.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/F_DisplayException.h"
#include "utilities/basic-allocation.h"
#include "utilities/cpp-allocation.h"
#include "utilities/C_PrologueEpilogue.h"
#include "command_line_interface/mainForLIBPM.h"
#include "command_line_interface/C_builtin_CLI_Options.h"

//---------------------------------------------------------------------------*

% foreach IMPORTED_COMPONENT_LIST do
    %#include "%!mValue%.h"\n%
  end foreach%
//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "%!COMPONENT_NAME%.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      print_tool_help_message                              *
//                                                                           *
//---------------------------------------------------------------------------*

void print_tool_help_message (void) {
  co << "Compiled with GALGAS revision NUMERO_REVISION_GALGAS\\n" ;
}

//---------------------------------------------------------------------------*

const char * kSourceFileExtensions [] = {
%
foreach PROGRAM_RULE_LIST do
  %  %![mSourceFileExtension utf8Representation]%,\n%
end foreach
%  NULL
} ;    

//---------------------------------------------------------------------------*

const char * kSourceFileHelpMessages [] = {
%
foreach PROGRAM_RULE_LIST do
  %  %![mSourceFileHelp utf8Representation]%,\n%
end foreach
%  NULL
} ;    

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  const char * kVersionString = "version " %![VERSION utf8Representation]% " [debug]" ;
#else
  const char * kVersionString = "version " %![VERSION utf8Representation]% ;
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM (const TC_UniqueArray <C_String> & inSourceArray) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
//--- Set Execution mode
  C_String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    co << executionModeOptionErrorMessage ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    C_Compiler * commonLexique = NULL ;
    macroMyNew (commonLexique, C_Compiler (NULL, "", "" COMMA_HERE)) ;
    try{
      routine_before (commonLexique COMMA_HERE) ;
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      for (PMSInt32 i=0 ; i<inSourceArray.count () ; i++) {
        setCurrentCompiledFilePath (inSourceArray (i COMMA_HERE)) ;
        if (gOption_galgas_5F_cli_5F_options_trace.mValue) {
          enableTraceWithPath (inSourceArray (i COMMA_HERE)) ;
        }
        const C_String fileExtension = inSourceArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (inSourceArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonLexique->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
        PMSInt16 r = 0 ;
        %
          foreach PROGRAM_RULE_LIST 
          do index IDX
            %if (fileExtension == %![mSourceFileExtension utf8Representation]%) {\n%
            if HAS_INDEXING then
              if [mIndexingGrammar string] == "" then
              %          if (! executionModeIsIndexing ()) {\n%
              %            routine_%!["programRule_" . [IDX string] identifierRepresentation]% (sourceFilePath, commonLexique COMMA_HERE) ;\n%
              %          }\n%
              else
              %          if (executionModeIsIndexing ()) {\n%
              %            cGrammar_%![mIndexingGrammar identifierRepresentation]%::performIndexing (commonLexique, inSourceArray (i COMMA_HERE)) ;\n%
              %          }else{\n%
              %            routine_%!["programRule_" . [IDX string] identifierRepresentation]% (sourceFilePath, commonLexique COMMA_HERE) ;\n%
              %          }\n%
              end if
            else
              %          routine_%!["programRule_" . [IDX string] identifierRepresentation]% (sourceFilePath, commonLexique COMMA_HERE) ;\n%
            end if 
          between %        }else %
          end foreach
%        }else{
          printf ("*** Error: unhandled extension for file '\%s' ***\\n", inSourceArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
        closeTrace () ;
      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonLexique COMMA_HERE) ;
    //--- Display error and warnings count
      if (gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        C_String message ;
        if (totalWarningCount () == 0) {
          message << "No warning" ;
        }else if (totalWarningCount () == 1) {
          message << "1 warning" ;
        }else{
          message << cStringWithUnsigned (totalWarningCount ()) << " warnings" ;
        }
        message << ", " ;
        if (totalErrorCount () == 0) {
          message << "no error" ;
        }else if (totalErrorCount () == 1) {
          message << "1 error" ;
        }else{
          message << cStringWithUnsigned (totalErrorCount ()) << " errors" ;
        }
        message << ".\\n" ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\\n") ;
      throw ;
    }
    macroDetachSharedObject (commonLexique) ;
  }
  return returnCode ;
}

