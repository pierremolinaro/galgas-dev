//---------------------------------------------------------------------------*
//                                                                           *
//%!["Parser class '" . COMPONENT_NAME . "' declaration" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

class cParser_%![COMPONENT_NAME identifierRepresentation]% {
//--- Virtual destructor
  public : virtual ~ cParser_%![COMPONENT_NAME identifierRepresentation]% (void) {}

//--- Non terminal declarations
%foreach NONTERMINAL_MAP do
  foreach mLabelMap prefixedby label_ do
  %  protected : virtual void nt_%![lkey identifierRepresentation]%_%![label_lkey identifierRepresentation]% (%?^%C_Lexique_%!LEXIQUE_NAME% * const inLexique%
    foreach label_mSignature do index IDX
      %,\n%!^ 
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * const constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * inArgument% ![IDX string]
    end if
    end foreach
  %) = 0 ;\n\n%
  end foreach
  
  if mHasParseLabel then
    %  protected : virtual void nt_%![lkey identifierRepresentation]%_parse (%?^%C_Lexique_%!LEXIQUE_NAME% * const inLexique) = 0 ;\n\n%
  end if
end foreach%
//--- Rule declarations
%foreach RULE_DECLARATION_LIST do
  foreach mLabelMap do
    %  protected : void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_%![lkey identifierRepresentation]% (%?^%C_Lexique_%!LEXIQUE_NAME% * const inLexique%
    foreach mSignature do index IDX
      %,\n%!^ 
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * const constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * & outArgument% ![IDX string]
      else # argumentIn
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % * inArgument% ![IDX string]
      end if
    end foreach
    %) ;\n\n%
  end foreach
  if mHasParseLabel then
    %  protected : void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_parse (%?^%C_Lexique_%!LEXIQUE_NAME% * const inLexique) ;\n\n%
  end if
end foreach%

//--- Select methods
%foreach SELECT_METHOD_LIST do
  %  protected : virtual PMSInt32 select_%![COMPONENT_NAME identifierRepresentation]%_%![mValue string]% (C_Lexique_%!LEXIQUE_NAME% &) = 0 ;\n\n%
end foreach%
} ;

