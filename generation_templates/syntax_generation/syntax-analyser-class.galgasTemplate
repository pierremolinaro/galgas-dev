//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//                                                                                                                     *
//%!["Parser class '" + COMPONENT_NAME + "' declaration" stringByLeftAndRightPadding !117 !' ']%*
//                                                                                                                     *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

class cParser_%![COMPONENT_NAME identifierRepresentation]% {
//--- Virtual destructor
  public : virtual ~ cParser_%![COMPONENT_NAME identifierRepresentation]% (void) {}

//--- Non terminal declarations
%for () in NONTERMINAL_MAP do
  for () in mLabelMap : label_ do
  %  protected : virtual void nt_%![lkey identifierRepresentation]%_%![label_lkey identifierRepresentation]% (%?^
    for () in label_mSignature do index IDX
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %const class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end
      %,\n%!^ 
    end
    if HAS_TRANSLATE_FEATURE then
      %class C_String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %class C_Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%
  end
  
  %  protected : virtual void nt_%![lkey identifierRepresentation]%_parse (%?^
  if HAS_TRANSLATE_FEATURE then
    %class C_String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
  end
  %class C_Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%

  if HAS_INDEXING then
    %  protected : virtual void nt_%![lkey identifierRepresentation]%_indexing (class C_Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%
  end
end%
//--- Rule declarations
%for () in RULE_DECLARATION_LIST do
  for () in mLabelImplementationList do
    %  protected : void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_%![mLabelName identifierRepresentation]% (%?^
    for () in mSignature do index IDX
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %const GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end
      %,\n%!^
    end
    if HAS_TRANSLATE_FEATURE then
      %C_String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %C_Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  end
  %  protected : void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_parse (%?^
  if HAS_TRANSLATE_FEATURE then
    %C_String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
  end
  %C_Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  if HAS_INDEXING then
    %  protected : void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_indexing (C_Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  end
end%

//--- Select methods
%for () in SELECT_METHOD_LIST do
  %  protected : virtual int32_t select_%![COMPONENT_NAME identifierRepresentation]%_%![mValue string]% (C_Lexique_%!LEXIQUE_NAME% *) = 0 ;\n\n%
end%
} ;

