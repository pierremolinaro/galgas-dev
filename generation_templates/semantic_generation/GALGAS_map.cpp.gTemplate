//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (LOCATION_ARGS) :
GALGAS_map (%![[ATTRIBUTE_LIST length] + 1 string]% COMMA_THERE) {
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% * result = NULL ;
  macroMyNew (result, GALGAS_%!TYPE_IDENTIFIER% (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_mapWithMapToOverride (%?^%GALGASap_%!TYPE_IDENTIFIER% & inMapToOverride
                                                   %!^%COMMA_LOCATION_ARGS) {
  GALGASap_%!TYPE_IDENTIFIER% result ;
  if (inMapToOverride.isValid ()) {
    result = GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (THERE) ;
    result.ptr (HERE)->mOverridenMap = inMapToOverride ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::insulate (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioObject
                %!^%COMMA_LOCATION_ARGS) {
  if (ioObject.ptr (HERE)->retainCount () > 1) {
    GALGASap_%!TYPE_IDENTIFIER% newMap (constructor_emptyMap (THERE)) ;
    newMap.ptr (HERE)->copyFrom (ioObject.ptr(HERE)) ;
    ioObject = newMap ;
  }
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::reader_overriddenMap (LOCATION_ARGS) {
  GALGASap_%!TYPE_IDENTIFIER% result = mOverridenMap ;
  if (! result.isValid ()) {
    result = GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (THERE) ;
  }
  return result ;
}

%foreach INSERT_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_%![mMethodName identifierRepresentation]% (%?^%GALGASap_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGASap_%![mAttributeTypeIndex identifierRepresentation]% inArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
  %  GALGASap_object attributes [%![[ATTRIBUTE_LIST length] + 1 string]%] = {inKey%
  foreach ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end foreach
  %} ;\n%
  block 2 :
    %const utf32 kInsertErrorMessage [%![[mErrorMessage length] + 1 string]%] = %![mErrorMessage utf32Representation]% ;\n%
    %const utf32 kShadowErrorMessage [%![[mShadowErrorMessage length] + 1 string]%] = %![mShadowErrorMessage utf32Representation]% ;\n%
    %performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
  end block
  %}\n\n%
end foreach

foreach SEARCH_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %static const utf32 kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mMethodName identifierRepresentation]% [%![[mErrorMessage length] + 1 string]%] = %![mErrorMessage utf32Representation]% ;\n\n%
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::method_%![mMethodName identifierRepresentation]% (%?^%GALGASap_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGASap_%![mAttributeTypeIndex identifierRepresentation]% & outArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
  block 2 :
    %cRootObjectArray * attributes = performSearch (inKey, inCompiler, kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mMethodName identifierRepresentation]% COMMA_THERE) ;\n%
    %if (NULL != attributes) {\n%
    foreach ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]% = attributes->objectAtIndex (%![IDX + 1 string]% COMMA_HERE) ;\n%
    end foreach
    %}\n%
  end block
  %}\n\n%
end foreach


foreach REMOVE_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_%![mMethodName identifierRepresentation]% (%?^%GALGASap_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGASap_%![mAttributeTypeIndex identifierRepresentation]% & outArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
  block 2 :
    %const utf32 kRemoveErrorMessage [%![[mErrorMessage length] + 1 string]%] = %![mErrorMessage utf32Representation]% ;\n%
    %cRootObjectArray attributes ;\n%
    %  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;\n%
    %if (attributes.count () != 0) {\n%
    foreach ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]% = attributes.objectAtIndex (%![IDX + 1 string]% COMMA_HERE) ;\n%
    end foreach
    %}\n%
  end block
  %}\n\n%
end foreach

if HAS_INSERT_OR_REPLACE then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_insertOrReplace (%?^%GALGAS_lstring * inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mAttributeTypeIndex identifierRepresentation]% * inArgument%![IDX string]
    end foreach
    %\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  GALGAS_object * attributes [%![[ATTRIBUTE_LIST length] + 1 string]%] = {inKey%
  foreach ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end foreach
  %} ;\n%
  %  performInsertOrReplace (attributes) ;\n%
  %}\n\n%
end if

foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGASap_%![mAttributeTypeIndex identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]%ForKey (%?^%GALGASap_string & inKey,\n%
  %                                               %!^%C_Compiler * inCompiler\n%
  %                                               %!^%COMMA_LOCATION_ARGS) {\n%
  %  return readAttributeForKey (inKey, inCompiler, %![IDX + 1 string]% COMMA_THERE) ;\n%
  %}\n\n%
end foreach 

foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GALGASap_%![mAttributeTypeIndex identifierRepresentation]% inAttributeValue,\n%
  %                           %!^%GALGASap_string inKey,\n%
  %                           %!^%C_Compiler * inCompiler\n%
  %                           %!^%COMMA_LOCATION_ARGS) {\n%
  %  writeAttributeForKey (inKey, inAttributeValue, inCompiler, %![IDX + 1 string]% COMMA_THERE) ;\n%
  %}\n\n%
end foreach 

foreach WITH_ACCESSOR_MAP do
  %//---------------------------------------------------------------------------*\n\n%
  %cRootObjectArray * readWriteAccessForWithInstruction_%![lkey identifierRepresentation]% (%?^%C_Compiler * inCompiler,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & ioMap,\n%
  !^%GALGASap_%![mArgumentType identifierRepresentation]% & inKey\n%
  !^%COMMA_LOCATION_ARGS) {\n%
  %  cRootObjectArray * result = NULL ;\n%
  %  if (ioMap.isValid () && inKey.isValid ()) {\n%
  %    GALGAS_%!TYPE_IDENTIFIER%::insulate (ioMap COMMA_THERE) ;\n%
  if [lkey string] == "hasKey" then
  %    result = ioMap.ptr (HERE)->performSearch (inKey, inCompiler COMMA_THERE) ;\n%
  else
  %    result = ioMap.ptr (HERE)->performSearch (inKey, inCompiler, kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% COMMA_THERE) ;\n%
  end if
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach
