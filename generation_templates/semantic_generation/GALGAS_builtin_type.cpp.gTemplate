//---------------------------------------------------------------------------*
//                                                                           *
//%!["'" . TYPE_NAME . "' class" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_NAME% ("%![TYPE typeName]%", NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_%!TYPE_NAME%::typeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_%!TYPE_NAME% ;
}
%if [TYPE generate_new_constructor] then%
//---------------------------------------------------------------------------*

GALGAS_%!TYPE_NAME% * GALGAS_%!TYPE_NAME%::constructor_new (%?COL_01
  foreach [TYPE attributeDescriptionList]
    do %const % !mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!COL_01
  end foreach
  %\n%!COL_01 %COMMA_LOCATION_ARGS) {\n
  GALGAS_%!TYPE_NAME% * result = NULL ;
  macroMyNew (result, GALGAS_%!TYPE_NAME% (%
  foreach [TYPE attributeDescriptionList]
    do %inOperand_%!mAttributeName
    between %, %
  end foreach
  if [[TYPE attributeDescriptionList] length] == 0 then
    %THERE%
  else
    % COMMA_THERE%
  end if
  %)) ;
  return result ;
}%
end if

if [TYPE accept_inc_dec_operator] | [TYPE accept_append_operator] | ([[TYPE modifierMap] count] > 0) | ([[TYPE add_assign_operator] length] > 0) then%
//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_NAME%::insulate (%?COL_0%GALGAS_%!TYPE_NAME% * & ioOperand
%                                   !COL_0%COMMA_LOCATION_ARGS) {
  if (ioOperand->retainCount () > 1) {
    GALGAS_%!TYPE_NAME% * p = GALGAS_%!TYPE_NAME%::constructor_new (%
    foreach [TYPE attributeDescriptionList]
      do %ioOperand->%!mAttributeName
      between %, %
    end foreach
    if [[TYPE attributeDescriptionList] length] == 0 then
      %THERE%
    else
      % COMMA_THERE%
    end if
    %) ;
    macroReleaseObject (ioOperand) ;
    macroRetainObject (p) ;
    ioOperand = p ;
  }
}
%end if
foreach [TYPE readerMap] do
  if mQualifier == [@readerQualifier isBasic] then
    %//---------------------------------------------------------------------------*\n\n%
    %GALGAS_% ![mReturnedType typeIdentifierRepresentation] % * reader_% ![key identifierRepresentation] % (%?COL
    %const GALGAS_%!TYPE_NAME% * inObject%
    foreach mArgumentTypeList
      do index IDX %,\n% !COL %const GALGAS_%![mType typeIdentifierRepresentation]% * inOperand_% ![IDX string]
    end foreach
    if mHasLexiqueArgument then
      %,\n% !COL %C_Compiler * inCompiler\n% !COL %COMMA_LOCATION_ARGS%
    else
      %\n% !COL %COMMA_LOCATION_ARGS%
    end if
    %) {\n%
    %  GALGAS_%![mReturnedType typeIdentifierRepresentation]% * result = NULL ;\n%
    %  if (inObject != NULL) {\n%
    if mImplicitConversionReader == "" then
      %    result = inObject->reader_%![key identifierRepresentation]% (%
      foreach mArgumentTypeList
        do index IDX %inOperand_% ![IDX string]
        between %, %
      end foreach
      if [mArgumentTypeList length] > 0 then
        if mHasLexiqueArgument then
          %, inCompiler COMMA_THERE%
        else
          % COMMA_THERE%
        end if
      else
        if mHasLexiqueArgument then
          %inCompiler COMMA_THERE%
        else
          %THERE%
        end if
      end if
    else
      %    result = reader_%![key identifierRepresentation]% (inObject->reader_%![mImplicitConversionReader identifierRepresentation]% (THERE)%
      foreach mArgumentTypeList
        do index IDX %, inOperand_% ![IDX string]
      end foreach
      if mHasLexiqueArgument then
        %, inCompiler COMMA_THERE%
      else
        % COMMA_THERE%
      end if
    end if
    %) ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end if
end foreach

if [[TYPE enumerable] length] > 0 then
  foreach [TYPE enumerable] do index IDX
    %//---------------------------------------------------------------------------*\n\n%
    %const GALGAS_%![mType typeIdentifierRepresentation]% * GALGAS_%!TYPE_NAME%::cEnumerator::attribute_%![mEnumerationName identifierRepresentation]% (void) const {\n%
    %  const GALGAS_%![mType typeIdentifierRepresentation]% * result = (const GALGAS_%![mType typeIdentifierRepresentation]% *) directAccess (%![IDX string]% COMMA_HERE) ;\n%
    %  macroValidObject (result, const GALGAS_%![mType typeIdentifierRepresentation]%) ;\n%
    %  return result ;\n%
    %}\n\n%
  end foreach
end if
