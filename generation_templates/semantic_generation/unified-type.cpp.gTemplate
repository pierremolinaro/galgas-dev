//---------------------------------------------------------------------------*
//                                                                           *
//%!["@" . TYPE_NAME . " " . [TYPE_KIND kind] . " type" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ("%?^!TYPE_NAME%",
                       %!^%& kTypeDescriptor_GALGAS_%![SUPER_TYPE_INDEX identifierRepresentation]%,
                       %!^%(genericObjectCompareFunctionType) GALGAS_%!TYPE_IDENTIFIER%::objectCompare) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_%!TYPE_IDENTIFIER%::typeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;
}
%if (SUPPORTED_OPERATORS & generateNativeNewConstructor []) != 0 then%
//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% * GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
  foreach NATIVE_ATTRIBUTE_LIST
    do %const % !mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!^
  end foreach
  %\n%!^ %COMMA_LOCATION_ARGS) {\n
  GALGAS_%!TYPE_IDENTIFIER% * result = NULL ;
  macroMyNew (result, GALGAS_%!TYPE_IDENTIFIER% (%
  foreach NATIVE_ATTRIBUTE_LIST
    do %inOperand_%!mAttributeName
    between %, %
  end foreach
  if [NATIVE_ATTRIBUTE_LIST length] == 0 then
    %THERE%
  else
    % COMMA_THERE%
  end if
  %)) ;
  return result ;
}

%
end if

foreach MODIFIER_MAP do
  %//---------------------------------------------------------------------------*\n\n%
  %void modifierCall_%![key identifierRepresentation]% (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioResult%
  foreach mParameterList do index IDX
    %,\n%!^
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  end foreach
  if mHasCompilerArgument then
    %,\n%!^%C_Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS%
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if  
  %) {\n
  if (ioResult != NULL) {
    GALGAS_%!TYPE_IDENTIFIER%::insulate (ioResult COMMA_THERE) ;
    ioResult->modifier_%![key identifierRepresentation]% (%
  foreach mParameterList do index IDX
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %outArgument% ![IDX string]
    else # argumentIn
      %inArgument% ![IDX string]
    end if
    between %, %
  end foreach
  if [mParameterList length] > 0 then
    if mHasCompilerArgument then
      %, inCompiler COMMA_THERE%
    else
      % COMMA_THERE%
    end if
  else
    if mHasCompilerArgument then
      %inCompiler COMMA_THERE%
    else
      %THERE%
    end if
  end if
  %) ;  
  }
}\n\n%
end foreach

foreach INSTANCE_METHOD_MAP do
  %//---------------------------------------------------------------------------*\n\n%
  %void instanceMethodCall_%![key identifierRepresentation]% (%?^%GALGAS_%!TYPE_IDENTIFIER% * inObject%
  foreach mParameterList do index IDX
    %,\n%!^
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  end foreach
  if mHasCompilerArgument then
    %,\n%!^%C_Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS%
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if  
  %) {
  if (inObject != NULL) {
    macroRetainObjectThere (inObject) ;
    inObject->method_%![key identifierRepresentation]% (%
  foreach mParameterList do index IDX
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %outArgument% ![IDX string]
    else # argumentIn
      %inArgument% ![IDX string]
    end if
    between %, %
  end foreach
  if [mParameterList length] > 0 then
    if mHasCompilerArgument then
      %, inCompiler COMMA_THERE%
    else
      % COMMA_THERE%
    end if
  else
    if mHasCompilerArgument then
      %inCompiler COMMA_THERE%
    else
      %THERE%
    end if
  end if
  %) ;  
    macroReleaseObjectThere (inObject) ;
  }
}\n\n%
end foreach

foreach READER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %//---------------------------------------------------------------------------*\n\n%
    %GALGAS_% ![mReturnedType identifierRepresentation] % * readerCall_% ![key identifierRepresentation] % (%?COL
    %const GALGAS_%!TYPE_IDENTIFIER% * inObject%
    foreach mArgumentTypeList
      do index IDX %,\n% !COL %const GALGAS_%![mType identifierRepresentation]% * inOperand_% ![IDX string]
    end foreach
    if mHasLexiqueArgument then
      %,\n% !COL %C_Compiler * inCompiler\n% !COL %COMMA_LOCATION_ARGS%
    else
      %\n% !COL %COMMA_LOCATION_ARGS%
    end if
    %) {\n%
    %  GALGAS_%![mReturnedType identifierRepresentation]% * result = NULL ;\n%
    %  if (inObject != NULL) {\n%
    if mImplicitConversionReader == "" then
      %    result = inObject->reader_%![key identifierRepresentation]% (%
      foreach mArgumentTypeList
        do index IDX %inOperand_% ![IDX string]
        between %, %
      end foreach
      if [mArgumentTypeList length] > 0 then
        if mHasLexiqueArgument then
          %, inCompiler COMMA_THERE%
        else
          % COMMA_THERE%
        end if
      else
        if mHasLexiqueArgument then
          %inCompiler COMMA_THERE%
        else
          %THERE%
        end if
      end if
    else
      %    result = readerCall_%![key identifierRepresentation]% (inObject->reader_%![mImplicitConversionReader identifierRepresentation]% (THERE)%
      foreach mArgumentTypeList
        do index IDX %, inOperand_% ![IDX string]
      end foreach
      if mHasLexiqueArgument then
        %, inCompiler COMMA_THERE%
      else
        % COMMA_THERE%
      end if
    end if
    %) ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end if
end foreach

if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
    %//---------------------------------------------------------------------------*\n%
    %//%!["@" . TYPE_NAME . " " . [TYPE_KIND kind] . " enumeration" stringByLeftAndRightPadding !75 !' ']%*\n%
  foreach ENUMERATION_DESCRIPTOR_LIST do index IDX
    %//---------------------------------------------------------------------------*\n\n%
    %const GALGAS_%![mEnumeratedType identifierRepresentation]% * GALGAS_%!TYPE_IDENTIFIER%::cEnumerator::attribute_%![mEnumerationName identifierRepresentation]% (void) const {\n%
    %  const GALGAS_%![mEnumeratedType identifierRepresentation]% * result = (const GALGAS_%![mEnumeratedType identifierRepresentation]% *) directAccess (%![IDX string]% COMMA_HERE) ;\n%
    %  macroValidObject (result, const GALGAS_%![mEnumeratedType identifierRepresentation]%) ;\n%
    %  return result ;\n%
    %}\n\n%
  end foreach
end if
