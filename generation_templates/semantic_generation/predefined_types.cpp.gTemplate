//---------------------------------------------------------------------------*

#include "galgas2/predefined-types.h"
#include "galgas-utilities/C_Compiler.h"

//---------------------------------------------------------------------------*

cCollectionElement_stringset::cCollectionElement_stringset (GALGASap_string & inKey
                                                            COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_key (inKey) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_stringset::isValid (void) const {
  return mAttribute_key.isValid () ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_stringset::compare (const cCollectionElement * inOperand) {
  const cCollectionElement_stringset * operand = (const cCollectionElement_stringset *) inOperand ;
  macroValidObject (operand, const cCollectionElement_stringset) ;
  return GALGASap_string::objectCompare (mAttribute_key, operand->mAttribute_key) ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_stringset::copy (void) {
  cCollectionElement_stringset * p = NULL ;
  macroMyNew (p, cCollectionElement_stringset (mAttribute_key COMMA_HERE)) ;
  return p ;
}


//---------------------------------------------------------------------------*

void cCollectionElement_stringset::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) {
//  mAttribute_key.description (ioString, inIndentation) ;
}

//---------------------------------------------------------------------------*

cCollectionElement_data::cCollectionElement_data (GALGASap_uint & inData
                                                  COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mAttribute_data (inData) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_data::isValid (void) const {
  return mAttribute_data.isValid () ;
}

//---------------------------------------------------------------------------*

enumComparisonResult cCollectionElement_data::compare (const cCollectionElement * inOperand) {
  const cCollectionElement_data * operand = (const cCollectionElement_data *) inOperand ;
  macroValidObject (operand, const cCollectionElement_data) ;
  return GALGASap_uint::objectCompare (mAttribute_data, operand->mAttribute_data) ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_data::copy (void) {
  cCollectionElement_data * p = NULL ;
  macroMyNew (p, cCollectionElement_data (mAttribute_data COMMA_HERE)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_data::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) {
//  mAttribute_key.description (ioString, inIndentation) ;
}

