//---------------------------------------------------------------------------*
//                                                                           *
//%!["@" . TYPE_NAME . " " . [TYPE_KIND kind] . " type" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;

//---------------------------------------------------------------------------*

class GALGAS_%!TYPE_IDENTIFIER% : public GALGAS_%![SUPER_TYPE_INDEX identifierRepresentation]% {
%
if [ENUM_CONSTANT_LIST length] > 0 then
%//--------------------------------- Enumeration type declaration
  private : typedef enum {%
  foreach ENUM_CONSTANT_LIST
    do %kEnum_%![mValue identifierRepresentation]
    between %, %
  end foreach
  %} enumeration ;

//--------------------------------- Private attribute
  private : enumeration mEnumValue ;

//--------------------------------- C++ constructor
  public : GALGAS_%!TYPE_IDENTIFIER% (const enumeration inValue COMMA_LOCATION_ARGS) ;

%
end if

if (SUPPORTED_OPERATORS & generateCppConstructorWithNativeAttributeList []) != 0 then%
//--------------------------------- C++ constructor\n%
  %  protected : GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach NATIVE_ATTRIBUTE_LIST
    do %const % !mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!^
  end foreach
  if [NATIVE_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS) ;\n\n%
  else
    %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
  end if
end if


if (SUPPORTED_OPERATORS & generateCppConstructorWithAttributeList []) != 0 then%
//--------------------------------- C++ constructor\n%
  %  protected : GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach CURRENT_TYPE_ATTRIBUTE_LIST
    do index IDX %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% * inAttribute_% ![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [CURRENT_TYPE_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS) ;\n\n%
  else
    %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
  end if
end if

if (SUPPORTED_OPERATORS & generateNativeNewConstructor []) != 0 then
  %//--------------------------------- Native constructor\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * constructor_new (%?COL_01
  foreach NATIVE_ATTRIBUTE_LIST
    do %const % !mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!COL_01
  end foreach
  %\n%!COL_01 %COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & generateVirtualDestructor []) != 0 then
%//--------------------------------- Virtual destructor
  protected : virtual ~ GALGAS_%!TYPE_IDENTIFIER% (void) ;\n\n%
end if

if [CONSTRUCTOR_MAP count] > 0 then
  %//--------------------------------- GALGAS constructors\n%
  foreach CONSTRUCTOR_MAP do
    %  public : static GALGAS_%![mReturnedType identifierRepresentation]% * constructor_%![key identifierRepresentation]% (%?^
    foreach mArgumentTypeList
      do index IDX %const GALGAS_% ![mType identifierRepresentation] % * inOperand%![IDX string]
      between %,\n%!^
    end foreach
    if mHasCompilerArgument & ([mArgumentTypeList length] > 0) then
      %,\n%!^ %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif mHasCompilerArgument then
      %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif [mArgumentTypeList length] > 0 then
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    else
      %LOCATION_ARGS) ;\n\n%
    end if
  end foreach
end if

%//--------------------------------- No copy
  private : GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% &) ;
  private : GALGAS_%!TYPE_IDENTIFIER% & operator = (const GALGAS_%!TYPE_IDENTIFIER% &) ;

%if (SUPPORTED_OPERATORS & generateDescriptionReaderUtilityMethod []) != 0 then
  %//--------------------------------- Implementation of reader 'description'\n%
  %  public : virtual void description (C_String & ioString,\n%
  %                                     const PMSInt32 inIndentation) const ;\n%
end if

%
//--------------------------------- Modifiers
%
foreach MODIFIER_MAP do
  %  protected : void modifier_%![key identifierRepresentation]% (%?^
  foreach mParameterList do index IDX
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  between %,\n%!^
  end foreach
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end if  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
  end if
  %) ;\n\n%
end foreach
%
//--------------------------------- Instance Methods
%
foreach INSTANCE_METHOD_MAP do
  %  protected : void method_%![key identifierRepresentation]% (%?^
  foreach mParameterList do index IDX
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  between %,\n%!^
  end foreach
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end if  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
  end if
  %) const ;\n\n%
end foreach
%
//--------------------------------- Class Methods
%
foreach CLASS_METHOD_MAP do
  %  public : static void class_method_%![key identifierRepresentation]% (%?^
  foreach mParameterList do index IDX
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  between %,\n%!^
  end foreach
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end if  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
  end if
  %) ;\n\n%
end foreach
%
//--------------------------------- Readers
%
foreach READER_MAP do
  if (mQualifier != [@readerQualifier isInherited]) & (mImplicitConversionReader == "") then
    %  protected : virtual GALGAS_% ![mReturnedType identifierRepresentation] % * reader_% ![key identifierRepresentation] % (%?^
    foreach mArgumentTypeList
      do index IDX %const GALGAS_%![mType identifierRepresentation]% * inOperand% ![IDX string]
      between %,\n% !^
    end foreach
    if [mArgumentTypeList length] == 0 then
      if mHasLexiqueArgument then
        %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
      else
        %LOCATION_ARGS%
      end if
    else
      if mHasLexiqueArgument then
        %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
      else
        %\n% !^ %COMMA_LOCATION_ARGS%
      end if
    end if
    %) const%
    if mQualifier == [@readerQualifier isAbstract] then
      % = 0%
    end if
    % ;\n\n%
  end if
end foreach

if (SUPPORTED_OPERATORS & binaryAndOperator []) != 0 then
  %//--------------------------------- & operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_and (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryOrOperator []) != 0 then
  %//--------------------------------- | operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_or (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryXorOperator []) != 0 then
  %//--------------------------------- ^ operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_xor (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryNotOperator []) != 0 then
  %//--------------------------------- & operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_not (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryTildeOperator []) != 0 then
  %//--------------------------------- ~ operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_tilde (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryConcatOperator []) != 0 then
  %//--------------------------------- . (concat) operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_concat (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
       !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2\n%
       !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryAddOperator []) != 0 then
  %//--------------------------------- + operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * add_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binarySubOperator []) != 0 then
  %//--------------------------------- - operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * substract_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryMulOperator []) != 0 then
  %//--------------------------------- * operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * multiply_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryDivOperator []) != 0 then
  %//--------------------------------- / operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * divide_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryModOperator []) != 0 then
  %//--------------------------------- mod operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * modulo_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,\n%
  !^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryMinusOperator []) != 0 then
  %//--------------------------------- unary - operator\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * operator_unary_minus (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & incDecOperator []) != 0 then
  %//--------------------------------- ++, -- operators\n%
  %  public : static void increment_operation (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioOperand,\n%
        !^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public : static void decrement_operation (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioOperand,\n%
        !^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryShiftOperator []) != 0 then
  %//--------------------------------- << and >> shift operators\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * left_shift_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand,\n%
  !^%const GALGAS_uint * inShiftOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public : static GALGAS_%!TYPE_IDENTIFIER% * right_shift_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% * inOperand,\n%
  !^%const GALGAS_uint * inShiftOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if


if (SUPPORTED_OPERATORS & dotAssignOperator []) != 0 then
  %//--------------------------------- .= operator\n%
  %  friend void dotAssign_operation (GALGAS_%!TYPE_IDENTIFIER% * & ioResult,\n%
  %                                   const GALGAS_%!TYPE_IDENTIFIER% * inOperand\n%
  %                                   COMMA_LOCATION_ARGS) ;\n\n%
end if

if [ADD_ASSIGN_ARGUMENT_LIST length] > 0 then
  %//--------------------------------- += operator
  friend void addAssign_operation (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioResult%
  foreach ADD_ASSIGN_ARGUMENT_LIST do index IDX
    %,\n%!^%const GALGAS_%![mType identifierRepresentation]% * inOperand%![IDX string]
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end if

if [MINUS_ASSIGN_ARGUMENT_LIST length] > 0 then
  %//--------------------------------- -= operator
  friend void minusAssign_operation (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioResult%
  foreach MINUS_ASSIGN_ARGUMENT_LIST do index IDX
    %,\n%!^%const GALGAS_%![mType identifierRepresentation]% * inOperand%![IDX string]
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end if

if ((SUPPORTED_OPERATORS & (incDecOperator [] | dotAssignOperator [])) != 0)
 | ([MODIFIER_MAP count] > 0)
 | ([ADD_ASSIGN_ARGUMENT_LIST length] > 0)
 | ([MINUS_ASSIGN_ARGUMENT_LIST length] > 0) then
  %//--------------------------------- Modifier utility method\n%
  %  protected : static void insulate (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioOperand\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if ((SUPPORTED_OPERATORS & doNotGenererateObjectCompare []) == 0) then
%//--------------------------------- Comparison
  public : static PMSInt32 objectCompare (const GALGAS_%!TYPE_IDENTIFIER% * inOperand1,
                                          const GALGAS_%!TYPE_IDENTIFIER% * inOperand2) ;
%end if%
//--------------------------------- Introspection
  public : virtual const C_galgas_type_descriptor * typeDescriptor (void) const ;

//--------------------------------- Private data member\n%
foreach NATIVE_ATTRIBUTE_LIST do
  %  private : %if mIsPointer then %const % end if !mCppClassName % % if mIsPointer then %* % end if !mAttributeName% ;\n%
  if [mGetterName length] > 0 then
    %  public : inline %if mIsPointer then %const % end if!mCppClassName % % if mIsPointer then % * % end if !mGetterName% (void) const { return %!mAttributeName% ; }\n%
  end if
end foreach
foreach CURRENT_TYPE_ATTRIBUTE_LIST do
  %  private : GALGAS_%![mAttributeTypeIndex identifierRepresentation]% * mAttribute_% ![mAttributeName identifierRepresentation]% ;\n%
end foreach
%
//--------------------------------- Instance Method Invocation\n%
foreach INSTANCE_METHOD_MAP do
  %  friend void instanceMethodCall_%![key identifierRepresentation]% (%?^%GALGAS_%!TYPE_IDENTIFIER% * inObject%
  foreach mParameterList do index IDX
    %,\n%!^
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  end foreach
  if mHasCompilerArgument then
    %,\n%!^%C_Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS%
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if  
  %) ;\n\n%
end foreach
%//--------------------------------- Modifier invocation\n%
foreach MODIFIER_MAP do
  %  friend void modifierCall_%![key identifierRepresentation]% (%?^%GALGAS_%!TYPE_IDENTIFIER% * & ioResult%
  foreach mParameterList do index IDX
    %,\n%!^
    if mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & ioArgument% ![IDX string]
    elsif mFormalParameterPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_% ![mParameterType identifierRepresentation] % * & outArgument% ![IDX string]
    else # argumentIn
      %GALGAS_% ![mParameterType identifierRepresentation] % * inArgument% ![IDX string]
    end if
  end foreach
  if mHasCompilerArgument then
    %,\n%!^%C_Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS%
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if  
  %) ;\n\n%
end foreach
%//--------------------------------- Reader invocation declaration\n%
foreach READER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %  friend GALGAS_% ![mReturnedType identifierRepresentation] % * readerCall_% ![key identifierRepresentation] % (%?^
    %const GALGAS_%!TYPE_IDENTIFIER% * inObject%
    foreach mArgumentTypeList
      do index IDX %,\n% !^ %const GALGAS_%![mType identifierRepresentation]% * inOperand% ![IDX string]
    end foreach
    if mHasLexiqueArgument then
      %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
    else
      %\n% !^ %COMMA_LOCATION_ARGS%
    end if
    %) ;\n\n%
  end if
end foreach

if ((SUPPORTED_OPERATORS & generateEnumerationHelperMethods []) != 0) then
%//--------------------------------- Enumeration helper methods
  protected : virtual void populateEnumerationArray (const GALGAS_root * ioEnumerationArray [],
                                                     const bool inAscending) const ;
  public : virtual PMUInt32 count (void) const ;

%end if

if ((SUPPORTED_OPERATORS & generateSortedListComparisonMethod []) != 0) then
%//--------------------------------- Abstract method for comparing two sorted list elements
  protected : virtual PMSInt32
  compareSortedListElements (const GALGAS_root * inLeftAttributeList [],
                             const GALGAS_root * inRightAttributeList []) const ;

%end if

if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//--------------------------------- Enumerator declaration
  public : class cEnumerator : public AC_GALGAS_Enumerator {
    public : cEnumerator (const GALGAS_%!TYPE_IDENTIFIER% * inEnumeratedObject,
                          const bool inAscending) ;
  
  //--- Attribute access\n%
    foreach ENUMERATION_DESCRIPTOR_LIST do
%    public : const GALGAS_%![mEnumeratedType identifierRepresentation]% * attribute_%![mEnumerationName identifierRepresentation]% (void) const ;\n%
    end foreach%
  } ;
%
end if
#---------------- END OF CLASS DECLARATION
%} ;

