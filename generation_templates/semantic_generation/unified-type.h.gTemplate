//---------------------------------------------------------------------------*
//                                                                           *
//%!["@" . TYPE_NAME . " " . [TYPE_KIND kind] . " type" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;

//---------------------------------------------------------------------------*

class GALGAS_%!TYPE_IDENTIFIER% : public GALGAS_%![SUPER_TYPE_INDEX identifierRepresentation]% {
%
if [ENUM_CONSTANT_LIST length] > 0 then
%//--------------------------------- Enumeration type declaration
  private : typedef enum {%
  foreach ENUM_CONSTANT_LIST
    do %kEnum_%![mValue identifierRepresentation]
    between %, %
  end foreach
  %} enumeration ;

//--------------------------------- Private attribute
  private : enumeration mEnumValue ;

//--------------------------------- C++ constructor (for enumeration type)
  public : GALGAS_%!TYPE_IDENTIFIER% (const enumeration inValue COMMA_LOCATION_ARGS) ;

%
end if

if (SUPPORTED_OPERATORS & generateConstructorWithSelfObject []) != 0 then%
//--------------------------------- C++ constructor (for inheritance for predefined type)
  protected : GALGAS_%!TYPE_IDENTIFIER% (GALGASap_%!TYPE_IDENTIFIER% & inObject COMMA_LOCATION_ARGS) ;

%
end if

if (SUPPORTED_OPERATORS & generateCppConstructorWithNativeAttributeList []) != 0 then%
//--------------------------------- C++ constructor (with native attributes)\n%
  %  protected : GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach NATIVE_ATTRIBUTE_LIST
    do %const %!mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!^
  end foreach
  if [NATIVE_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS) ;\n\n%
  else
    %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
  end if
end if


if (SUPPORTED_OPERATORS & generateCppConstructorWithCurrentAttributeList []) != 0 then%
//--------------------------------- C++ constructor (with current attributes)\n%
  %  protected : GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach CURRENT_TYPE_ATTRIBUTE_LIST
    do index IDX %GALGASap_%![mAttributeTypeIndex identifierRepresentation]% & inAttribute_% ![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [CURRENT_TYPE_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS) ;\n\n%
  else
    %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
  end if
end if

if (SUPPORTED_OPERATORS & generateCppConstructorWithAllAttributeList []) != 0 then%
//--------------------------------- C++ constructor\n%
  %  protected : GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach INHERITED_ATTRIBUTE_LIST
    do index IDX %GALGASap_%![mAttributeTypeIndex identifierRepresentation]% & inAttribute_% ![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [INHERITED_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS) ;\n\n%
  else
    %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
  end if
end if

if (SUPPORTED_OPERATORS & generateNativeNewConstructor []) != 0 then
  %//--------------------------------- Native constructor\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% constructor_new (%?^
  foreach NATIVE_ATTRIBUTE_LIST
    do %const % !mCppClassName if mIsPointer then % *% end if if mUseReferenceForConstructor then % &% end if % inOperand_%!mAttributeName
    between %,\n%!^
  end foreach
  %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & generateVirtualDestructor []) != 0 then
%//--------------------------------- Virtual destructor
  protected : virtual ~ GALGAS_%!TYPE_IDENTIFIER% (void) ;\n\n%
end if

if [CONSTRUCTOR_MAP count] > 0 then
  %//--------------------------------- GALGAS constructors\n%
  foreach CONSTRUCTOR_MAP do
    %  public : static GALGASap_%![mReturnedType identifierRepresentation]% constructor_%![lkey identifierRepresentation]% (%?^
    foreach mArgumentTypeList
      do index IDX %GALGASap_% ![mType identifierRepresentation] % & inOperand%![IDX string]
      between %,\n%!^
    end foreach
    if mHasCompilerArgument & ([mArgumentTypeList length] > 0) then
      %,\n%!^ %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif mHasCompilerArgument then
      %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif [mArgumentTypeList length] > 0 then
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    else
      %LOCATION_ARGS) ;\n\n%
    end if
  end foreach
end if

%//--------------------------------- No copy
  private : GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% &) ;
  private : GALGAS_%!TYPE_IDENTIFIER% & operator = (const GALGAS_%!TYPE_IDENTIFIER% &) ;

%if (SUPPORTED_OPERATORS & generateDescriptionReaderUtilityMethod []) != 0 then
  %//--------------------------------- Implementation of reader 'description'\n%
  %  public : virtual void description (C_String & ioString,\n%
  %                                     const PMSInt32 inIndentation) ;\n%
end if

%//--------------------------------- Modifier invocation\n%
foreach MODIFIER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %  friend void modifierCall_%![lkey identifierRepresentation]% (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioResult%
    foreach mParameterList do index IDX
      %,\n%!^
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    end foreach
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
    %) ;\n\n%
  end if
end foreach

%
//--------------------------------- Modifiers
%
foreach MODIFIER_MAP do
  if mQualifier != [@readerQualifier isInherited] then
    %  protected : void modifier_%![lkey identifierRepresentation]% (%?^
    foreach mParameterList do index IDX
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    between %,\n%!^
    end foreach
    if [mParameterList length] == 0 then
      if mHasCompilerArgument then
        %C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS%
      else
        !^%LOCATION_ARGS%
      end if  
    else
      if mHasCompilerArgument then
        %,\n%!^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS%
      else
        %\n%!^%COMMA_LOCATION_ARGS%
      end if  
    end if
    %) ;\n\n%
  end if
end foreach
%
//--------------------------------- Instance Methods
%
foreach INSTANCE_METHOD_MAP do
  if mQualifier != [@readerQualifier isInherited] then
    %  protected : virtual void method_%![lkey identifierRepresentation]% (%?^
    foreach mParameterList do index IDX
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    between %,\n%!^
    end foreach
    if [mParameterList length] == 0 then
      if mHasCompilerArgument then
        %C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS%
      else
        !^%LOCATION_ARGS%
      end if  
    else
      if mHasCompilerArgument then
        %,\n%!^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS%
      else
        %\n%!^%COMMA_LOCATION_ARGS%
      end if  
    end if
    %) %
    if (mQualifier == [@readerQualifier isAbstract]) | (mQualifier == [@readerQualifier isOverridingAbstract]) then
      %= 0 %
    end if
    %;\n\n%
  end if
end foreach
%
//--------------------------------- Instance Method Invocation\n%
foreach INSTANCE_METHOD_MAP do
  if (mQualifier == [@readerQualifier isAbstract]) | (mQualifier == [@readerQualifier isBasic]) then
    %  friend void instanceMethodCall_%![lkey identifierRepresentation]% (%?^%GALGASap_%!TYPE_IDENTIFIER% inObject%
    foreach mParameterList do index IDX
      %,\n%!^
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    end foreach
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
    %) ;\n\n%
  end if
end foreach

%
//--------------------------------- Class Methods
%
foreach CLASS_METHOD_MAP do
  %  public : static void class_method_%![lkey identifierRepresentation]% (%?^
  foreach mParameterList do index IDX
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %GALGASap_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
    else # argumentIn
      %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
    end if
  between %,\n%!^
  end foreach
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end if  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
  end if
  %) ;\n\n%
end foreach
%
//--------------------------------- Readers
%
foreach READER_MAP do
  if mQualifier != [@readerQualifier isInherited] then
    %  protected : virtual GALGASap_% ![mReturnedType identifierRepresentation] % reader_% ![lkey identifierRepresentation] % (%?^
    foreach mArgumentTypeList
      do index IDX %GALGASap_%![mType identifierRepresentation]% & constinOperand% ![IDX string]
      between %,\n% !^
    end foreach
    if [mArgumentTypeList length] == 0 then
      if mHasCompilerArgument then
        %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
      else
        %LOCATION_ARGS%
      end if
    else
      if mHasCompilerArgument then
        %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
      else
        %\n% !^ %COMMA_LOCATION_ARGS%
      end if
    end if
    %) %
    if mQualifier == [@readerQualifier isAbstract] then
      % = 0%
    end if
    % ;\n\n%
  end if
end foreach

%//--------------------------------- Reader invocation declaration\n%
foreach READER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %  friend GALGASap_% ![mReturnedType identifierRepresentation] % readerCall_% ![lkey identifierRepresentation] % (%?^
    %GALGASap_%!TYPE_IDENTIFIER% & inObject%
    foreach mArgumentTypeList
      do index IDX %,\n% !^ %GALGASap_%![mType identifierRepresentation]% & constinOperand% ![IDX string]
    end foreach
    if mHasCompilerArgument then
      %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
    else
      %\n% !^ %COMMA_LOCATION_ARGS%
    end if
    %) ;\n\n%
  end if
end foreach

if (SUPPORTED_OPERATORS & binaryAndOperator []) != 0 then
  %//--------------------------------- & operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_and (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryOrOperator []) != 0 then
  %//--------------------------------- | operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_or (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryXorOperator []) != 0 then
  %//--------------------------------- ^ operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_xor (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryNotOperator []) != 0 then
  %//--------------------------------- & operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_not (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryTildeOperator []) != 0 then
  %//--------------------------------- ~ operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_tilde (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryConcatOperator []) != 0 then
  %//--------------------------------- . (concat) operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_concat (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
       !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2\n%
       !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryAddOperator []) != 0 then
  %//--------------------------------- + operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% add_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binarySubOperator []) != 0 then
  %//--------------------------------- - operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% substract_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryMulOperator []) != 0 then
  %//--------------------------------- * operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% multiply_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryDivOperator []) != 0 then
  %//--------------------------------- / operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% divide_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryModOperator []) != 0 then
  %//--------------------------------- mod operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% modulo_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand1,\n%
  !^%GALGASap_%!TYPE_IDENTIFIER% & inOperand2,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & unaryMinusOperator []) != 0 then
  %//--------------------------------- unary - operator\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% operator_unary_minus (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & incDecOperator []) != 0 then
  %//--------------------------------- ++, -- operators\n%
  %  public : static void increment_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioOperand,\n%
        !^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public : static void decrement_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioOperand,\n%
        !^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if (SUPPORTED_OPERATORS & binaryShiftOperator []) != 0 then
  %//--------------------------------- << and >> shift operators\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% left_shift_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%GALGASap_uint & inShiftOperand\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public : static GALGASap_%!TYPE_IDENTIFIER% right_shift_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%GALGASap_uint & inShiftOperand\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end if


if (SUPPORTED_OPERATORS & dotAssignOperator []) != 0 then
  %//--------------------------------- .= operator\n%
  %  public : static void dotAssign_operation (GALGASap_%!TYPE_IDENTIFIER% & ioResult,\n%
  %                                            GALGASap_%!TYPE_IDENTIFIER% inOperand\n%
  %                                            COMMA_LOCATION_ARGS) ;\n\n%
end if

if [ADD_ASSIGN_ARGUMENT_LIST length] > 0 then
  %//--------------------------------- += operator
    friend void addAssign_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioResult%
  foreach ADD_ASSIGN_ARGUMENT_LIST do index IDX
    %,\n%!^%GALGASap_%![mType identifierRepresentation]% inOperand%![IDX string]
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end if

if ((SUPPORTED_OPERATORS & (incDecOperator [] | dotAssignOperator [])) != 0)
 | ([MODIFIER_MAP count] > 0)
 | ([ADD_ASSIGN_ARGUMENT_LIST length] > 0) then
  %//--------------------------------- Modifier utility method\n%
  %  public : static void insulate (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioOperand\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end if

if ((SUPPORTED_OPERATORS & doNotGenererateObjectCompare []) == 0) then
%//--------------------------------- Comparison
  public : static PMSInt32 objectCompare (GALGASap_root & inOperand1,
                                          GALGASap_root & inOperand2) ;
%end if%
//--------------------------------- Introspection
  public : virtual const C_galgas_type_descriptor * typeDescriptor (void) const ;

//--------------------------------- Private data member(s)\n%
foreach NATIVE_ATTRIBUTE_LIST do
  %  private : %if mIsConst then %const % end if !mCppClassName % % if mIsPointer then %* % end if !mAttributeName% ;\n%
  if [mGetterName length] > 0 then
    %  public : inline %if mIsConst then %const % end if!mCppClassName % % if mIsPointer then % * % end if !mGetterName% (void) const { return %!mAttributeName% ; }\n%
  end if
end foreach
foreach PRIVATE_DATA_NUMBER_TYPED_LIST do
  %  public : GALGASap_%![mAttributeTypeIndex identifierRepresentation]% mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
end foreach

if ((SUPPORTED_OPERATORS & generateEnumerationHelperMethods []) != 0) then
%//--------------------------------- Enumeration helper methods
  protected : virtual void populateEnumerationArray (cRootObjectArray & ioEnumerationArray,
                                                     const bool inAscending) ;

%end if

if ((SUPPORTED_OPERATORS & generateSortedListComparisonMethod []) != 0) then
%//--------------------------------- Abstract method for comparing two sorted list elements
  protected : virtual PMSInt32 compareSortedListElements (GALGASap_root & inLeftAttributeList [],
                                                          GALGASap_root & inRightAttributeList []) const ;

%end if

if [WITH_ACCESSOR_MAP count] > 0 then
  %//--------------------------------- 'with' accessors\n%
  foreach WITH_ACCESSOR_MAP do
    %  friend cRootObjectArray * readWriteAccessForWithInstruction_%![lkey identifierRepresentation]% (%?^%C_Compiler * inCompiler,\n%
    !^%GALGASap_%!TYPE_IDENTIFIER% & ioMap,\n%
    !^%GALGASap_%![mArgumentType identifierRepresentation]% & inKey\n%
    !^%COMMA_LOCATION_ARGS) ;\n\n%
  end foreach
end if

if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//--------------------------------- Enumerator declaration
  public : class cEnumerator : public AC_GALGAS_Enumerator {
    public : cEnumerator (GALGASap_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                          const bool inAscending) ;

  //--- Update attribute proxies
    public : void updateAttributeProxies (void) ;
  
  //--- Current attribute proxies\n%
    foreach ENUMERATION_DESCRIPTOR_LIST do
%    public : GALGASap_%![mEnumeratedType identifierRepresentation]% attribute_%![mEnumerationName identifierRepresentation]% ;\n%
    end foreach%
  } ;
%
end if
#---------------- END OF CLASS DECLARATION
%} ;

//--------------------------------- Reader invocation declaration
%
foreach READER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %GALGASap_% ![mReturnedType identifierRepresentation] % readerCall_% ![lkey identifierRepresentation] % (%?^
    %GALGASap_%!TYPE_IDENTIFIER% & inObject%
    foreach mArgumentTypeList
      do index IDX %,\n% !^ %GALGASap_%![mType identifierRepresentation]% & constinOperand% ![IDX string]
    end foreach
    if mHasCompilerArgument then
      %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
    else
      %\n% !^ %COMMA_LOCATION_ARGS%
    end if
    %) ;\n\n%
  end if
end foreach

%//--------------------------------- Mofifier invocation declaration
%
foreach MODIFIER_MAP do
  if mQualifier == [@readerQualifier isBasic] then
    %  void modifierCall_%![lkey identifierRepresentation]% (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioResult%
    foreach mParameterList do index IDX
      %,\n%!^
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    end foreach
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
    %) ;\n\n%
  end if
end foreach

%
//--------------------------------- Instance Method Invocation\n%
foreach INSTANCE_METHOD_MAP do
  if (mQualifier == [@readerQualifier isAbstract]) | (mQualifier == [@readerQualifier isBasic]) then
    %void instanceMethodCall_%![lkey identifierRepresentation]% (%?^%GALGASap_%!TYPE_IDENTIFIER% inObject%
    foreach mParameterList do index IDX
      %,\n%!^
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GALGASap_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end if
    end foreach
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end if  
    %) ;\n\n%
  end if
end foreach

if [WITH_ACCESSOR_MAP count] > 0 then
  %//--------------------------------- 'with' accessors\n%
  foreach WITH_ACCESSOR_MAP do
    %cRootObjectArray * readWriteAccessForWithInstruction_%![lkey identifierRepresentation]% (%?^%C_Compiler * inCompiler,\n%
    !^%GALGASap_%!TYPE_IDENTIFIER% & ioMap,\n%
    !^%GALGASap_%![mArgumentType identifierRepresentation]% & inKey\n%
    !^%COMMA_LOCATION_ARGS) ;\n\n%
  end foreach
end if

if [ADD_ASSIGN_ARGUMENT_LIST length] > 0 then
  %//--------------------------------- += operator\n%
  %void addAssign_operation (%?^%GALGASap_%!TYPE_IDENTIFIER% & ioResult%
  foreach ADD_ASSIGN_ARGUMENT_LIST do index IDX
    %,\n%!^%GALGASap_%![mType identifierRepresentation]% inOperand%![IDX string]
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) ;\n\n%
end if

