//---------------------------------------------------------------------------*
//                                                                           *
//%!["@" . TYPE_NAME . " auto ptr type" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER%::GALGASap_%!TYPE_IDENTIFIER% (const GALGASap_%!TYPE_IDENTIFIER% & inSource) :
GALGASap_%!SUPER_TYPE_IDENTIFIER% (inSource) {
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER%::GALGASap_%!TYPE_IDENTIFIER% (const GALGASap_object & inSource) :
GALGASap_%!SUPER_TYPE_IDENTIFIER% (inSource) {
  macroNullOrValidObject (mPtr, GALGAS_%!TYPE_IDENTIFIER%) ;
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% & GALGASap_%!TYPE_IDENTIFIER%::operator = (const GALGASap_%!TYPE_IDENTIFIER% & inSource) {
  macroAssignObject (mPtr, inSource.mPtr) ;
  return * this ;
}

%

foreach READER_MAP do
  if mQualifier == [@methodQualifier isBasic] then
    %//---------------------------------------------------------------------------*\n\n%
    %GALGASap_% ![mReturnedType identifierRepresentation] % GALGASap_%!TYPE_IDENTIFIER%::readerCall_% ![lkey identifierRepresentation] % (%?^
    foreach mArgumentTypeList
      do index IDX %const GALGASap_%![mType identifierRepresentation]% & inOperand_% ![IDX string]
      between %,\n% !^
    end foreach
    if [mArgumentTypeList length] == 0 then
      if mHasCompilerArgument then
        %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
      else
        %LOCATION_ARGS%
      end if
    elsif mHasCompilerArgument then
      %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
    else
      %\n% !^ %COMMA_LOCATION_ARGS%
    end if
    %) const {\n%
    %  GALGASap_%![mReturnedType identifierRepresentation]% result ;\n%
    %  if (isValid ()) {\n%
    %    result = ptr (HERE)->reader_%![lkey identifierRepresentation]% (%
    foreach mArgumentTypeList
      do index IDX %inOperand_% ![IDX string]
      between %, %
    end foreach
    if [mArgumentTypeList length] > 0 then
      if mHasCompilerArgument then
        %, inCompiler COMMA_THERE%
      else
        % COMMA_THERE%
      end if
    else
      if mHasCompilerArgument then
        %inCompiler COMMA_THERE%
      else
        %THERE%
      end if
    end if
    %) ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end if
end foreach

%//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  GALGAS_%!TYPE_IDENTIFIER% * GALGASap_%!TYPE_IDENTIFIER%::ptr (LOCATION_ARGS) {
    macroValidObjectThere (mPtr, GALGAS_%!TYPE_IDENTIFIER%) ;
    return (GALGAS_%!TYPE_IDENTIFIER% *) mPtr ;
  }
#endif

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  const GALGAS_%!TYPE_IDENTIFIER% * GALGASap_%!TYPE_IDENTIFIER%::ptr (LOCATION_ARGS) const {
    macroValidObjectThere (mPtr, const GALGAS_%!TYPE_IDENTIFIER%) ;
    return (const GALGAS_%!TYPE_IDENTIFIER% *) mPtr ;
  }
#endif

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER%::GALGASap_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% * inSourcePtr) :
GALGASap_%!SUPER_TYPE_IDENTIFIER% (inSourcePtr) {
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% & GALGASap_%!TYPE_IDENTIFIER%::operator = (GALGAS_%!TYPE_IDENTIFIER% * inSourcePtr) {
  macroAssignObject (mPtr, inSourcePtr) ;
  return *this ;
}

