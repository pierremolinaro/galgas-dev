//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (LOCATION_ARGS) :
GALGAS_mapproxy (%![[ATTRIBUTE_LIST length] + 1 string]% COMMA_THERE) {
}

//---------------------------------------------------------------------------*

GALGASap_%!TYPE_IDENTIFIER% GALGASap_%!TYPE_IDENTIFIER%::constructor_null (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% * result = NULL ;
  macroMyNew (result, GALGAS_%!TYPE_IDENTIFIER% (THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::class_method_makeRegularProxy (%?^%GALGASap_%!ASSOCIATED_MAP_TYPE_IDENTIFIER% & ioMap,
                                       %!^%GALGASap_string inKey,
                                       %!^%GALGASap_%!TYPE_IDENTIFIER% & outProxy
                                       %!^%COMMA_LOCATION_ARGS) {
  outProxy.drop () ;
  if (inKey.isValid () && ioMap.isValid ()) {
    ioMap.insulate (HERE) ;
    GALGAS_classMapIndex * p = NULL ;
    macroMyNew (p, GALGAS_%!TYPE_IDENTIFIER% (THERE)) ;
    outProxy = p ;
    outProxy.ptr (HERE)->internalMakeRegularProxy (ioMap.ptr (HERE), inKey) ;
  }
}
%foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGASap_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]% (%?^%C_Compiler * inCompiler\n%
  %                                       %!^%COMMA_LOCATION_ARGS) const {\n%
  %  GALGASap_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
  %  capCollectionElement attributeList = getAttributeList (inCompiler COMMA_THERE) ;\n%
  %  if (attributeList.ptrNoVerif () != NULL) {\n%
  %    macroValidObject (attributeList.ptrNoVerif (), cCollectionElement_%!ASSOCIATED_MAP_TYPE_IDENTIFIER%) ;\n%
  %    result = ((cCollectionElement_%!ASSOCIATED_MAP_TYPE_IDENTIFIER% *) attributeList.ptrNoVerif ())->mAttribute_%![mAttributeName identifierRepresentation]%;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach

foreach SEARCH_METHOD_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGASap_%!TYPE_IDENTIFIER% GALGASap_%!TYPE_IDENTIFIER%::constructor_%![mMethodName identifierRepresentation]% (%?^%GALGASap_%!ASSOCIATED_MAP_TYPE_IDENTIFIER% & inMap,\n%
  %                                                %!^%GALGASap_lstring & inKey,\n%
  %                                                %!^%C_Compiler * inCompiler\n%
  %                                                %!^%COMMA_LOCATION_ARGS) {\n%
  %  GALGASap_%!TYPE_IDENTIFIER% result ;\n%
  %  if (inMap.isValid () && inKey.isValid ()) {\n%
  block 4 :
    %GALGAS_%!TYPE_IDENTIFIER% * p = NULL ;\n%
    %macroMyNew (p, GALGAS_%!TYPE_IDENTIFIER% (THERE)) ;\n%
    %result = p ;\n%
    %const utf32 kSearchErrorMessage [%![[mErrorMessage length] + 1 string]%] = %![mErrorMessage utf32Representation]% ;\n%
    %const bool ok = result.ptr (HERE)->internalSearchKey (inMap, inKey, kSearchErrorMessage, inCompiler COMMA_THERE) ;\n%
    %if (! ok) {\n%
    %  result.drop () ;\n%
    %}\n%
  end block
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach
%
