//---------------------------------------------------------------------------*

cMapElement_%!TYPE_IDENTIFIER%::cMapElement_%!TYPE_IDENTIFIER% (%?^%const GALGAS_lstring & inKey%
  foreach ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE)%
foreach ATTRIBUTE_LIST
  do %,\n%  %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
end foreach
% {
}

//---------------------------------------------------------------------------*

bool cMapElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mAttribute_lkey.isValid ()%
    foreach ATTRIBUTE_LIST
      do % && mAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
    end foreach
  % ;
}

//---------------------------------------------------------------------------*

cMapElement * cMapElement_%!TYPE_IDENTIFIER%::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_%!TYPE_IDENTIFIER% (mAttribute_lkey%
    foreach ATTRIBUTE_LIST
      do %, mAttribute_%![mAttributeName identifierRepresentation]
    end foreach
  % COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cMapElement_%!TYPE_IDENTIFIER%::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
%
  foreach ATTRIBUTE_LIST
    do %// mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end foreach
%}

//---------------------------------------------------------------------------*

enumComparisonResult cMapElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cMapElement_%!TYPE_IDENTIFIER% * operand = (cMapElement_%!TYPE_IDENTIFIER% *) inOperand ;
  enumComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
%  foreach ATTRIBUTE_LIST do
     %  if (kOperandEqual == result) {\n%
     %    result = mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (operand->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
     %  }\n%
   end foreach
%  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% & GALGAS_%!TYPE_IDENTIFIER%::operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_mapWithMapToOverride (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inMapToOverride
                                                   %!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptyMap (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::reader_overriddenMap (UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  overridenMap (result) ;
  return result ;
}

//---------------------------------------------------------------------------*
//  Map automaton states                                                     *
//---------------------------------------------------------------------------*

%
foreach MAP_AUTOMATON_STATE_MAP
before
  %#ifndef DO_NOT_GENERATE_CHECKINGS\n%
  %  static const PMUInt32 kMapStateCount_%!TYPE_IDENTIFIER% = %![[MAP_AUTOMATON_STATE_MAP count] string]% ;\n%
  %#endif\n%
do
  %static const PMUInt32 kMapState_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% = %![mStateIndex string]% ;\n%
end foreach
%
//---------------------------------------------------------------------------*
//  Map automaton actions                                                     *
//---------------------------------------------------------------------------*

%
foreach MAP_AUTOMATON_ACTION_MAP
before
  %static const PMUInt32 kMapActionCount_%!TYPE_IDENTIFIER% = %![[MAP_AUTOMATON_ACTION_MAP count] string]% ;\n%
do
  %static const PMUInt32 kMapAction_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% = %![mActionIndex string]% ;\n%
end foreach
%
//---------------------------------------------------------------------------*
//  Map automaton transitions                                                *
//---------------------------------------------------------------------------*

%
foreach MAP_AUTOMATON_DEFINITION_SORTEDLIST
before
  %static const cMapAutomatonTransition kMapTransitions_%!TYPE_IDENTIFIER% [%
  ![[MAP_AUTOMATON_DEFINITION_SORTEDLIST length] string]
  % * %
  ![[MAP_AUTOMATON_ACTION_MAP count] string]
  %] = {\n%
do
  %// State '%!mStateName%', index %![mStateIndex string]% \n%
  foreach mTransitionList do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mTargetStateName identifierRepresentation]% /* %![mTargetStateIndex string]% */, %
    switch mTransitionMessageKind
    when noMessage :
      %kMapAutomatonNoIssue%
    when warningMessage :
      %kMapAutomatonIssueWarning%
    when errorMessage :
      %kMapAutomatonIssueError%
    end switch
    %, %
    ![mTransitionMessage utf8Representation]
    %}, // for action '%!mActionName%', (index %![mActionIndex string]%)\n%
  end foreach
after
 %} ;\n%
end foreach
%
//---------------------------------------------------------------------------*
//  Map automaton final state issues                                         *
//---------------------------------------------------------------------------*

%
foreach MAP_AUTOMATON_DEFINITION_SORTEDLIST
before
  %static const cMapAutomatonFinalIssue kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER% [%![[MAP_AUTOMATON_DEFINITION_SORTEDLIST length] string]%] = {\n%
do
  %  {%
  switch mStateMessageKind
  when noMessage :
    %kMapAutomatonNoIssue%
  when warningMessage :
    %kMapAutomatonIssueWarning%
  when errorMessage :
    %kMapAutomatonIssueError%
  end switch
  %, %
  ![mStateMessage utf8Representation]
  %},// state '%!mStateName%' (index %![mStateIndex string]%)\n%
after
  %} ;\n%
end foreach

if [MAP_AUTOMATON_DEFINITION_SORTEDLIST length] > 0 then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_closeBranch (%?^%GALGAS_location inErrorLocation,\n%
                            !^%C_Compiler * inCompiler\n%
                            !^%COMMA_LOCATION_ARGS) {\n%
  %  closeBranch (inErrorLocation,\n%
  %               kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER%,\n%
  %               #ifndef DO_NOT_GENERATE_CHECKINGS\n%
  %                 kMapStateCount_%!TYPE_IDENTIFIER%,\n%
  %               #endif\n%
  %               inCompiler COMMA_THERE) ;\n%
  %}\n\n%
end if

if [MAP_AUTOMATON_DEFINITION_SORTEDLIST length] > 0 then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::method_checkAutomatonStates (%?^%GALGAS_location inErrorLocation,\n%
                            !^%C_Compiler * inCompiler\n%
                            !^%COMMA_LOCATION_ARGS) const {\n%
  %  checkAutomatonStates (inErrorLocation, kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER%, inCompiler COMMA_THERE) ;\n%
  %}\n\n%
end if

foreach MAP_OVERRIDE_LIST do
  %//---------------------------------------------------------------------------*\n%
  %//%!["map override '" . mOverrideName . "'" stringByLeftAndRightPadding !75 !' ']%*\n%
  %//---------------------------------------------------------------------------*\n\n%
  %static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_%
  !TYPE_IDENTIFIER
  %_%
  ![mOverrideName identifierRepresentation]
  % [%![[mBranchBehaviourSortedListForMapOverride length] string]%] = {\n%
  foreach mBranchBehaviourSortedListForMapOverride do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mStartStateName identifierRepresentation]% /* %![mStartStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mCurrentStateName identifierRepresentation]% /* %![mCurrentStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mFinalStateName identifierRepresentation]% /* %![mFinalStateIndex string]% */%
    %, %
    switch mBehaviourMessageKind
    when noMessage :
      %kMapAutomatonNoIssue%
    when warningMessage :
      %kMapAutomatonIssueWarning%
    when errorMessage :
      %kMapAutomatonIssueError%
    end switch
    %, %
    ![mBehaviourMessage utf8Representation]
    %},\n%
  end foreach  
  %} ;\n\n%
  %//---------------------------------------------------------------------------*\n\n%
  %static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_%
  !TYPE_IDENTIFIER
  %_%
  ![mOverrideName identifierRepresentation]
  % [%![[mBranchCombinationSortedListForMapOverride length] string]%] = {\n%
  foreach mBranchCombinationSortedListForMapOverride do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mStartStateName identifierRepresentation]% /* %![mStartStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mCurrentStateName identifierRepresentation]% /* %![mCurrentStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mFinalStateName identifierRepresentation]% /* %![mFinalStateIndex string]% */%
    %, %
    switch mBehaviourMessageKind
    when noMessage :
      %kMapAutomatonNoIssue%
    when warningMessage :
      %kMapAutomatonIssueWarning%
    when errorMessage :
      %kMapAutomatonIssueError%
    end switch
    %, %
    ![mBehaviourMessage utf8Representation]
    %},\n%
  end foreach  
  %} ;\n\n%
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_openOverrideFor%![[mOverrideName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%C_Compiler * inCompiler\n%
                                !^%COMMA_LOCATION_ARGS) {\n%
  %  openOverride (kBranchBehaviourForOverride_%!TYPE_IDENTIFIER%_%![mOverrideName identifierRepresentation]%, %![[mBranchBehaviourSortedListForMapOverride length] string]%,\n%
  %                kBranchCombinationForOverride_%!TYPE_IDENTIFIER%_%![mOverrideName identifierRepresentation]%, %![[mBranchCombinationSortedListForMapOverride length] string]%,\n%
  %                %![mOverrideName utf8Representation]%,\n%
  %                inCompiler\n%
  %                COMMA_THERE) ;\n%
  %}\n\n%
end foreach

%
%foreach INSERT_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_%![mInsertMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
    %  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
    %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  foreach ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end foreach
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  block 2 :
    %const char * kInsertErrorMessage = %![mErrorMessage utf8Representation]% ;\n%
    %const char * kShadowErrorMessage = %![mShadowErrorMessage utf8Representation]% ;\n%
    if [mInitialStateName string] == "" then
      %performInsert (attributes, inCompiler, 0, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
    else
      %performInsert (attributes, inCompiler, kMapState_%!TYPE_IDENTIFIER%_%![mInitialStateName identifierRepresentation]%, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
    end if
  end block
  %}\n\n%
end foreach

foreach SEARCH_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %const char * kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]% = %![mErrorMessage utf8Representation]% ;\n\n%
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::%
    if [mActionName string] == "" then
      %method_%
    else
      %modifier_%
    end if
    ![mSearchMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) %
    if [mActionName string] == "" then
      %const %
    end if
    %{\n%
  block 2 :
    %const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) performSearch (%?^%inKey,\n%
    !^%inCompiler,\n%
    if [mActionName string] != "" then
      !^%kMapAction_%!TYPE_IDENTIFIER%_%![mActionName identifierRepresentation]%,\n%
      !^%kMapTransitions_%!TYPE_IDENTIFIER%,\n%
      !^%kMapActionCount_%!TYPE_IDENTIFIER%,\n%
      !^%#ifndef DO_NOT_GENERATE_CHECKINGS\n%
      !^%  kMapStateCount_%!TYPE_IDENTIFIER%,\n%
      !^%#endif\n%
    end if
    !^%kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]%\n%
    !^%COMMA_THERE) ;\n%
    %if (NULL == p) {\n%
    foreach ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]%.drop () ;\n%
    end foreach
    %}else{\n%
    %  macroValidSharedObject (p, const cMapElement_%!TYPE_IDENTIFIER%) ;\n%
    foreach ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]% = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    end foreach
    %}\n%
  end block
  %}\n\n%
end foreach


foreach REMOVE_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_%![mMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    foreach ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outArgument%![IDX string]
    end foreach
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
  block 2 :
    %const char * kRemoveErrorMessage = %![mErrorMessage utf8Representation]% ;\n%
    %capCollectionElement attributes ;\n%
    %performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;\n%
    %cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes.ptrNoVerif () ;\n%
    %if (NULL != p) {\n%
    %  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
    foreach ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]% = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    end foreach
    %}\n%
  end block
  %}\n\n%
end foreach

if HAS_INSERT_OR_REPLACE then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_insertOrReplace (%?^%GALGAS_lstring inKey%
  foreach ATTRIBUTE_LIST
    do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inArgument%![IDX string]
  end foreach
  %\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
  %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  foreach ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end foreach
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  %  performInsertOrReplace (attributes) ;\n%
  %}\n\n%
end if

foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]%ForKey (%?^%const GALGAS_string & inKey,\n%
  %                                               %!^%C_Compiler * inCompiler\n%
  %                                               %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, const cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach 

foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inAttributeValue,\n%
  %                           %!^%GALGAS_string inKey,\n%
  %                           %!^%C_Compiler * inCompiler\n%
  %                           %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mAttribute_%![mAttributeName identifierRepresentation]% = inAttributeValue ;\n%
  %  }\n%
  %}\n\n%
end foreach 

foreach WITH_ACCESSOR_MAP do
  %//---------------------------------------------------------------------------*\n\n%
  %cMapElement_%!TYPE_IDENTIFIER% * GALGAS_%!TYPE_IDENTIFIER%::readWriteAccessForWithInstruction_%![lkey identifierRepresentation]% (%?^%C_Compiler * inCompiler,\n%
  !^%const GALGAS_%![mArgumentType identifierRepresentation]% & inKey\n%
  !^%COMMA_LOCATION_ARGS) {\n%
  if [lkey string] == "hasKey" then
  %  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  else
  %  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% COMMA_THERE) ;\n%
  end if
  %  cMapElement_%!TYPE_IDENTIFIER% * result = (cMapElement_%!TYPE_IDENTIFIER% *) p ;\n%
  %  macroNullOrValidSharedObject (result, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return result ;\n%
  %}\n\n%
end foreach
%//---------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                       %!^%const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_%!TYPE_IDENTIFIER%::current_lkey (void) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr () ;
  macroValidSharedObject (p, const cMapElement) ;
  return p->mAttribute_lkey ;
}

%foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mAttributeName identifierRepresentation]% (void) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr () ;\n%
  %  macroValidSharedObject (p, const cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %}\n\n%
end foreach 
%

