//---------------------------------------------------------------------------*
//                                                                           *
//%!["Class for element of '@" . TYPE_IDENTIFIER . "' list" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

class cCollectionElement_%!TYPE_IDENTIFIER% : public cCollectionElement {
  public : GALGAS_%!TYPE_IDENTIFIER%_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  foreach ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;
} ;

//---------------------------------------------------------------------------*

cCollectionElement_%!TYPE_IDENTIFIER%::cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  foreach ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (%
foreach ATTRIBUTE_LIST
  do %in_%![mAttributeName identifierRepresentation]
  between %, %
end foreach
%) {
}

//---------------------------------------------------------------------------*

bool cCollectionElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mObject.isValid () ;
}

//---------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_%!TYPE_IDENTIFIER%::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_%!TYPE_IDENTIFIER% (%
    foreach ATTRIBUTE_LIST
      do %mObject.mAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end foreach
  % COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cCollectionElement_%!TYPE_IDENTIFIER%::description (C_String & ioString, const PMSInt32 inIndentation) const {
%
  foreach ATTRIBUTE_LIST do
    %  ioString << "\\n" ;\n%
    %  ioString.writeStringMultiple ("| ", inIndentation) ;\n%
    %  ioString << %![mAttributeName utf8Representation]% ":" ;\n%
    %  mObject.mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end foreach
%}

//---------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_%!TYPE_IDENTIFIER% * operand = (cCollectionElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_%!TYPE_IDENTIFIER%) ;
  return mObject.objectCompare (operand->mObject) ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_list () {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_listWithValue (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
  foreach ATTRIBUTE_LIST
  do index IDX %inOperand%![IDX string]%.isValid ()%
  between % && %
  end foreach
  %) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (attributes%
    foreach ATTRIBUTE_LIST
    do index IDX %, inOperand%![IDX string]
    end foreach
    % COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (%?^%capCollectionElement & outAttributes%
  foreach ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) {
  cCollectionElement_%!TYPE_IDENTIFIER% * p = NULL ;
  macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  foreach ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  % COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) {
  if (isValid ()%
  foreach ATTRIBUTE_LIST
  do index IDX % && inOperand%![IDX string]%.isValid ()%
  end foreach
  %) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
    foreach ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end foreach
    % COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::modifier_prependValue (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inOperand%![IDX string]
  between %,\n%!^
  end foreach
  %\n%!^%COMMA_LOCATION_ARGS) {
  if (isValid ()%
    foreach ATTRIBUTE_LIST
      do index IDX % && inOperand%![IDX string]%.isValid ()%
    end foreach
  %) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
    foreach ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end foreach
    % COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    prependAttributeArray (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::modifier_popFirst (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
  %C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
    macroUniqueSharedObject (p) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::modifier_popLast (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
  %C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
    macroUniqueSharedObject (p) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_first (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
  %C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_last (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
  %C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_concat (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand
                     %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::reader_subListWithRange (%?^%const GALGAS_range & inRange,
                                               %!^%C_Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result = GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::reader_subListFromIndex (%?^%const GALGAS_uint & inIndex,
                                               %!^%C_Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result = GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::dotAssign_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% inOperand
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

%
foreach ATTRIBUTE_LIST do index IDX
  if mHasSetter then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]%AtIndex (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inOperand,\n%
  %                                              %!^%GALGAS_uint inIndex,\n%
  %                                              %!^%C_Compiler * inCompiler\n%
  %                                              %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) objectPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
  %    macroUniqueSharedObject (p) ;\n%
  %    p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% = inOperand ;\n%
  %  }\n%
  %}\n\n%
  end if

  if mHasGetter then
    %//---------------------------------------------------------------------------*\n\n%
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]%AtIndex (%?^%const GALGAS_uint & inIndex,\n%
    %                                              %!^%C_Compiler * inCompiler\n%
    %                                              %!^%COMMA_LOCATION_ARGS) const {\n%
    %  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;\n%
    %  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;\n%
    %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
    %  if (NULL != p) {\n%
    %    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
    %    result = p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end if
end foreach
%

//---------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                   %!^%const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%_2E_element cEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cCollectionElement_%!TYPE_IDENTIFIER% * p = (const cCollectionElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, const cCollectionElement_%!TYPE_IDENTIFIER%) ;
  return p->mObject ;
}


%foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mAttributeName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cCollectionElement_%!TYPE_IDENTIFIER% * p = (const cCollectionElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, const cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mObject.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %}\n\n%
end foreach
%


