//-- Start of generic part --*

//--------------------------------- Object cloning
  protected : virtual AC_GALGAS_root * clonedObject (void) const ;

//--------------------------------- Object extraction
  public : static GALGAS_%!TYPE_IDENTIFIER% extractObject (%?^%const GALGAS_object & inObject,
               %!^%C_Compiler * inCompiler
               %!^%COMMA_LOCATION_ARGS) ;

%
if [CONSTRUCTOR_MAP count] > 0 then
  %//--------------------------------- GALGAS constructors\n%
  for () in CONSTRUCTOR_MAP do
    %  public : static GALGAS_%![mReturnedType identifierRepresentation]% constructor_%![[lkey string] identifierRepresentation]% (%?^
    for () in mArgumentTypeList
      do index IDX %const class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & inOperand%![IDX string]
      between %,\n%!^
    end
    if mHasCompilerArgument & ([mArgumentTypeList length] > 0) then
      %,\n%!^%class C_Compiler * inCompiler%
      %\n%!^%COMMA_LOCATION_ARGS) ;\n\n%
    elsif mHasCompilerArgument then
      %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif [mArgumentTypeList length] > 0 then
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    else
      %LOCATION_ARGS) ;\n\n%
    end
  end
end

if (SUPPORTED_OPERATORS & generateCopyConstructorAndAssignmentOperator []) != 0 then
%//--------------------------------- Handle copy
  public : GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) ;
  public : GALGAS_%!TYPE_IDENTIFIER% & operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryShiftOperator []) != 0 then
  %//--------------------------------- << and >> shift operators\n%
  %public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% left_shift_operation (%?^%const GALGAS_uint inShiftOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% right_shift_operation (%?^%const GALGAS_uint inShiftOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & plusEqualOperatorWithExpression []) != 0 then
  %//--------------------------------- += operator (with expression)\n%
  %  public : VIRTUAL_IN_DEBUG void dotAssign_operation (const GALGAS_%!TYPE_IDENTIFIER% inOperand\n%
  %                                                      COMMA_LOCATION_ARGS) ;\n\n%
end

if [ADD_ASSIGN_ARGUMENT_LIST length] > 0 then
%//--------------------------------- += operator (with list of field expressions)
  public : VIRTUAL_IN_DEBUG void addAssign_operation (%?^
  for () in ADD_ASSIGN_ARGUMENT_LIST
  do index IDX %const class GALGAS_%![mFormalArgumentType identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  if (SUPPORTED_OPERATORS & plusEqualOperatorWithFieldListNeedsCompilerArg []) != 0 then
    %,\n%!^%C_Compiler * inCompiler%
  end
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end

if (SUPPORTED_OPERATORS & binaryAndOperator []) != 0 then
  %//--------------------------------- & operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_and (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryOrOperator []) != 0 then
  %//--------------------------------- | operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_or (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryXorOperator []) != 0 then
  %//--------------------------------- ^ operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_xor (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & unaryNotOperator []) != 0 then
  %//--------------------------------- not operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_not (LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & unaryTildeOperator []) != 0 then
  %//--------------------------------- ~ operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_tilde (LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryConcatOperator []) != 0 then
  %//--------------------------------- . (concat) operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_concat (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
       !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryAddOperator []) != 0 then
  %//--------------------------------- + operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% add_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binarySubOperator []) != 0 then
  %//--------------------------------- - operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% substract_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryMulOperator []) != 0 then
  %//--------------------------------- * operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% multiply_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryDivOperator []) != 0 then
  %//--------------------------------- / operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% divide_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & binaryModOperator []) != 0 then
  %//--------------------------------- mod operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% modulo_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & unaryMinusOperator []) != 0 then
  %//--------------------------------- unary - operator\n%
  %  public : VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_unary_minus (%?^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if (SUPPORTED_OPERATORS & incDecOperator []) != 0 then
  %//--------------------------------- ++, -- operators\n%
  %  public : VIRTUAL_IN_DEBUG void increment_operation (%?^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public : VIRTUAL_IN_DEBUG void decrement_operation (%?^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end
if (SUPPORTED_OPERATORS & generateDescriptionReaderUtilityMethod []) != 0 then
  %//--------------------------------- Implementation of reader 'description'\n%
  %  public : VIRTUAL_IN_DEBUG void description (C_String & ioString,\n%
  %                                              const int32_t inIndentation) const ;\n%
end

if (SUPPORTED_OPERATORS & doNotGenererateObjectCompare []) == 0 then
%//--------------------------------- Comparison
  public : typeComparisonResult objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;
%end


%
//--------------------------------- Setters
%
for () in MODIFIER_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public : VIRTUAL_IN_DEBUG void modifier_%![[lkey string] identifierRepresentation]% (%?^
      for () in mParameterList do index IDX
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else # argumentIn
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) ;\n\n%
    end
  end
end
%
//--------------------------------- Instance Methods
%
for () in INSTANCE_METHOD_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public : VIRTUAL_IN_DEBUG void method_%![[lkey string] identifierRepresentation]% (%?^
      for () in mParameterList do index IDX
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else # argumentIn
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) const ;\n\n%
    end
  end
end
%//--------------------------------- Class Methods
%
for () in CLASS_METHOD_MAP do
  %  public : static void class_method_%![[lkey string] identifierRepresentation]% (%?^
  for () in mParameterList do index IDX
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
    else # argumentIn
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
    end
  between %,\n%!^
  end
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end  
  end
  %) ;\n\n%
end
%
//--------------------------------- Getters
%
for () in READER_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public : VIRTUAL_IN_DEBUG class GALGAS_% ![mReturnedType identifierRepresentation] % reader_% ![[lkey string] identifierRepresentation] % (%?^
      for () in mArgumentTypeList
        do index IDX %const class GALGAS_%![mFormalArgumentType identifierRepresentation]% & constinOperand% ![IDX string]
        between %,\n% !^
      end
      if [mArgumentTypeList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
        else
          %LOCATION_ARGS%
        end
      else
        if mHasCompilerArgument then
          %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
        else
          %\n% !^ %COMMA_LOCATION_ARGS%
        end
      end
      %) const ;\n\n%
    end
  end
end

%
//--------------------------------- Introspection
  public : VIRTUAL_IN_DEBUG const C_galgas_type_descriptor * staticTypeDescriptor (void) const ;
%
if ((SUPPORTED_OPERATORS & generateEnumerationHelperMethods []) != 0) then
%//--------------------------------- Enumeration helper methods
  protected : VIRTUAL_IN_DEBUG void populateEnumerationArray (capCollectionElementArray & inEnumerationArray,
                                                              const typeEnumerationOrder inOrder) const ;

%end

if ((SUPPORTED_OPERATORS & supportWithAccessor []) != 0) then
  %  public : VIRTUAL_IN_DEBUG cMapElement_%!TYPE_IDENTIFIER% * readWriteAccessForWithInstruction (%?^%C_Compiler * inCompiler,\n%
  !^%const GALGAS_string & inKey\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end

if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//--------------------------------- Friend\n
  friend class cEnumerator_%!TYPE_IDENTIFIER% ;
%end
% 
} ; // End of GALGAS_%!TYPE_IDENTIFIER% class

%if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//---------------------------------------------------------------------------------------------------------------------*
//   Enumerator declaration                                                    *
//---------------------------------------------------------------------------------------------------------------------*

class cEnumerator_%!TYPE_IDENTIFIER% : public cGenericAbstractEnumerator {
  public : cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
     %!^%const typeEnumerationOrder inOrder) ;

//--- Current element access\n%
  for () in ENUMERATION_DESCRIPTOR_LIST do
%  public : class GALGAS_%![mEnumeratedType identifierRepresentation]% current_%![mEnumerationName identifierRepresentation]% (LOCATION_ARGS) const ;\n%
  end
  if not [ENUMERATED_OBJECT_TYPE isNull] then
%//--- Current element access\n%
%  public : class GALGAS_%![ENUMERATED_OBJECT_TYPE identifierRepresentation]% current (LOCATION_ARGS) const ;\n%
  end
%} ;\n%
end
%
//---------------------------------------------------------------------------------------------------------------------*

extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;

%
