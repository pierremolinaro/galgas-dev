%if [CURRENT_ATTRIBUTE_LIST length] == 0 then
  %//---------------------------------------------------------------------------*\n\n%
  %enumComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {\n%
  %  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;\n%
  %}\n\n%
else
  %//---------------------------------------------------------------------------*\n\n%
  %enumComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {\n%
  if SUPER_TYPE_IDENTIFIER == "" then
    %  enumComparisonResult result = kOperandEqual ;\n%
  else
    %  enumComparisonResult result = %if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end if%::objectCompare (inOperand) ;\n%
  end if
  if [CURRENT_ATTRIBUTE_LIST length] > 0 then
    %  const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %  macroNullOrValidObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %  const cPtr_%!TYPE_IDENTIFIER% * q = (const cPtr_%!TYPE_IDENTIFIER% *) inOperand.mObjectPtr ;\n%
    %  macroNullOrValidObject (q, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
    foreach CURRENT_ATTRIBUTE_LIST do
      %  if (kOperandEqual == result) {\n%
      %    result = p->mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (q->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
      %  }\n%
    end foreach
  end if
  %  return result ;\n%
  %}\n\n%
end if
%
//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end if% () {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (cPtr_%!TYPE_IDENTIFIER% * inSourcePtr) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end if% (inSourcePtr) {
  macroNullOrValidObject (inSourcePtr, cPtr_%!TYPE_IDENTIFIER%) ;
}

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (LOCATION_ARGS) {\n%
  %  GALGAS_%!TYPE_IDENTIFIER% result ;\n%
  %  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (THERE)) ;\n%
  %  return result ;\n%
  %}\n\n%
end if

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & inAttribute_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS%  
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if
  %) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
      between % && %
    end foreach
  %) {
    macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end foreach
    % COMMA_THERE)) ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end if

if ([ALL_ATTRIBUTE_LIST length] > 0) & not IS_ABSTRACT then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::insulate (LOCATION_ARGS) {\n%
  %  if (isValid () && (mObjectPtr->retainCount () > 1)) {\n%
  %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    cPtr_%!TYPE_IDENTIFIER% * r = NULL ;\n%
  %    macroMyNew (r, cPtr_%!TYPE_IDENTIFIER% (%
  foreach ALL_ATTRIBUTE_LIST
    do %p->mAttribute_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  % COMMA_THERE)) ;\n%
  %    macroAssignObject (mObjectPtr, r) ;\n%
  %    macroReleaseObject (r) ;\n%
  %  }\n%
  %}\n\n%
end if

foreach CONCRETE_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  !generateProcedure [
    !"cPtr_" . TYPE_IDENTIFIER . "::method_" . [mMethodName identifierRepresentation]
    !mSignature
    !mInstructionList
    !true # Method is const
    !"C_Compiler"
    !true # Generate location Argument
    !false # Generate 'resetTemplateString'
  ]
end foreach

foreach CURRENT_ATTRIBUTE_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
  %  GALGAS_%![mAttributeTypeIndex identifierRepresentation]% result ;\n%
  %  if (NULL != mObjectPtr) {\n%
  %    const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach

foreach CURRENT_ATTRIBUTE_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%GALGAS_%![mAttributeTypeIndex identifierRepresentation]% inValue\n%
                        !^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  if (NULL != mObjectPtr) {\n%
  %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mAttribute_%![mAttributeName identifierRepresentation]% = inValue ;\n%
  %  }\n%
  %}\n\n%
end foreach

foreach INSTANCE_METHOD_MAP do
  if not mIsCategory then
    if (mQualifier == [@methodQualifier isAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal]) then
      %//---------------------------------------------------------------------------*\n\n%
      %void GALGAS_%!TYPE_IDENTIFIER%::method_%![lkey identifierRepresentation]% (%?^
      foreach mParameterList do index IDX
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else # argumentIn
          %GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end if
      between %,\n%!^
      end foreach
      if [mParameterList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end if  
      else
        if mHasCompilerArgument then
          %,\n%!^%C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end if  
      end if
      %) const {\n%
      %  if (mObjectPtr != NULL) {\n%
      %    const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
      %    macroValidObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
      %    p->method_%![lkey identifierRepresentation]% (%
      foreach mParameterList do index IDX
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %constinArgument% ![IDX string]%, %
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %ioArgument% ![IDX string]%, %
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %outArgument% ![IDX string]%, %
        else # argumentIn
          %inArgument% ![IDX string]%, %
        end if
      end foreach
      %inCompiler COMMA_THERE) ;\n%
      %  }\n%
      %}\n\n%
    end if
  end if
end foreach

%//---------------------------------------------------------------------------*
//%!["Pointer class for @" . TYPE_NAME . " class" stringByLeftAndRightPadding !75 !' ']%*
//---------------------------------------------------------------------------*

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end if
%) :
%if SUPER_TYPE_IDENTIFIER == "" then %acPtr_class% else %cPtr_%!SUPER_TYPE_IDENTIFIER end if% (%
  foreach INHERITED_ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  if [INHERITED_ATTRIBUTE_LIST length] > 0 then
    % COMMA_THERE%
  else
    %THERE%
  end if
%)%
  foreach CURRENT_ATTRIBUTE_LIST
    do %,\n% %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
  end foreach
% {
}

%
if not IS_ABSTRACT then
  %//---------------------------------------------------------------------------*\n\n%
  %const C_galgas_type_descriptor * cPtr_%!TYPE_IDENTIFIER%::classDescriptor (void) const {\n%
  %  return & kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;\n%
  %}\n\n%
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const PMSInt32 /* inIndentation */) const {\n%
    %  ioString << "[@%!TYPE_NAME%]" ;\n%
    %}\n\n%
  else
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const PMSInt32 inIndentation) const {\n%
    %  ioString << "[@%!TYPE_NAME%:" ;\n%
    foreach ALL_ATTRIBUTE_LIST
      do %  mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation+1) ;\n%
      between %  ioString << ", " ;\n%
    end foreach
    %  ioString << "]" ;\n%
    %}\n\n%
  end if
end if
%

