//---------------------------------------------------------------------------*
//   Object comparison                                                       *
//---------------------------------------------------------------------------*

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
%typeComparisonResult cPtr_%!TYPE_IDENTIFIER%::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------*
%end if

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
%typeComparisonResult cPtr_%!TYPE_IDENTIFIER%::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) inOperandPtr ;
  macroValidSharedObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;
% foreach ALL_ATTRIBUTE_LIST do
    %  if (kOperandEqual == result) {\n%
    %    result = mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (p->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
    %  }\n%
  end foreach
%  return result ;
}

//---------------------------------------------------------------------------*
%end if%

typeComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const PMSInt32 mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const PMSInt32 operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end if% () {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const cPtr_%!TYPE_IDENTIFIER% * inSourcePtr) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end if% (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_%!TYPE_IDENTIFIER%) ;
}

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (LOCATION_ARGS) {\n%
  %  GALGAS_%!TYPE_IDENTIFIER% result ;\n%
  %  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (THERE)) ;\n%
  %  return result ;\n%
  %}\n\n%
end if

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inAttribute_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS%  
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if
  %) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
      between % && %
    end foreach
  %) {
    macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end foreach
    % COMMA_THERE)) ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end if

if ([ALL_ATTRIBUTE_LIST length] > 0) & not IS_ABSTRACT then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::insulate (LOCATION_ARGS) {\n%
  %  if (isValid () && (mObjectPtr->retainCount () > 1)) {\n%
  %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    cPtr_%!TYPE_IDENTIFIER% * r = NULL ;\n%
  %    macroMyNew (r, cPtr_%!TYPE_IDENTIFIER% (%
  foreach ALL_ATTRIBUTE_LIST
    do %p->mAttribute_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  % COMMA_THERE)) ;\n%
  %    macroAssignSharedObject (mObjectPtr, r) ;\n%
  %    macroDetachSharedObject (r) ;\n%
  %  }\n%
  %}\n\n%
end if

foreach CURRENT_ATTRIBUTE_LIST do
  if mHasGetter then
    %//---------------------------------------------------------------------------*\n\n%
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
    %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
    %  if (NULL != mObjectPtr) {\n%
    %    const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %    macroValidSharedObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %    result = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end if
end foreach

foreach CURRENT_ATTRIBUTE_LIST do
  if mHasSetter then
    %//---------------------------------------------------------------------------*\n\n%
    %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inValue\n%
                          !^%COMMA_UNUSED_LOCATION_ARGS) {\n%
    %  if (NULL != mObjectPtr) {\n%
    %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %    p->mAttribute_%![mAttributeName identifierRepresentation]% = inValue ;\n%
    %  }\n%
    %}\n\n%
  end if
end foreach

%//---------------------------------------------------------------------------*
//%!["Pointer class for @" . TYPE_NAME . " class" stringByLeftAndRightPadding !75 !' ']%*
//---------------------------------------------------------------------------*

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end if
%) :
%if SUPER_TYPE_IDENTIFIER == "" then %acPtr_class% else %cPtr_%!SUPER_TYPE_IDENTIFIER end if% (%
  foreach INHERITED_ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  if [INHERITED_ATTRIBUTE_LIST length] > 0 then
    % COMMA_THERE%
  else
    %THERE%
  end if
%)%
  foreach CURRENT_ATTRIBUTE_LIST
    do %,\n% %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
  end foreach
% {
}

%
if not IS_ABSTRACT then
  %//---------------------------------------------------------------------------*\n\n%
  %const C_galgas_type_descriptor * cPtr_%!TYPE_IDENTIFIER%::classDescriptor (void) const {\n%
  %  return & kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;\n%
  %}\n\n%
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const PMSInt32 /* inIndentation */) const {\n%
    %  ioString << "[@%!TYPE_NAME%]" ;\n%
    %}\n\n%
  else
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const PMSInt32 inIndentation) const {\n%
    %  ioString << "[@%!TYPE_NAME%:" ;\n%
    foreach ALL_ATTRIBUTE_LIST
      do %  mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation+1) ;\n%
      between %  ioString << ", " ;\n%
    end foreach
    %  ioString << "]" ;\n%
    %}\n\n%
  end if
end if
%

