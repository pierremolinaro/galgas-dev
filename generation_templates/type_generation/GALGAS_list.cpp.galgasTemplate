//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const bool inIsValid) :
AC_GALGAS_list_new (inIsValid),
mArray () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::~ GALGAS_%!TYPE_IDENTIFIER% (void) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyList (UNUSED_LOCATION_ARGS) {
  return GALGAS_%!TYPE_IDENTIFIER% (true) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_uint GALGAS_%!TYPE_IDENTIFIER%::getter_length (UNUSED_LOCATION_ARGS) const {
  GALGAS_uint result ;
  if (isValid ()) {
    result = GALGAS_uint ((uint32_t) mArray.count ()) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_range GALGAS_%!TYPE_IDENTIFIER%::getter_range (UNUSED_LOCATION_ARGS) const {
  GALGAS_range result ;
  if (isValid ()) {
    result = GALGAS_range (GALGAS_uint (0), GALGAS_uint ((uint32_t) mArray.count ())) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,
                    %!^%const int32_t inIndentation) const {
  ioString << "<list @%!TYPE_IDENTIFIER%:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    ioString << " ("
             << cStringWithSigned (mArray.count ())
             << " object" << ((mArray.count () > 1) ? "s" : "")
             << "): " ;
    for (int32_t i=0 ; i<mArray.count () ; i++) {
      mArray (i COMMA_HERE).description (ioString, inIndentation + 2) ;
    }
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_listWithValue (%?^
  for () in ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
  for () in ATTRIBUTE_LIST
  do index IDX %inOperand%![IDX string]%.isValid ()%
  between % && %
  end
  %) {
    result = GALGAS_%!TYPE_IDENTIFIER% (true) ;
    result.addAssign_operation (%
    for () in ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end
    % COMMA_THERE) ;
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
/*
void GALGAS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (%?^%capCollectionElement & outAttributes%
  for () in ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) {
  cCollectionElement_%!TYPE_IDENTIFIER% * p = NULL ;
  macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for () in ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end
  % COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}
*/
//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^
  for () in ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()%
  for () in ATTRIBUTE_LIST
  do index IDX % && inOperand%![IDX string]%.isValid ()%
  end
  %) {
    const GALGAS_%!TYPE_IDENTIFIER%_2D_element element (%
    for () in ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end
    %) ;
    mArray.addObject (element) ;
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::setter_insertAtIndex (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inOperand%![IDX string]%,\n%!^
  end
   %const GALGAS_uint inInsertionIndex,\n%!^
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid ()%
  for () in ATTRIBUTE_LIST
  do index IDX % && inOperand%![IDX string]%.isValid ()%
  end
  %) {
    const GALGAS_%!TYPE_IDENTIFIER%_2D_element element (%
    for () in ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end
    %) ;
    const int32_t index = (int32_t) inInsertionIndex.uintValue () ;
    if (index <= mArray.count ()) {
      mArray.insertObjectAtIndex (element, index COMMA_THERE) ;
    }else{
      C_String s = "insertAtIndex: insertion index (" ;
      s << cStringWithSigned (index) << ") >= length (" << cStringWithSigned (mArray.count ()) << ")" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::setter_removeAtIndex (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %const GALGAS_uint inRemoveIndex,\n%!^
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {%
 for () in ATTRIBUTE_LIST do index IDX
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%
  if (isValid () && inRemoveIndex.isValid ()) {
    const int32_t index = (int32_t) inRemoveIndex.uintValue () ;
    if (index <= mArray.count ()) {
      const GALGAS_%!TYPE_IDENTIFIER%_2D_element element = mArray (index COMMA_THERE) ;
%
 for () in ATTRIBUTE_LIST do index IDX
    %      outOperand%![IDX string] % = element.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end
%      mArray.removeObjectAtIndex (index COMMA_THERE) ;
    }else{
      C_String s = "removeAtIndex: remove index (" ;
      s << cStringWithSigned (index) << ") >= length (" << cStringWithSigned (mArray.count ()) << ")" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::setter_popFirst (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {%
 for () in ATTRIBUTE_LIST do index IDX
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%
  if (isValid ()) {
    if (mArray.count () > 0) {
      const GALGAS_%!TYPE_IDENTIFIER%_2D_element element = mArray (0 COMMA_THERE) ;
%
 for () in ATTRIBUTE_LIST do index IDX
    %      outOperand%![IDX string] % = element.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end
%      mArray.removeObjectAtIndex (0 COMMA_THERE) ;
    }else{
      C_String s = "popFirst: list is empty" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::setter_popLast (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {%
 for () in ATTRIBUTE_LIST do index IDX
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%
  if (isValid ()) {
    if (mArray.count () > 0) {
      const int32_t index = mArray.count () - 1 ;
      const GALGAS_%!TYPE_IDENTIFIER%_2D_element element = mArray (index COMMA_THERE) ;
%
 for () in ATTRIBUTE_LIST do index IDX
    %      outOperand%![IDX string] % = element.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end
%      mArray.removeObjectAtIndex (index COMMA_THERE) ;
    }else{
      C_String s = "popLast: list is empty" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_first (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) const {\n%
 for () in ATTRIBUTE_LIST do index IDX
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%
  if (isValid ()) {
    if (mArray.count () > 0) {
      const GALGAS_%!TYPE_IDENTIFIER%_2D_element element = mArray (0 COMMA_THERE) ;
%
 for () in ATTRIBUTE_LIST do index IDX
    %      outOperand%![IDX string] % = element.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end
%    }else{
      C_String s = "popFirst: list is empty" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_last (%?^
  for () in ATTRIBUTE_LIST do index IDX
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %C_Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) const {\n%
 for () in ATTRIBUTE_LIST do index IDX
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%
  if (isValid ()) {
    if (mArray.count () > 0) {
      const int32_t index = mArray.count () - 1 ;
      const GALGAS_%!TYPE_IDENTIFIER%_2D_element element = mArray (index COMMA_THERE) ;
%
 for () in ATTRIBUTE_LIST do index IDX
    %      outOperand%![IDX string] % = element.mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end
%    }else{
      C_String s = "popLast: list is empty" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::add_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,
                                            %!^%C_Compiler * /* inCompiler */
                                            %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.mArray.setCapacity (result.mArray.count () + inOperand.mArray.count ()) ;
    for (int32_t i=0 ; i<inOperand.mArray.count () ; i++) {
      result.mArray.addObject (inOperand.mArray (i COMMA_THERE)) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_subListWithRange (%?^%const GALGAS_range & inRange,
                                               %!^%C_Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inRange.isValid ()) {
    const uint32_t startIdx = inRange.mAttribute_start.uintValue () ;
    const uint32_t length = inRange.mAttribute_length.uintValue () ;
    if ((startIdx + length) <= (uint32_t) mArray.count ()) {
      result = GALGAS_%!TYPE_IDENTIFIER% (true) ;
      result.mArray.setCapacity ((int32_t) length) ;
      for (uint32_t i=0 ; i<length ; i++) {
        result.mArray.addObject (mArray ((int32_t) (startIdx + i) COMMA_THERE)) ;
      }
    }else{
      C_String s = "subListWithRange: max index (" ;
      s << cStringWithUnsigned (startIdx + length) << ") > length (" << cStringWithSigned (mArray.count ()) << ")" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_subListFromIndex (%?^%const GALGAS_uint & inIndex,
                                               %!^%C_Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inIndex.isValid ()) {
    const int32_t index = (int32_t) inIndex.uintValue () ;
    if (index <= mArray.count ()) {
      result = GALGAS_%!TYPE_IDENTIFIER% (true) ;
      result.mArray.setCapacity (mArray.count () + 1 - index) ;
      for (int32_t i=index ; i<mArray.count () ; i++) {
        result.mArray.addObject (mArray (i COMMA_THERE)) ;
      }
    }else{
      C_String s = "subListFromIndex: index (" ;
      s << cStringWithSigned (index) << ") > length (" << cStringWithSigned (mArray.count ()) << ")" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_subListToIndex (%?^%const GALGAS_uint & inIndex,
                                               %!^%C_Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inIndex.isValid ()) {
    const int32_t index = (int32_t) inIndex.uintValue () ;
    if (index < mArray.count ()) {
      result = GALGAS_%!TYPE_IDENTIFIER% (true) ;
      result.mArray.setCapacity (index + 1) ;
      for (int32_t i=0 ; i<=index ; i++) {
        result.mArray.addObject (mArray (i COMMA_THERE)) ;
      }
    }else{
      C_String s = "subListFromIndex: index (" ;
      s << cStringWithSigned (index) << ") > length (" << cStringWithSigned (mArray.count ()) << ")" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::plusAssign_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% inOperand,
                          %!^%C_Compiler * /* inCompiler */
                          %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand.isValid ()) {
    mArray.setCapacity (mArray.count () + inOperand.mArray.count ()) ;
    for (int32_t i=0 ; i<inOperand.mArray.count () ; i++) {
      mArray.addObject (inOperand.mArray (i COMMA_THERE)) ;
    }
  }
}

%
for () in ATTRIBUTE_LIST do index IDX
  if mHasSetter then
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]%AtIndex (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inOperand,\n%
  %                                              %!^%GALGAS_uint inIndex,\n%
  %                                              %!^%C_Compiler * inCompiler\n%
  %                                              %!^%COMMA_LOCATION_ARGS) {\n%
  %  if (isValid () && inOperand.isValid () && inIndex.isValid ()) {\n%
  %    const int32_t index = (int32_t) inIndex.uintValue () ;\n%
  %    if (index <= mArray.count ()) {\n%
  %      mArray (index COMMA_THERE).mAttribute_%![mAttributeName identifierRepresentation]% = inOperand ;\n%
  %    }else{\n%
  %      C_String s = "set%![mAttributeName stringByCapitalizingFirstCharacter]%AtIndex: index (" ;\n%
  %      s << cStringWithSigned (index) << ") >= length (" << cStringWithSigned (mArray.count ()) << ")" ;\n%
  %      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;\n%
  %    }\n%
  %  }\n%
  %}\n\n%
  end

  if mHasGetter then
    %//---------------------------------------------------------------------------------------------------------------------*\n\n%
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::getter_%![mAttributeName identifierRepresentation]%AtIndex (%?^%const GALGAS_uint & inIndex,\n%
    %                                              %!^%C_Compiler * inCompiler\n%
    %                                              %!^%COMMA_LOCATION_ARGS) const {\n%
    %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
    %  if (isValid () && inIndex.isValid ()) {\n%
    %    const int32_t index = (int32_t) inIndex.uintValue () ;\n%
    %    if (index < mArray.count ()) {\n%
    %      result = mArray (index COMMA_THERE).mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    %    }else{\n%
    %      C_String s = "getter mValueAtIndex: index (" ;\n%
    %      s << cStringWithSigned (index) << ") >= length (" << cStringWithSigned (mArray.count ()) << ")" ;\n%
    %      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;\n%
    %    }\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  end
end
%

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    int32_t r = mArray.count () - inOperand.mArray.count () ;
    if (r < 0) {
      result = kFirstOperandLowerThanSecond ;
    }else if (r > 0) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      for (int32_t i=0 ; (i<mArray.count ()) && (result == kOperandEqual) ; i++) {
        result = mArray (i COMMA_HERE).objectCompare (inOperand.mArray (i COMMA_HERE)) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                   %!^%const typeEnumerationOrder inOrder) :
mEnumerationArrayEx (),
mEnumerationArray (),
mIndex (0),
mOrder (inOrder) {
  mEnumerationArray = inEnumeratedObject.mArray ;
}

//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::~ cEnumerator_%!TYPE_IDENTIFIER% (void) {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cEnumerator_%!TYPE_IDENTIFIER%::hasCurrentObject (void) const {
  return mIndex < mEnumerationArray.count () ;
}

//---------------------------------------------------------------------------------------------------------------------*

bool cEnumerator_%!TYPE_IDENTIFIER%::hasNextObject (void) const {
  return (mIndex + 1) < mEnumerationArray.count () ;
}

//---------------------------------------------------------------------------------------------------------------------*

//const cCollectionElement * cEnumerator_%!TYPE_IDENTIFIER%::currentObjectPtr (LOCATION_ARGS) const {
//  return mEnumerationArrayEx.pointerAtIndexForReadAccess (mIndex COMMA_THERE) ;
//}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%_2D_element cEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const int32_t idx = (mOrder == kENUMERATION_UP)
    ? mIndex
    : mEnumerationArray.count () - 1 - mIndex
  ;
  return mEnumerationArray (idx COMMA_THERE) ;
}


%for () in ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mAttributeName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const int32_t idx = (mOrder == kENUMERATION_UP)\n%
  %    ? mIndex\n%
  %    : mEnumerationArray.count () - 1 - mIndex\n%
  %  ;\n%
  %  return mEnumerationArray (idx COMMA_THERE).mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %}\n\n%
end
%


