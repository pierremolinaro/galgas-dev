//---------------------------------------------------------------------------*
//                                                                           *
//%!["Class for element of '@" . TYPE_IDENTIFIER . "' sorted list" stringByLeftAndRightPadding !75 !' ']%*
//                                                                           *
//---------------------------------------------------------------------------*

class cSortedListElement_%!TYPE_IDENTIFIER% : public cSortedListElement {
//--- List attributes
%
    foreach ATTRIBUTE_LIST
      do %  public : GALGAS_%![mAttributeTypeIndex identifierRepresentation]% mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    end foreach
%
//--- Constructor
  public : cSortedListElement_%!TYPE_IDENTIFIER% (%?^
  foreach ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cSortedListElement * copy (void) ;

//--- Virtual method for comparing elements
  public : virtual enumComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Description
 public : virtual void description (C_String & ioString, const PMSInt32 inIndentation) const ;

//--- Virtual method that comparing element for sorting
  public : virtual enumComparisonResult compareForSorting (const cSortedListElement * inOperand) const ;
} ;

//---------------------------------------------------------------------------*

cSortedListElement_%!TYPE_IDENTIFIER%::cSortedListElement_%!TYPE_IDENTIFIER% (%?^
  foreach ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
%\n%
!^%COMMA_LOCATION_ARGS) :
cSortedListElement (THERE)%
foreach ATTRIBUTE_LIST
  do %,\n%  %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
end foreach
% {
}

//---------------------------------------------------------------------------*

bool cSortedListElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return %
    foreach ATTRIBUTE_LIST
      do %mAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
      between % && %
    end foreach
  % ;
}

//---------------------------------------------------------------------------*

cSortedListElement * cSortedListElement_%!TYPE_IDENTIFIER%::copy (void) {
  cSortedListElement * result = NULL ;
  macroMyNew (result, cSortedListElement_%!TYPE_IDENTIFIER% (%
    foreach ATTRIBUTE_LIST
      do %mAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end foreach
  % COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

void cSortedListElement_%!TYPE_IDENTIFIER%::description (C_String & /* ioString */, const PMSInt32 /* inIndentation */) const {
%
  foreach ATTRIBUTE_LIST
    do %// mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end foreach
%}

//---------------------------------------------------------------------------*

enumComparisonResult cSortedListElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  enumComparisonResult result = kOperandNotValid ;
  if (NULL != inOperand) {
    result = kOperandEqual ;
    cSortedListElement_%!TYPE_IDENTIFIER% * operand = (cSortedListElement_%!TYPE_IDENTIFIER% *) inOperand ;
    macroValidObject (operand, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%  foreach ATTRIBUTE_LIST do
     %    if (kOperandEqual == result) {\n%
     %      result = mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (operand->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
     %    }\n%
   end foreach
%  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
GALGAS_sortedlist () {
}

//---------------------------------------------------------------------------*

enumComparisonResult cSortedListElement_%!TYPE_IDENTIFIER%::compareForSorting (const cSortedListElement * inOperand) const {
  enumComparisonResult result = kOperandEqual ;
  const cSortedListElement_%!TYPE_IDENTIFIER% * operand = (const cSortedListElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidObject (operand, const cSortedListElement_%!TYPE_IDENTIFIER%) ;
% foreach SORT_ATTRIBUTE_LIST do
    %  if (result == kOperandEqual) {\n%
    %    result = %
    if mAscendingOrder then
      %mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (operand->mAttribute_%![mAttributeName identifierRepresentation]%)%
    else
      %operand->mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (mAttribute_%![mAttributeName identifierRepresentation]%)%
    end if
    % ;\n%
    %  }\n%
  end foreach
%  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptySortedList (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_sortedListWithValue (%?COL0
  foreach ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!COL0
  end foreach
  %\n%!COL0%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result = constructor_emptySortedList (THERE) ;
  cSortedListElement * p = NULL ;
  macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (%
  foreach ATTRIBUTE_LIST
  do index IDX %inOperand%![IDX string]
  between %, %
  end foreach
  % COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroReleaseObject (p) ;
  result.addObject (attributes) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end foreach
%
    %!^%COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = NULL ;
    macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (%
    foreach ATTRIBUTE_LIST
    do index IDX %inOperand%![IDX string]
    between %, %
    end foreach
    % COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroReleaseObject (p) ;
    addObject (attributes) ;
  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::dotAssign_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% inOperand
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()) {
    appendSortedList (inOperand) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_concat (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand
                                %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inOperand.isValid ()) {
    result = constructor_emptySortedList (THERE) ;
    result = *this ;
    result.appendSortedList (inOperand) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::modifier_popSmallest (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
           %C_Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeSmallestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptrNoVerif () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::modifier_popGreatest (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
           %C_Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeGreatestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptrNoVerif () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_smallest (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
     %C_Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  smallestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptrNoVerif () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::method_greatest (%?^
  foreach ATTRIBUTE_LIST
  do index IDX %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end foreach
     %C_Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  greatestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptrNoVerif () ;
  if (NULL == p) {
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] %.drop () ;\n%
  end foreach
%  }else{
    macroValidObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 foreach ATTRIBUTE_LIST do index IDX
    %    outOperand%![IDX string] % = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  end foreach
%  }
}

//---------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                   %!^%const bool inAscending) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inAscending) ;
}

%foreach ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mAttributeName identifierRepresentation]% (void) const {\n%
  %  const cSortedListElement_%!TYPE_IDENTIFIER% * p = (const cSortedListElement_%!TYPE_IDENTIFIER% *) currentObjectPtr () ;\n%
  %  macroValidObject (p, const cSortedListElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %}\n\n%
end foreach
%

