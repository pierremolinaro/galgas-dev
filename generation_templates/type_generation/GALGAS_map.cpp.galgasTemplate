//---------------------------------------------------------------------------------------------------------------------*

cMapElement_%!TYPE_IDENTIFIER%::cMapElement_%!TYPE_IDENTIFIER% (%?^%const GALGAS_lstring & inKey%
  for () in ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE)%
for () in ATTRIBUTE_LIST
  do %,\n%  %mProperty_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
end
% {
}

//---------------------------------------------------------------------------------------------------------------------*

bool cMapElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mProperty_lkey.isValid ()%
    for () in ATTRIBUTE_LIST
      do % && mProperty_%![mAttributeName identifierRepresentation]%.isValid ()%
    end
  % ;
}

//---------------------------------------------------------------------------------------------------------------------*

cMapElement * cMapElement_%!TYPE_IDENTIFIER%::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_%!TYPE_IDENTIFIER% (mProperty_lkey%
    for () in ATTRIBUTE_LIST
      do %, mProperty_%![mAttributeName identifierRepresentation]
    end
  % COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

%if [ATTRIBUTE_LIST length] == 0 then
  %void cMapElement_%!TYPE_IDENTIFIER%::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {\n%
else
  %void cMapElement_%!TYPE_IDENTIFIER%::description (C_String & ioString, const int32_t inIndentation) const {\n%
  for () in ATTRIBUTE_LIST do
    %  ioString << "\\n" ;\n%
    %  ioString.writeStringMultiple ("| ", inIndentation) ;\n%
    %  ioString << %![mAttributeName utf8Representation]% ":" ;\n%
    %  mProperty_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
end
%}

//---------------------------------------------------------------------------------------------------------------------*

typeComparisonResult cMapElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cMapElement_%!TYPE_IDENTIFIER% * operand = (cMapElement_%!TYPE_IDENTIFIER% *) inOperand ;
  typeComparisonResult result = mProperty_lkey.objectCompare (operand->mProperty_lkey) ;
%  for () in ATTRIBUTE_LIST do
     %  if (kOperandEqual == result) {\n%
     %    result = mProperty_%![mAttributeName identifierRepresentation]%.objectCompare (operand->mProperty_%![mAttributeName identifierRepresentation]%) ;\n%
     %  }\n%
   end
%  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_map () {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_map (inSource) {
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% & GALGAS_%!TYPE_IDENTIFIER%::operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_mapWithMapToOverride (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inMapToOverride
                                                   %!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_overriddenMap (%?^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

void GALGAS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^%const GALGAS_lstring & inKey%
for () in ATTRIBUTE_LIST
  do index IDX %,\n%!^%const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inArgument%![IDX string]
end
%,\n %!^%C_Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) {\n%
%  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
%  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
for () in ATTRIBUTE_LIST
  do index IDX %, inArgument%![IDX string]
end
% COMMA_HERE)) ;\n%
%  capCollectionElement attributes ;\n%
%  attributes.setPointer (p) ;\n%
%  macroDetachSharedObject (p) ;\n%
block 2 :
  %const char * kInsertErrorMessage = "@%!TYPE_IDENTIFIER% insert error: '\%K' already in map" ;\n%
  %const char * kShadowErrorMessage = "" ;\n%
  %performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
end
%}

%for () in INSERT_METHOD_LIST do
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_%![mInsertMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    for () in ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inArgument%![IDX string]
    end
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
    %  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
    %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  block 2 :
    %const char * kInsertErrorMessage = %![mErrorMessage utf8Representation]% ;\n%
    %const char * kShadowErrorMessage = %![mShadowErrorMessage utf8Representation]% ;\n%
    %performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
  end
  %}\n\n%
end

for () in SEARCH_METHOD_LIST do
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %const char * kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]% = %![mErrorMessage utf8Representation]% ;\n\n%
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::method_%![mSearchMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outArgument%![IDX string]
  end
  if mLocationAttribute then
    %,\n%!^%GALGAS_location & outKeyLocation%
  end
  %,\n %!^%C_Compiler * inCompiler%
  %\n %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) performSearch (%?^%inKey,\n%
               !^%inCompiler,\n%
               !^%kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]%\n%
               !^%COMMA_THERE) ;\n%
  %  if (NULL == p) {\n%
  for () in ATTRIBUTE_LIST do index IDX
    %    outArgument%![IDX string]%.drop () ;\n%
  end
  if mLocationAttribute then
    %    outKeyLocation.drop () ;\n%
  end
  %  }else{\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  for () in ATTRIBUTE_LIST do index IDX
    %    outArgument%![IDX string]% = p->mProperty_%![mAttributeName identifierRepresentation]% ;\n%
  end
  if mLocationAttribute then
    %    outKeyLocation = p->mProperty_lkey.mProperty_location ;\n%
  end
  %  }\n%
  %}\n\n%
end


for () in REMOVE_METHOD_LIST do
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_%![mMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & outArgument%![IDX string]
  end
  %,\n %!^%C_Compiler * inCompiler%
  %\n %!^%COMMA_LOCATION_ARGS) {\n%
  %  const char * kRemoveErrorMessage = %![mErrorMessage utf8Representation]% ;\n%
  %  capCollectionElement attributes ;\n%
  %  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;\n%
  %  if (NULL == p) {\n%
  for () in ATTRIBUTE_LIST do index IDX
    %    outArgument%![IDX string]%.drop () ;\n%
  end
  %  }else{\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  for () in ATTRIBUTE_LIST do index IDX
    %    outArgument%![IDX string]% = p->mProperty_%![mAttributeName identifierRepresentation]% ;\n%
  end
  %  }\n%

  %}\n\n%
end

if HAS_INSERT_OR_REPLACE then
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_insertOrReplace (%?^%GALGAS_lstring inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %,\n%!^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inArgument%![IDX string]
  end
  %\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
  %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  %  performInsertOrReplace (attributes) ;\n%
  %}\n\n%
end

for () in ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::getter_%![mAttributeName identifierRepresentation]%ForKey (%?^%const GALGAS_string & inKey,\n%
  %                                               %!^%C_Compiler * inCompiler\n%
  %                                               %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mProperty_%![mAttributeName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end 

for () in ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inAttributeValue,\n%
  %                           %!^%GALGAS_string inKey,\n%
  %                           %!^%C_Compiler * inCompiler\n%
  %                           %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mProperty_%![mAttributeName identifierRepresentation]% = inAttributeValue ;\n%
  %  }\n%
  %}\n\n%
end 

%//---------------------------------------------------------------------------------------------------------------------*

cMapElement_%!TYPE_IDENTIFIER% * GALGAS_%!TYPE_IDENTIFIER%::readWriteAccessForWithInstruction (%?^%C_Compiler * inCompiler,\n%
             !^%const GALGAS_string & inKey\n%
             !^%COMMA_LOCATION_ARGS) {
  cMapElement_%!TYPE_IDENTIFIER% * result = (cMapElement_%!TYPE_IDENTIFIER% *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_%!TYPE_IDENTIFIER%) ;
  return result ;
}

%

%//---------------------------------------------------------------------------------------------------------------------*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                       %!^%const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator (inOrder) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%_2D_element cEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;
  return GALGAS_%!TYPE_IDENTIFIER%_2D_element (p->mProperty_lkey%
for () in ATTRIBUTE_LIST do
  %, p->mProperty_%![mAttributeName identifierRepresentation]
end
%) ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_%!TYPE_IDENTIFIER%::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mProperty_lkey ;
}

%for () in ATTRIBUTE_LIST do index IDX
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mAttributeName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mProperty_%![mAttributeName identifierRepresentation]% ;\n%
  %}\n\n%
end 
%

