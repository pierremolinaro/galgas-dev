%if [CURRENT_ATTRIBUTE_LIST length] == 0 then
  %//---------------------------------------------------------------------------*\n\n%
  %enumComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {\n%
  %  return (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;\n%
  %}\n\n%
else
  %//---------------------------------------------------------------------------*\n\n%
  %enumComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {\n%
  %  enumComparisonResult result = inherited::objectCompare (inOperand) ;\n%
  if [CURRENT_ATTRIBUTE_LIST length] > 0 then
    %  const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %  macroNullOrValidObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %  const cPtr_%!TYPE_IDENTIFIER% * q = (const cPtr_%!TYPE_IDENTIFIER% *) inOperand.mObjectPtr ;\n%
    %  macroNullOrValidObject (q, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
    foreach CURRENT_ATTRIBUTE_LIST do
      %  if (kOperandEqual == result) {\n%
      %    result = p->mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (q->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
      %  }\n%
    end foreach
  end if
  %  return result ;\n%
  %}\n\n%
end if
%
//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
GALGAS_%!SUPER_TYPE_IDENTIFIER% () {
}

//---------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (cPtr_%!TYPE_IDENTIFIER% * inSourcePtr) :
GALGAS_%!SUPER_TYPE_IDENTIFIER% (inSourcePtr) {
  macroNullOrValidObject (inSourcePtr, cPtr_%!TYPE_IDENTIFIER%) ;
}

//---------------------------------------------------------------------------*

/* GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!BASE_CLASS_IDENTIFIER% & inSource) :
GALGAS_%!SUPER_TYPE_IDENTIFIER% (inSource) {
  macroNullOrValidObject (mObjectPtr, cPtr_%!TYPE_IDENTIFIER%) ;
}*/

//---------------------------------------------------------------------------*

/*GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & constinAttribute_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end if
  %) :\n%
  %GALGAS_%!SUPER_TYPE_IDENTIFIER% (%
  foreach INHERITED_ATTRIBUTE_LIST
    do %constinAttribute_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  if [INHERITED_ATTRIBUTE_LIST length] > 0 then
    % COMMA_THERE)%
  else
    %THERE)%
  end if
  foreach CURRENT_ATTRIBUTE_LIST do
    %,\n%
    %mAttribute_%![mAttributeName identifierRepresentation]% (constinAttribute_%![mAttributeName identifierRepresentation]%)%
  end foreach
% {
}*/

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (LOCATION_ARGS) {\n%
  %  GALGAS_%!TYPE_IDENTIFIER% result ;\n%
  %  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (THERE)) ;\n%
  %  return result ;\n%
  %}\n\n%
end if

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & inAttribute_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS%  
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end if
  %) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
      between % && %
    end foreach
  %) {
    macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (%
    foreach ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end foreach
    % COMMA_THERE)) ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end if

%//---------------------------------------------------------------------------*

/* GALGAS_%!TYPE_IDENTIFIER%::~GALGAS_%!TYPE_IDENTIFIER% (void) {
} */\n\n%

if ([ALL_ATTRIBUTE_LIST length] > 0) & not IS_ABSTRACT then
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::insulate (LOCATION_ARGS) {\n%
  %  if (isValid () && (mObjectPtr->retainCount () > 1)) {\n%
  %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    cPtr_%!TYPE_IDENTIFIER% * r = NULL ;\n%
  %    macroMyNew (r, cPtr_%!TYPE_IDENTIFIER% (%
  foreach ALL_ATTRIBUTE_LIST
    do %p->mAttribute_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  % COMMA_THERE)) ;\n%
  %    macroAssignObject (mObjectPtr, r) ;\n%
  %    macroReleaseObject (r) ;\n%
  %  }\n%
  %}\n\n%
end if

foreach CONCRETE_METHOD_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  !generateProcedure [
    !"cPtr_" . TYPE_IDENTIFIER . "::method_" . [mMethodName identifierRepresentation]
    !mSignature
    !mInstructionList
    !true # Method is const
    !"C_Compiler"
    !true # Generate location Argument
    !false # Generate 'resetTemplateString'
  ]
end foreach

foreach CURRENT_ATTRIBUTE_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %GALGAS_%![mAttributeTypeIndex identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::reader_%![mAttributeName identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
  %  GALGAS_%![mAttributeTypeIndex identifierRepresentation]% result ;\n%
  %  if (NULL != mObjectPtr) {\n%
  %    const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, const cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end foreach

foreach CURRENT_ATTRIBUTE_LIST do
  %//---------------------------------------------------------------------------*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::modifier_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%GALGAS_%![mAttributeTypeIndex identifierRepresentation]% inValue\n%
                        !^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  if (NULL != mObjectPtr) {\n%
  %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
  %    macroValidObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mAttribute_%![mAttributeName identifierRepresentation]% = inValue ;\n%
  %  }\n%
  %}\n\n%
end foreach

%//---------------------------------------------------------------------------*
//%!["Pointer class for @" . TYPE_NAME . " class" stringByLeftAndRightPadding !75 !' ']%*
//---------------------------------------------------------------------------*

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^
  foreach ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeIndex identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end foreach
  if [ALL_ATTRIBUTE_LIST length] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end if
%) :
cPtr_%!SUPER_TYPE_IDENTIFIER% (%
  foreach INHERITED_ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %, %
  end foreach
  if [INHERITED_ATTRIBUTE_LIST length] > 0 then
    % COMMA_THERE%
  else
    %THERE%
  end if
%)%
  foreach CURRENT_ATTRIBUTE_LIST
    do %,\n% %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
  end foreach
% {
}


