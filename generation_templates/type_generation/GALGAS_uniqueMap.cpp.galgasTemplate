//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

cMapElement_%!TYPE_IDENTIFIER%::cMapElement_%!TYPE_IDENTIFIER% (%?^%const GALGAS_lstring & inKey%
  for () in ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mPropertyTypeProxy identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE)%
for () in ATTRIBUTE_LIST
  do %,\n%  %mProperty_%![mPropertyName identifierRepresentation]% (in_%![mPropertyName identifierRepresentation]%)%
end
% {
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

bool cMapElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mProperty_lkey.isValid ()%
    for () in ATTRIBUTE_LIST
      do % && mProperty_%![mPropertyName identifierRepresentation]%.isValid ()%
    end
  % ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

cMapElement * cMapElement_%!TYPE_IDENTIFIER%::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_%!TYPE_IDENTIFIER% (mProperty_lkey%
    for () in ATTRIBUTE_LIST
      do %, mProperty_%![mPropertyName identifierRepresentation]
    end
  % COMMA_HERE)) ;
  return result ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%if [ATTRIBUTE_LIST length] == 0 then
  %void cMapElement_%!TYPE_IDENTIFIER%::description (C_String & /* ioString */, const int32_t /* inIndentation */) const {\n%
else
  %void cMapElement_%!TYPE_IDENTIFIER%::description (C_String & ioString, const int32_t inIndentation) const {\n%
  for () in ATTRIBUTE_LIST do
    %  ioString << "\\n" ;\n%
    %  ioString.writeStringMultiple ("| ", inIndentation) ;\n%
    %  ioString << %![mPropertyName utf8Representation]% ":" ;\n%
    %  mProperty_%![mPropertyName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
end
%}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

typeComparisonResult cMapElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cMapElement_%!TYPE_IDENTIFIER% * operand = (cMapElement_%!TYPE_IDENTIFIER% *) inOperand ;
  typeComparisonResult result = mProperty_lkey.objectCompare (operand->mProperty_lkey) ;
%  for () in ATTRIBUTE_LIST do
     %  if (kOperandEqual == result) {\n%
     %    result = mProperty_%![mPropertyName identifierRepresentation]%.objectCompare (operand->mProperty_%![mPropertyName identifierRepresentation]%) ;\n%
     %  }\n%
   end
%  return result ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_uniqueMap (%
  switch SHADOW_BEHAVIOUR
  case noMessage :      %kMapAutomatonNoIssue%
  case warningMessage : %kMapAutomatonIssueWarning%
  case errorMessage :   %kMapAutomatonIssueError%
  end
%, %![SHADOW_MESSAGE utf8Representation]%) {
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_uniqueMap (inSource) {
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

GALGAS_%!TYPE_IDENTIFIER% & GALGAS_%!TYPE_IDENTIFIER%::operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) {
  * ((AC_GALGAS_uniqueMap *) this) = inSource ;
  return * this ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//  Map automaton states                                                                                               *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%
for () in MAP_AUTOMATON_STATE_MAP
before
  %#ifndef DO_NOT_GENERATE_CHECKINGS\n%
  %  static const uint32_t kMapStateCount_%!TYPE_IDENTIFIER% = %![[MAP_AUTOMATON_STATE_MAP count] string]% ;\n%
  %#endif\n%
do
  %static const uint32_t kMapState_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% = %![mStateIndex string]% ;\n%
end
%
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//  Map automaton state names                                                                                          *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%
for () in MAP_AUTOMATON_STATE_MAP_ORDERED_LIST
before
  %static const char * kMapStateNames_%!TYPE_IDENTIFIER% [%![[MAP_AUTOMATON_STATE_MAP_ORDERED_LIST length] string]%] = {\n%
do
  %  %![mKey utf8Representation]
between
  %,\n%
after
  %\n} ;\n%
end
%
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//  Map automaton actions                                                                                              *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%
for () in MAP_AUTOMATON_ACTION_MAP
before
  %static const uint32_t kMapActionCount_%!TYPE_IDENTIFIER% = %![[MAP_AUTOMATON_ACTION_MAP count] string]% ;\n%
do
  %static const uint32_t kMapAction_%!TYPE_IDENTIFIER%_%![lkey identifierRepresentation]% = %![mActionIndex string]% ;\n%
end
%
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//  Map automaton transitions                                                                                          *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%
for () in MAP_AUTOMATON_DEFINITION_SORTEDLIST
before
  %static const cMapAutomatonTransition kMapTransitions_%!TYPE_IDENTIFIER% [%
  ![[MAP_AUTOMATON_DEFINITION_SORTEDLIST length] string]
  % * %
  ![[MAP_AUTOMATON_ACTION_MAP count] string]
  %] = {\n%
do
  %// State '%!mStateName%', index %![mStateIndex string]% \n%
  for () in mTransitionList do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mTargetStateName identifierRepresentation]% /* %![mTargetStateIndex string]% */, %
    switch mTransitionMessageKind
    case noMessage :
      %kMapAutomatonNoIssue%
    case warningMessage :
      %kMapAutomatonIssueWarning%
    case errorMessage :
      %kMapAutomatonIssueError%
    end
    %, %
    ![mTransitionMessage utf8Representation]
    %}, // for action '%!mActionName%', (index %![mActionIndex string]%)\n%
  end
after
 %} ;\n%
end
%
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
//  Map automaton final state issues                                                                                   *
//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

%
for () in MAP_AUTOMATON_DEFINITION_SORTEDLIST
before
  %static const cMapAutomatonFinalIssue kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER% [%![[MAP_AUTOMATON_DEFINITION_SORTEDLIST length] string]%] = {\n%
do
  %  {%
  switch mStateMessageKind
  case noMessage :
    %kMapAutomatonNoIssue%
  case warningMessage :
    %kMapAutomatonIssueWarning%
  case errorMessage :
    %kMapAutomatonIssueError%
  end
  %, %
  ![mStateMessage utf8Representation]
  %},// state '%!mStateName%' (index %![mStateIndex string]%)\n%
after
  %} ;\n%
end

if [MAP_AUTOMATON_DEFINITION_SORTEDLIST length] > 0 then
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_closeBranch (%?^%GALGAS_location inErrorLocation,\n%
                            !^%C_Compiler * inCompiler\n%
                            !^%COMMA_LOCATION_ARGS) {\n%
  %  closeBranch (inErrorLocation,\n%
  %               kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER%,\n%
  %               #ifndef DO_NOT_GENERATE_CHECKINGS\n%
  %                 kMapStateCount_%!TYPE_IDENTIFIER%,\n%
  %               #endif\n%
  %               inCompiler COMMA_THERE) ;\n%
  %}\n\n%
end

if [MAP_AUTOMATON_DEFINITION_SORTEDLIST length] > 0 then
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::method_checkAutomatonStates (%?^%GALGAS_location inErrorLocation,\n%
                            !^%C_Compiler * inCompiler\n%
                            !^%COMMA_LOCATION_ARGS) const {\n%
  %  checkAutomatonStates (inErrorLocation, kMapAutomatonFinalIssue_%!TYPE_IDENTIFIER%, inCompiler COMMA_THERE) ;\n%
  %}\n\n%
end

for () in MAP_OVERRIDE_LIST do
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n%
  %//%!["map override '" + mOverrideName + "'" stringByLeftAndRightPadding !117 !' ']%*\n%
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_%
  !TYPE_IDENTIFIER
  %_%
  ![mOverrideName identifierRepresentation]
  % [%![[mBranchBehaviourSortedListForMapOverride length] string]%] = {\n%
  for () in mBranchBehaviourSortedListForMapOverride do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mStartStateName identifierRepresentation]% /* %![mStartStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mCurrentStateName identifierRepresentation]% /* %![mCurrentStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mFinalStateName identifierRepresentation]% /* %![mFinalStateIndex string]% */%
    %, %
    switch mBehaviourMessageKind
    case noMessage :
      %kMapAutomatonNoIssue%
    case warningMessage :
      %kMapAutomatonIssueWarning%
    case errorMessage :
      %kMapAutomatonIssueError%
    end
    %, %
    ![mBehaviourMessage utf8Representation]
    %},\n%
  end  
  %} ;\n\n%
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_%
  !TYPE_IDENTIFIER
  %_%
  ![mOverrideName identifierRepresentation]
  % [%![[mBranchCombinationSortedListForMapOverride length] string]%] = {\n%
  for () in mBranchCombinationSortedListForMapOverride do
    %  {kMapState_%!TYPE_IDENTIFIER%_%![mStartStateName identifierRepresentation]% /* %![mStartStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mCurrentStateName identifierRepresentation]% /* %![mCurrentStateIndex string]% */%
    %, kMapState_%!TYPE_IDENTIFIER%_%![mFinalStateName identifierRepresentation]% /* %![mFinalStateIndex string]% */%
    %, %
    switch mBehaviourMessageKind
    case noMessage :
      %kMapAutomatonNoIssue%
    case warningMessage :
      %kMapAutomatonIssueWarning%
    case errorMessage :
      %kMapAutomatonIssueError%
    end
    %, %
    ![mBehaviourMessage utf8Representation]
    %},\n%
  end  
  %} ;\n\n%
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_openOverrideFor%![[mOverrideName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%C_Compiler * inCompiler\n%
                                !^%COMMA_LOCATION_ARGS) {\n%
  %  openOverride (kBranchBehaviourForOverride_%!TYPE_IDENTIFIER%_%![mOverrideName identifierRepresentation]%, %![[mBranchBehaviourSortedListForMapOverride length] string]%,\n%
  %                kBranchCombinationForOverride_%!TYPE_IDENTIFIER%_%![mOverrideName identifierRepresentation]%, %![[mBranchCombinationSortedListForMapOverride length] string]%,\n%
  %                %![mOverrideName utf8Representation]%,\n%
  %                inCompiler\n%
  %                COMMA_THERE) ;\n%
  %}\n\n%
end

%
%for () in INSERT_METHOD_LIST do
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_%![mInsertMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    for () in ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mPropertyTypeProxy identifierRepresentation]% inArgument%![IDX string]
    end
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
    %  cMapElement_%!TYPE_IDENTIFIER% * p = NULL ;\n%
    %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  for () in ATTRIBUTE_LIST
    do index IDX %, inArgument%![IDX string]
  end
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  block 2 :
    %const char * kInsertErrorMessage = %![mErrorMessage utf8Representation]% ;\n%
    if [mInitialStateName string] == "" then
%insertInSharedMap (attributes,
                   inCompiler,
                   0,
                   NULL,
                   kInsertErrorMessage
                   COMMA_THERE) ;\n%
    else
%insertInSharedMap (attributes,
                   inCompiler,
                   kMapState_%!TYPE_IDENTIFIER%_%![mInitialStateName identifierRepresentation]%,
                   kMapStateNames_%!TYPE_IDENTIFIER% [kMapState_%!TYPE_IDENTIFIER%_%![mInitialStateName identifierRepresentation]%],
                   kInsertErrorMessage
                   COMMA_THERE) ;\n%
    end
  end
  %}\n\n%
end

for () in SEARCH_METHOD_LIST do
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %const char * kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]% = %![mErrorMessage utf8Representation]% ;\n\n%
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::%
    if [mActionName string] == "" then
      %method_%
    else
      %setter_%
    end
    ![mSearchMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    for () in ATTRIBUTE_LIST
      do index IDX %,\n%!^%GALGAS_%![mPropertyTypeProxy identifierRepresentation]% & outArgument%![IDX string]
    end
    %,\n %!^%C_Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) %
    if [mActionName string] == "" then
      %const %
    end
    %{\n%
  block 2 :
    %const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) performSearch (%?^%inKey,\n%
    !^%inCompiler,\n%
    if [mActionName string] != "" then
      !^%kMapAction_%!TYPE_IDENTIFIER%_%![mActionName identifierRepresentation]%,\n%
      !^%kMapTransitions_%!TYPE_IDENTIFIER%,\n%
      !^%kMapActionCount_%!TYPE_IDENTIFIER%,\n%
      !^%#ifndef DO_NOT_GENERATE_CHECKINGS\n%
      !^%  kMapStateCount_%!TYPE_IDENTIFIER%,\n%
      !^%#endif\n%
    end
    !^%kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]%\n%
    !^%COMMA_THERE) ;\n%
    %if (NULL == p) {\n%
    for () in ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]%.drop () ;\n%
    end
    %}else{\n%
    %  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
    for () in ATTRIBUTE_LIST do index IDX
      %  outArgument%![IDX string]% = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
    end
    %}\n%
  end
  %}\n\n%
end

for () in ATTRIBUTE_LIST do index IDX
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %GALGAS_%![mPropertyTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::getter_%![mPropertyName identifierRepresentation]%ForKey (%?^%const GALGAS_string & inKey,\n%
  %                                               %!^%C_Compiler * inCompiler\n%
  %                                               %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  GALGAS_%![mPropertyTypeProxy identifierRepresentation]% result ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end 

for () in ATTRIBUTE_LIST do index IDX
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_set%![[mPropertyName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GALGAS_%![mPropertyTypeProxy identifierRepresentation]% inAttributeValue,\n%
  %                           %!^%GALGAS_string inKey,\n%
  %                           %!^%C_Compiler * inCompiler\n%
  %                           %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  if (NULL != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mProperty_%![mPropertyName identifierRepresentation]% = inAttributeValue ;\n%
  %  }\n%
  %}\n\n%
end 

%//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

cMapElement_%!TYPE_IDENTIFIER% * GALGAS_%!TYPE_IDENTIFIER%::readWriteAccessForWithInstruction (%?^%C_Compiler * inCompiler,\n%
             !^%const GALGAS_string & inKey\n%
             !^%COMMA_LOCATION_ARGS) {
  cMapElement_%!TYPE_IDENTIFIER% * result = (cMapElement_%!TYPE_IDENTIFIER% *) searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_%!TYPE_IDENTIFIER%) ;
  return result ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                       %!^%const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator (inOrder) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

GALGAS_lstring cEnumerator_%!TYPE_IDENTIFIER%::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mProperty_lkey ;
}

%for () in ATTRIBUTE_LIST do index IDX
  %//—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*\n\n%
  %GALGAS_%![mPropertyTypeProxy identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end 
%

