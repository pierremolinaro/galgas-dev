//---------------------------------------------------------------------------------------------------------------------*
//   Object comparison                                                                                                 *
//---------------------------------------------------------------------------------------------------------------------*

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
%typeComparisonResult cPtr_%!TYPE_IDENTIFIER%::dynamicObjectCompare (const acPtr_class * /* inOperandPtr */) const {
  return kOperandEqual ;
}

//---------------------------------------------------------------------------------------------------------------------*
%end

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
%typeComparisonResult cPtr_%!TYPE_IDENTIFIER%::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;
% for () in ALL_ATTRIBUTE_LIST do
    %  if (kOperandEqual == result) {\n%
    %    result = mAttribute_%![mAttributeName identifierRepresentation]%.objectCompare (p->mAttribute_%![mAttributeName identifierRepresentation]%) ;\n%
    %  }\n%
  end
%  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*
%end%

typeComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end% () {
}

%if HAS_DEFAULT_CONSTRUCTOR & not IS_ABSTRACT then
%//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_default (LOCATION_ARGS) {
  return GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
if [ALL_ATTRIBUTE_LIST length] > 0 then
for () in ALL_ATTRIBUTE_LIST do
   %GALGAS_%![mAttributeTypeProxy identifierRepresentation]%::constructor_%![[mAttributeTypeProxy mDefaultConstructorName] identifierRepresentation]% (HERE)%
  between %,\n%!^
end%\n%!^%COMMA_THERE%
else
  %THERE%
end
%) ;
}

%end
%//---------------------------------------------------------------------------------------------------------------------*

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const cPtr_%!TYPE_IDENTIFIER% * inSourcePtr) :
%if SUPER_TYPE_IDENTIFIER == "" then %AC_GALGAS_class% else %GALGAS_%!SUPER_TYPE_IDENTIFIER end% (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_%!TYPE_IDENTIFIER%) ;
}

%
if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] == 0) then
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (LOCATION_ARGS) {\n%
  %  GALGAS_%!TYPE_IDENTIFIER% result ;\n%
  %  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (THERE)) ;\n%
  %  return result ;\n%
  %}\n\n%
end

if (not IS_ABSTRACT) & ([ALL_ATTRIBUTE_LIST length] > 0) then
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
  for () in ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & inAttribute_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %LOCATION_ARGS%  
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end
  %) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (%
    for () in ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]%.isValid ()%
      between % && %
    end
  %) {
    macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (%
    for () in ALL_ATTRIBUTE_LIST
      do %inAttribute_%![mAttributeName identifierRepresentation]
      between %, %
    end
    % COMMA_THERE)) ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end

for () in CURRENT_ATTRIBUTE_LIST do
  if mHasGetter then
    %//---------------------------------------------------------------------------------------------------------------------*\n\n%
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::getter_%![mAttributeName identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
    %  GALGAS_%![mAttributeTypeProxy identifierRepresentation]% result ;\n%
    %  if (NULL != mObjectPtr) {\n%
    %    const cPtr_%!TYPE_IDENTIFIER% * p = (const cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %    result = p->mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
    %//---------------------------------------------------------------------------------------------------------------------*\n\n%
    %GALGAS_%![mAttributeTypeProxy identifierRepresentation]% cPtr_%!TYPE_IDENTIFIER%::getter_%![mAttributeName identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
    %  return mAttribute_%![mAttributeName identifierRepresentation]% ;\n%
    %}\n\n%
  end
end

for () in CURRENT_ATTRIBUTE_LIST do
  if mHasSetter then
    %//---------------------------------------------------------------------------------------------------------------------*\n\n%
    %void GALGAS_%!TYPE_IDENTIFIER%::setter_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inValue\n%
                          !^%COMMA_LOCATION_ARGS) {\n%
    %  if (NULL != mObjectPtr) {\n%
    %    insulate (THERE) ;\n%
    %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %    p->mAttribute_%![mAttributeName identifierRepresentation]% = inValue ;\n%
    %  }\n%
    %}\n\n%
    %//---------------------------------------------------------------------------------------------------------------------*\n\n%
    %void cPtr_%!TYPE_IDENTIFIER%::setter_set%![[mAttributeName stringByCapitalizingFirstCharacter] identifierRepresentation]% (%?^%GALGAS_%![mAttributeTypeProxy identifierRepresentation]% inValue\n%
                          !^%COMMA_UNUSED_LOCATION_ARGS) {\n%
    %  mAttribute_%![mAttributeName identifierRepresentation]% = inValue ;\n%
    %}\n\n%
  end
end

%//---------------------------------------------------------------------------------------------------------------------*
//%!["Pointer class for @" + TYPE_NAME + " class" stringByLeftAndRightPadding !117 !' ']%*
//---------------------------------------------------------------------------------------------------------------------*

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^
  for () in ALL_ATTRIBUTE_LIST
    do %const GALGAS_%![mAttributeTypeProxy identifierRepresentation]% & in_%![mAttributeName identifierRepresentation]
    between %,\n%!^
  end
  if [ALL_ATTRIBUTE_LIST length] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end
%) :
%if SUPER_TYPE_IDENTIFIER == "" then %acPtr_class% else %cPtr_%!SUPER_TYPE_IDENTIFIER end% (%
  for () in INHERITED_ATTRIBUTE_LIST
    do %in_%![mAttributeName identifierRepresentation]
    between %, %
  end
  if [INHERITED_ATTRIBUTE_LIST length] > 0 then
    % COMMA_THERE%
  else
    %THERE%
  end
%)%
  for () in CURRENT_ATTRIBUTE_LIST
    do %,\n% %mAttribute_%![mAttributeName identifierRepresentation]% (in_%![mAttributeName identifierRepresentation]%)%
  end
% {
}

%
if not IS_ABSTRACT then
  %//---------------------------------------------------------------------------------------------------------------------*\n\n%
  %const C_galgas_type_descriptor * cPtr_%!TYPE_IDENTIFIER%::classDescriptor (void) const {\n%
  %  return & kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;\n%
  %}\n\n%
  if [ALL_ATTRIBUTE_LIST length] == 0 then
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const int32_t /* inIndentation */) const {\n%
    %  ioString << "[@%!TYPE_NAME%]" ;\n%
    %}\n\n%
  else
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,\n%
                               !^%const int32_t inIndentation) const {\n%
    %  ioString << "[@%!TYPE_NAME%:" ;\n%
    for () in ALL_ATTRIBUTE_LIST
      do %  mAttribute_%![mAttributeName identifierRepresentation]%.description (ioString, inIndentation+1) ;\n%
      between %  ioString << ", " ;\n%
    end
    %  ioString << "]" ;\n%
    %}\n\n%
  end
end

if not IS_ABSTRACT then
%//---------------------------------------------------------------------------------------------------------------------*

acPtr_class * cPtr_%!TYPE_IDENTIFIER%::duplicate (LOCATION_ARGS) const {
  acPtr_class * ptr = NULL ;
  macroMyNew (ptr, cPtr_%!TYPE_IDENTIFIER% (%
  for () in ALL_ATTRIBUTE_LIST
  do  %mAttribute_%![mAttributeName identifierRepresentation]
  between %, %
  after % COMMA_%
  end
  
  %THERE)) ;
  return ptr ;
}

%end
%
