
#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#import "OC_Token.h"
#import "F_CocoaWrapperForGalgas.h"
%foreach [GUI_CONTEXT mWithLexiqueList] do
  %#import "%mLexiqueClassName%-cocoa.m"\n%
end foreach
foreach [GUI_CONTEXT mNibAndClassList] do
  %#import "%mClassName%.h"\n%
end foreach%
#ifdef USER_DEFAULT_COLORS_DEFINED
  #import "user_default_colors.h"
#endif

//---------------------------------------------------------------------------*

#pragma mark Nibs

//---------------------------------------------------------------------------*
//                                                                           *
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S            *
//                                                                           *
//---------------------------------------------------------------------------*

NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
%foreach [GUI_CONTEXT mNibAndClassList] do
  %    [NSArray arrayWithObjects:@"%mNibName%", [%mClassName% class], nil],\n%
end foreach%    nil
  ] ;
}

//---------------------------------------------------------------------------*

#pragma mark Command Line Options

//---------------------------------------------------------------------------*
//                                                                           *
//                       Command Line Options                                *
//                                                                           *
//---------------------------------------------------------------------------*

%
foreach [GUI_CONTEXT mImportedOptionComponentList] do
  %#import "%mValue%-cocoa.m"\n%
end foreach
%
//---------------------------------------------------------------------------*

void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray) {
%
foreach [GUI_CONTEXT mImportedOptionComponentList] do
  %  enterOptionsFor_%([mValue identifierRepresentation])% (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray) ;\n%
end foreach
%}

//---------------------------------------------------------------------------*

#pragma mark Popup List Data

//---------------------------------------------------------------------------*
//                                                                           *
//                     P O P U P    L I S T    D A T A                       *
//                                                                           *
//---------------------------------------------------------------------------*

static uint16 kPopUpListData_7 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_20 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_41 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_45 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_49 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_52 [] = {141, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_62 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_68 [] = {1, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_69 [] = {141, 0} ;

//---------------------------------------------------------------------------*

static uint16 kPopUpListData_75 [] = {99, 0} ;

//---------------------------------------------------------------------------*

static const uint16 * kPopUpListData [144] = {
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_7,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_20,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_41,
  NULL,
  NULL,
  NULL,
  kPopUpListData_45,
  NULL,
  NULL,
  NULL,
  kPopUpListData_49,
  NULL,
  NULL,
  kPopUpListData_52,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_62,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_68,
  kPopUpListData_69,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  kPopUpListData_75,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL} ;

//---------------------------------------------------------------------------*

#pragma mark Lexique interface

//---------------------------------------------------------------------------*
//                                                                           *
//                            Lexique interface                              *
//                                                                           *
//---------------------------------------------------------------------------*

@interface OC_Tokenizer_galgas_scanner : OC_Lexique_galgas_scanner {
}

@end

//---------------------------------------------------------------------------*

@implementation OC_Tokenizer_galgas_scanner

//---------------------------------------------------------------------------*

- (NSString *) blockComment {
  return @"#" ;
}

//---------------------------------------------------------------------------*

- (UInt32) textMacroCount {
  return 7 ;
}

//---------------------------------------------------------------------------*

- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {
  static NSString * kTextMacroTitle [8] = {
    @"Types/Class",
    @"Types/Enum",
    @"Types/List",
    @"Types/List Map",
    @"Types/Map",
    @"Types/Sorted List",
    @"Types/Struct",
    NULL
  } ;
  return kTextMacroTitle [inIndex] ;
}

//---------------------------------------------------------------------------*

- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {
  static NSString * kTextMacroContent [8] = {
    @"class @aClassName : extends @superClassNane {\n"
    "  @aType mAnAttribute ;\n"
    "  override method myMethod !@string outResult :\n"
    "    outResult := \"a string\" ;\n"
    "  end method ;\n"
    "}\n",
    @"enum @aType {\n"
    "  constructor constant1 ;\n"
    "  constructor constant2 ;\n"
    "}{\n"
    "  reader actualArgumentMessage :\n"
    "    constant1 -> \"message for constant1\" ;\n"
    "    constant2 -> \"message for constant2\" ;\n"
    "  end reader ;\n"
    "}\n",
    @"list @type {\n"
    "  @aType mAnAttribute ;\n"
    "}\n",
    @"list @type {\n"
    "  @aType mAnAttribute ;\n"
    "}\n"
    "listmap @myListMap (@aList) ;\n",
    @"map @type {\n"
    "  @aType mAnAttribute ;\n"
    "}\n",
    @"sortedlist @type {\n"
    "  @string mFirstAttribute ;\n"
    "  @bool mSecondAttribute ;\n"
    "}{\n"
    "mFirstAttribute >, mSecondAttribute <\n"
    "}\n",
    @"struct @type {\n"
    "  @aType mAnAttribute ;\n"
    "}\n",
    NULL
  } ;
  return kTextMacroContent [inIndex] ;
}

//---------------------------------------------------------------------------*

- (const UInt16 **) popupListData {
  return kPopUpListData ;
}

//---------------------------------------------------------------------------*

@end

//---------------------------------------------------------------------------*

NSObject <OCP_TokenizerProtocol> * tokenizerForExtension (const NSString * inExtension) {
  NSObject <OCP_TokenizerProtocol> * result = nil ;\n%
foreach [GUI_CONTEXT mExtensionMap]
  before %  if%
  do % ([inExtension isEqualToString:@%([key utf8Representation])%]) {\n%
     %    result = [[OC_Tokenizer_%mLexiqueName% alloc] init] ;\n%
  between %  }else if%
  after %  }\n%
end foreach
%  return result ;
}

//---------------------------------------------------------------------------*

NSArray * tokenizers (void) {
  return [NSArray arrayWithObjects:
%foreach [GUI_CONTEXT mWithLexiqueList] do
  %    [[[OC_Tokenizer_%mLexiqueClassName% alloc] init] autorelease],\n%
end foreach
%    nil
  ] ;
}

//---------------------------------------------------------------------------*

