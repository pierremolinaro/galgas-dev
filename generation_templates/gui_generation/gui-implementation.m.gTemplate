
#import "OC_Token.h"
#import "F_CocoaWrapperForGalgas.h"
%foreach [GUI_CONTEXT mWithLexiqueList] do
  %#import "%!mLexiqueClassName%-cocoa.m"\n%
end foreach
foreach [GUI_CONTEXT mNibAndClassList] do
  %#import "%!mValue%.h"\n%
end foreach%
#ifdef USER_DEFAULT_COLORS_DEFINED
  #import "user_default_colors.h"
#endif

//-----------------------------------------------------------------------------*

#pragma mark Nibs

//-----------------------------------------------------------------------------*
//                                                                             *
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S            *
//                                                                             *
//-----------------------------------------------------------------------------*

NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
%foreach [GUI_CONTEXT mNibAndClassList] do
  %    [NSArray arrayWithObjects:@"%!mValue%", [%!mValue% class], nil],\n%
end foreach%    nil
  ] ;
}

//-----------------------------------------------------------------------------*

#pragma mark Command Line Options

//-----------------------------------------------------------------------------*
//                                                                             *
//                       Command Line Options                                *
//                                                                             *
//-----------------------------------------------------------------------------*

%
foreach [GUI_CONTEXT mImportedOptionComponentList] do
  %#import "%!mValue%-cocoa.m"\n%
end foreach
%
//-----------------------------------------------------------------------------*

void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray) {
%
foreach [GUI_CONTEXT mImportedOptionComponentList] do
  %  enterOptionsFor_%![mValue identifierRepresentation]% (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray) ;\n%
end foreach
%}

%foreach [GUI_CONTEXT mWithLexiqueList] do
  %//-----------------------------------------------------------------------------*\n\n%
  %#pragma mark Lexique %!mLexiqueClassName%\n\n%
  %//-----------------------------------------------------------------------------*\n%
  %//                                                                             *\n%
  %//                     P O P    U P    L I S T    D A T A                    *\n%
  %//                                                                             *\n%
  %//-----------------------------------------------------------------------------*\n\n%
  foreach mLabels do
    %static const UInt16 gPopUpData_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation locationIndex] string]% [%![ 2 * [mTerminalList length] + 2 string]%] = {\n%
    %  %![mLeadingCharacterStrippedCount string]%, // Leading character count to strip\n%
      foreach mTerminalList do
        %  %!mLexiqueClassName%_1_%![mTerminal identifierRepresentation]%, %![mDisplayFlags string]%,\n%
      end foreach    
    %  0\n%
    %} ;\n\n%
  end foreach
  %static const UInt16 * gPopUpData_%![mLexiqueClassName identifierRepresentation]% [%![[mLabels length] + 1 string]%] = {\n%
  foreach mLabels do
    %  gPopUpData_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation locationIndex] string]%,\n%
  end foreach
    %  NULL\n%
    %} ;\n\n%
  %//-----------------------------------------------------------------------------*\n%
  %//                                                                             *\n%
  %//                            Lexique interface                              *\n%
  %//                                                                             *\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %@interface OC_Tokenizer_%!mLexiqueClassName% : OC_Lexique_%!mLexiqueClassName% {\n\n%
  %}\n\n%
  %- (NSString *) blockComment ;\n\n%
  %- (const UInt16 * *) popupListData ;\n\n%
  %- (NSUInteger) textMacroCount ;\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex ;\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex ;\n\n%
  %- (NSString *) tabItemTitle ;\n\n%
  %@end\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %@implementation OC_Tokenizer_%!mLexiqueClassName%\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (NSString *) blockComment {\n%
  %  return @%![mBlockComment utf8Representation]% ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (const UInt16 * *) popupListData {\n%
  %  return gPopUpData_%![mLexiqueClassName identifierRepresentation]% ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (NSUInteger) textMacroCount {\n%
  %  return %![[mTextMacroList length] string]% ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (NSString *) tabItemTitle {\n%
  %  return @%![mTitle utf8Representation]% ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroTitle [%![[mTextMacroList length] + 1 string]%] = {\n%
  foreach mTextMacroList do
    %    @%![mKey utf8Representation]%,\n%
  end foreach
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroTitle [inIndex] ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroContent [%![[mTextMacroList length] + 1 string]%] = {\n%
  foreach mTextMacroList do
    %    @%![mContents utf8Representation]%,\n%
  end foreach
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroContent [inIndex] ;\n%
  %}\n\n%
  %//-----------------------------------------------------------------------------*\n\n%
  %@end\n\n%
end foreach
%

//-----------------------------------------------------------------------------*

OC_Lexique * tokenizerForExtension (const NSString * inExtension) {
  OC_Lexique * result = nil ;\n%
foreach [GUI_CONTEXT mExtensionMap]
  before %  if%
  do % ([inExtension isEqualToString:@%![lkey utf8Representation]%]) {\n%
     %    result = [OC_Tokenizer_%!mLexiqueName% new] ;\n%
  between %  }else if%
  after %  }\n%
end foreach
%  return result ;
}

//-----------------------------------------------------------------------------*

NSArray * tokenizers (void) {
  return [NSArray arrayWithObjects:
%foreach [GUI_CONTEXT mWithLexiqueList] do
  %    [OC_Tokenizer_%!mLexiqueClassName% new],\n%
end foreach
%    nil
  ] ;
}

//-----------------------------------------------------------------------------*

